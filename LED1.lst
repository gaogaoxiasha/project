Interrupt Vectors
    00000 940C 00B6 JMP	__text_start|__start

Program Code (text area)
__text_start|__start:
    000B6 E5CF      LDI	R28,0x5F
    000B7 E0D4      LDI	R29,4
    000B8 BFCD      OUT	0x3D,R28
    000B9 BFDE      OUT	0x3E,R29
    000BA 51CE      SUBI	R28,0x1E
    000BB 40D0      SBCI	R29,0
    000BC EA0A      LDI	R16,0xAA
    000BD 8308      ST	Y,R16
    000BE 2400      CLR	R0
    000BF E3E8      LDI	R30,0x38
    000C0 E0F1      LDI	R31,1
    000C1 E011      LDI	R17,1
    000C2 33E8      CPI	R30,0x38
    000C3 07F1      CPC	R31,R17
    000C4 F011      BEQ	0x00C7
    000C5 9201      ST	Z+,R0
    000C6 CFFB      RJMP	0x00C2
    000C7 8300      ST	Z,R16
    000C8 E9E4      LDI	R30,0x94
    000C9 E0F0      LDI	R31,0
    000CA E6A0      LDI	R26,0x60
    000CB E0B0      LDI	R27,0
    000CC E011      LDI	R17,1
    000CD E000      LDI	R16,0
    000CE BF0B      OUT	0x3B,R16
    000CF 36EC      CPI	R30,0x6C
    000D0 07F1      CPC	R31,R17
    000D1 F021      BEQ	0x00D6
    000D2 95C8      LPM
    000D3 9631      ADIW	R30,1
    000D4 920D      ST	X+,R0
    000D5 CFF9      RJMP	0x00CF
    000D6 940E 0123 CALL	_main
_exit:
    000D8 CFFF      RJMP	_exit
FILE: C:\Users\HaiPiao\Desktop\附小实验\程序\声音+红外\main.c
(0001) //ICC-AVR application builder : 2014/7/22 19:16:57
(0002) // Target : M16
(0003) // Crystal: 7.3728Mhz
(0004) 
(0005) #include "Includes.h"
(0006) 
(0007) #define Max_note      100
(0008) 
(0009) unsigned int note_n = 0;
(0010) unsigned int int_n = 0;
(0011) 
(0012) void LEDOnBoardInit(void)
(0013) {
(0014)     DDRC |= (0x01<<6)|(0x01<<7);
_LEDOnBoardInit:
    000D9 B384      IN	R24,0x14
    000DA 6C80      ORI	R24,0xC0
    000DB BB84      OUT	0x14,R24
(0015) 	//PORTC |= (0x01<<6)|(0x01<<7);
(0016) 	PORTC &= ~((0x01<<6)|(0x01<<7));
    000DC B385      IN	R24,0x15
    000DD 738F      ANDI	R24,0x3F
    000DE BB85      OUT	0x15,R24
    000DF 9508      RET
(0017) }
(0018) void SET_LED_D10(unsigned char state)
(0019) {
(0020)  	PORTC = PORTC&(~(0X01<<6))|(state<<6);
_SET_LED_D10:
  state                --> R16
    000E0 2E20      MOV	R2,R16
    000E1 0C22      LSL	R2
    000E2 0C22      LSL	R2
    000E3 0C22      LSL	R2
    000E4 0C22      LSL	R2
    000E5 0C22      LSL	R2
    000E6 0C22      LSL	R2
    000E7 B385      IN	R24,0x15
    000E8 7B8F      ANDI	R24,0xBF
    000E9 2982      OR	R24,R2
    000EA BB85      OUT	0x15,R24
    000EB 9508      RET
(0021) }
(0022) void SET_LED_D11(unsigned char state)
(0023) {
(0024)  	PORTC = PORTC&(~(0X01<<7))|(state<<7);
_SET_LED_D11:
  state                --> R16
    000EC 2E20      MOV	R2,R16
    000ED 0C22      LSL	R2
    000EE 0C22      LSL	R2
    000EF 0C22      LSL	R2
    000F0 0C22      LSL	R2
    000F1 0C22      LSL	R2
    000F2 0C22      LSL	R2
    000F3 0C22      LSL	R2
    000F4 B385      IN	R24,0x15
    000F5 778F      ANDI	R24,0x7F
    000F6 2982      OR	R24,R2
    000F7 BB85      OUT	0x15,R24
    000F8 9508      RET
(0025) }
(0026) unsigned int t[28] = {0,3824,3460,3036,2864,2552,2272,2024,0,0,0,     //中音0-7
(0027)                         1880,1702,1517,1431,1275,1136,1012,0,0,0,     //高音11-17   频率
(0028) 						7633,6802,6060,5730,5102,4545,4048};          //低音21-27
(0029) 						
(0030) unsigned int d[28] = {0, 105, 116, 132, 140, 157, 176, 198,0,0,0,     //中音0-7
(0031)                          209, 234, 263, 279, 313, 352, 395,0,0,0,     //高音11-17   节拍
(0032) 						  52,  58,  66,  70,  78,  88,  98};          //低音21-27
(0033) 
(0034) unsigned char music[Max_note] = { 5,4, 5,4, 6,8, 5,8,11,8, 7,16,
(0035)                                   5,4, 5,4, 6,8, 5,8,12,8,11,16,
(0036) 								  5,4, 5,4,15,8,13,8,11,8, 7,8, 6,16,
(0037) 								 14,4,14,4,13,8,11,8,12,8,11,16,
(0038) 								 5,4, 5,4, 6,8, 5,8,11,8, 7,16,
(0039)                                   5,4, 5,4, 6,8, 5,8,12,8,11,16,
(0040) 								  5,4, 5,4,15,8,13,8,11,8, 7,8, 6,16,
(0041) 								 14,4,14,4,13,8,11,8,12,8,11,16};//祝你生日快乐100
(0042) 						  
(0043) 
(0044) 
(0045) 
(0046) void port_init(void)
(0047) {
(0048)  PORTA = 0x00;
_port_init:
    000F9 2422      CLR	R2
    000FA BA2B      OUT	0x1B,R2
(0049)  DDRA  = 0x00;
    000FB BA2A      OUT	0x1A,R2
(0050)  PORTB = 0x00;
    000FC BA28      OUT	0x18,R2
(0051)  DDRB  = 0x00;
    000FD BA27      OUT	0x17,R2
(0052)  PORTC = 0x00; //m103 output only
    000FE BA25      OUT	0x15,R2
(0053)  DDRC  = 0x00;
    000FF BA24      OUT	0x14,R2
(0054)  PORTD = 0x00;
    00100 BA22      OUT	0x12,R2
(0055)  DDRD  = 0x00;
    00101 BA21      OUT	0x11,R2
    00102 9508      RET
(0056)  }
(0057)  
(0058)  
(0059) //TIMER2 initialize - prescale:1024
(0060) // WGM: CTC
(0061) // desired value: 100Hz
(0062) // actual value: 98.630Hz (1.4%)
(0063) void timer2_50Hz(void)
(0064) {
(0065)  TCCR2 = 0x00; //stop
_timer2_50Hz:
    00103 2422      CLR	R2
    00104 BC25      OUT	0x25,R2
(0066)  ASSR  = 0x00; //set async mode
    00105 BC22      OUT	0x22,R2
(0067)  TCNT2 = 0xB8; //setup
    00106 EB88      LDI	R24,0xB8
    00107 BD84      OUT	0x24,R24
(0068)  OCR2  = 0x48;
    00108 E488      LDI	R24,0x48
    00109 BD83      OUT	0x23,R24
(0069)  TCCR2 = 0x1F; //start
    0010A E18F      LDI	R24,0x1F
    0010B BD85      OUT	0x25,R24
    0010C 9508      RET
(0070) }
(0071) 
(0072) //TIMER2 initialize - prescale:256
(0073) // WGM: CTC
(0074) // desired value: 200Hz
(0075) // actual value: 198.621Hz (0.7%)
(0076) void timer2_100Hz(void)
(0077) {
(0078)  TCCR2 = 0x00; //stop
_timer2_100Hz:
    0010D 2422      CLR	R2
    0010E BC25      OUT	0x25,R2
(0079)  ASSR  = 0x00; //set async mode
    0010F BC22      OUT	0x22,R2
(0080)  TCNT2 = 0x70; //setup
    00110 E780      LDI	R24,0x70
    00111 BD84      OUT	0x24,R24
(0081)  OCR2  = 0x90;
    00112 E980      LDI	R24,0x90
    00113 BD83      OUT	0x23,R24
(0082)  TCCR2 = 0x1E; //start
    00114 E18E      LDI	R24,0x1E
    00115 BD85      OUT	0x25,R24
    00116 9508      RET
(0083) }
(0084) 
(0085) 
(0086) //call this routine to initialize all peripherals
(0087) void init_devices(void)
(0088) {
(0089)  //stop errant interrupts until set up
(0090)  CLI(); //disable all interrupts
_init_devices:
    00117 94F8      BCLR	7
(0091)  port_init(); 
    00118 DFE0      RCALL	_port_init
(0092)  LEDOnBoardInit();
    00119 DFBF      RCALL	_LEDOnBoardInit
(0093)  init_7279(); 
    0011A 940E 038F CALL	_init_7279
(0094) 
(0095)  //timer2_init();
(0096)   
(0097)  MCUCR = 0x00;
    0011C 2422      CLR	R2
    0011D BE25      OUT	0x35,R2
(0098)  GICR  = 0x00;
    0011E BE2B      OUT	0x3B,R2
(0099)  TIMSK = 0x80; //timer interrupt sources
    0011F E880      LDI	R24,0x80
    00120 BF89      OUT	0x39,R24
(0100)  SEI(); //re-enable interrupts
    00121 9478      BSET	7
    00122 9508      RET
_main:
  CH                   --> R22
  temp_yz              --> R10
  led                  --> R20
  temp                 --> R20
    00123 9726      SBIW	R28,6
(0101)  //all peripherals are now initialized
(0102) }
(0103) 
(0104) void main(void)
(0105) {
(0106)   int temp,temp_yz;
(0107)   int CH;
(0108)   int led=0; 
    00124 2744      CLR	R20
    00125 2755      CLR	R21
(0109)   init_devices();
    00126 DFF0      RCALL	_init_devices
(0110)   Delay_ms(20);      
    00127 E104      LDI	R16,0x14
    00128 E010      LDI	R17,0
    00129 940E 02F9 CALL	_Delay_ms
(0111)   
(0112) 
(0113)   /*
(0114)   */
(0115)   CH = get_data(0,0);
    0012B 2722      CLR	R18
    0012C 2700      CLR	R16
    0012D 940E 06DA CALL	_get_data
    0012F 01B8      MOVW	R22,R16
(0116)  // CH = 7;
(0117)   switch (CH)
    00130 3000      CPI	R16,0
    00131 0701      CPC	R16,R17
    00132 F0D1      BEQ	0x014D
    00133 3004      CPI	R16,4
    00134 E0E0      LDI	R30,0
    00135 071E      CPC	R17,R30
    00136 F409      BNE	0x0138
    00137 C050      RJMP	0x0188
    00138 3006      CPI	R16,6
    00139 E0E0      LDI	R30,0
    0013A 071E      CPC	R17,R30
    0013B F409      BNE	0x013D
    0013C C0C5      RJMP	0x0202
    0013D 3007      CPI	R16,7
    0013E E0E0      LDI	R30,0
    0013F 071E      CPC	R17,R30
    00140 F409      BNE	0x0142
    00141 C0D6      RJMP	0x0218
    00142 3000      CPI	R16,0
    00143 E0E0      LDI	R30,0
    00144 071E      CPC	R17,R30
    00145 F40C      BGE	0x0147
    00146 C180      RJMP	0x02C7
    00147 306D      CPI	R22,0xD
    00148 E0E0      LDI	R30,0
    00149 077E      CPC	R23,R30
    0014A F409      BNE	0x014C
    0014B C0E2      RJMP	0x022E
    0014C C17A      RJMP	0x02C7
(0118)   {
(0119)    case 0://LED模式
(0120)      {	  
(0121) 	  DDRB = 0xFF;
    0014D EF8F      LDI	R24,0xFF
    0014E BB87      OUT	0x17,R24
(0122)       PORTB = 0XFF;
    0014F BB88      OUT	0x18,R24
(0123)       DDRD = 0XFF;
    00150 BB81      OUT	0x11,R24
(0124) 	  PORTD = 0XFF;
    00151 BB82      OUT	0x12,R24
    00152 C034      RJMP	0x0187
(0125)       
(0126) 	  while(1)
(0127) 	  {
(0128) 	   if(led<8)
    00153 3048      CPI	R20,0x8
    00154 E0E0      LDI	R30,0
    00155 075E      CPC	R21,R30
    00156 F494      BGE	0x0169
(0129) 	   {
(0130) 	    PORTD = 0XFF;
    00157 EF8F      LDI	R24,0xFF
    00158 BB82      OUT	0x12,R24
(0131) 		PORTB = ~(1<<led);
    00159 E001      LDI	R16,1
    0015A E010      LDI	R17,0
    0015B 019A      MOVW	R18,R20
    0015C 940E 086D CALL	lsl16
    0015E 0118      MOVW	R2,R16
    0015F 9420      COM	R2
    00160 9430      COM	R3
    00161 BA28      OUT	0x18,R2
(0132) 		Delay_ms(200);
    00162 EC08      LDI	R16,0xC8
    00163 E010      LDI	R17,0
    00164 940E 02F9 CALL	_Delay_ms
(0133) 		led++;
    00166 5F4F      SUBI	R20,0xFF
    00167 4F5F      SBCI	R21,0xFF
(0134) 	   }
    00168 C01E      RJMP	0x0187
(0135) 	   else if((led>=8)&&(led<16))
    00169 3048      CPI	R20,0x8
    0016A E0E0      LDI	R30,0
    0016B 075E      CPC	R21,R30
    0016C F0C4      BLT	0x0185
    0016D 3140      CPI	R20,0x10
    0016E E0E0      LDI	R30,0
    0016F 075E      CPC	R21,R30
    00170 F4A4      BGE	0x0185
(0136) 	   {
(0137) 	    PORTB = 0XFF;
    00171 EF8F      LDI	R24,0xFF
    00172 BB88      OUT	0x18,R24
(0138) 		PORTD = ~(1<<(led-8));
    00173 019A      MOVW	R18,R20
    00174 5028      SUBI	R18,0x8
    00175 4030      SBCI	R19,0
    00176 E001      LDI	R16,1
    00177 E010      LDI	R17,0
    00178 940E 086D CALL	lsl16
    0017A 0118      MOVW	R2,R16
    0017B 9420      COM	R2
    0017C 9430      COM	R3
    0017D BA22      OUT	0x12,R2
(0139) 		Delay_ms(200);
    0017E EC08      LDI	R16,0xC8
    0017F E010      LDI	R17,0
    00180 940E 02F9 CALL	_Delay_ms
(0140) 		led++;
    00182 5F4F      SUBI	R20,0xFF
    00183 4F5F      SBCI	R21,0xFF
(0141) 	   }
    00184 C002      RJMP	0x0187
(0142) 	   else
(0143) 	   {
(0144) 	    led=0;
    00185 2744      CLR	R20
    00186 2755      CLR	R21
    00187 CFCB      RJMP	0x0153
(0145) 	   } 
(0146) 	  }	   
(0147) 	 };
(0148) 	 break;
(0149) 	 
(0150)    case 4://温度传感器模式，显示温度值
(0151)      {
(0152) 	  dis_data(7,7,4);
    00188 E084      LDI	R24,4
    00189 8388      ST	Y,R24
    0018A E080      LDI	R24,0
    0018B 8389      STD	Y+1,R24
    0018C 838A      STD	Y+2,R24
    0018D 838B      STD	Y+3,R24
    0018E E027      LDI	R18,7
    0018F E007      LDI	R16,7
    00190 940E 063F CALL	_dis_data
(0153) 	  DS18B20Init();
    00192 940E 0326 CALL	_DS18B20Init
    00194 C06C      RJMP	0x0201
(0154) 	  while(1)
(0155) 	  {
(0156) 	   temp=gettemp();//读取到的温度数据
    00195 940E 0370 CALL	_gettemp
    00197 01A8      MOVW	R20,R16
(0157)        Delay_ms(100);
    00198 E604      LDI	R16,0x64
    00199 E010      LDI	R17,0
    0019A 940E 02F9 CALL	_Delay_ms
(0158)    
(0159)        if(temp >= 0xf800)//如果为零下，求补码
    0019C 3040      CPI	R20,0
    0019D EFE8      LDI	R30,0xF8
    0019E 075E      CPC	R21,R30
    0019F F160      BCS	0x01CC
(0160)        {
(0161)         temp = temp - 0XF800;   //去掉5个符号位
    001A0 5040      SUBI	R20,0
    001A1 4F58      SBCI	R21,0xF8
(0162) 	    temp = 0x800 - temp;    //求出补码
    001A2 E080      LDI	R24,0
    001A3 E098      LDI	R25,0x8
    001A4 1B84      SUB	R24,R20
    001A5 0B95      SBC	R25,R21
    001A6 01AC      MOVW	R20,R24
(0163) 	    temp = (temp*6.25)/10;  //计算温度值，应该乘0.0625，现在乘0.625可以显示一位小数位
    001A7 E900      LDI	R16,0x90
    001A8 E010      LDI	R17,0
    001A9 940E 0859 CALL	lpm32
    001AB 0118      MOVW	R2,R16
    001AC 0129      MOVW	R4,R18
    001AD 018A      MOVW	R16,R20
    001AE 940E 08A8 CALL	int2fp
    001B0 933A      ST	-Y,R19
    001B1 932A      ST	-Y,R18
    001B2 931A      ST	-Y,R17
    001B3 930A      ST	-Y,R16
    001B4 0181      MOVW	R16,R2
    001B5 0192      MOVW	R18,R4
    001B6 940E 0A43 CALL	fpmule2
    001B8 0118      MOVW	R2,R16
    001B9 0129      MOVW	R4,R18
    001BA E80C      LDI	R16,0x8C
    001BB E010      LDI	R17,0
    001BC 940E 0859 CALL	lpm32
    001BE 933A      ST	-Y,R19
    001BF 932A      ST	-Y,R18
    001C0 931A      ST	-Y,R17
    001C1 930A      ST	-Y,R16
    001C2 0181      MOVW	R16,R2
    001C3 0192      MOVW	R18,R4
    001C4 940E 08D3 CALL	fpdiv2
    001C6 940E 0874 CALL	fpint
    001C8 01A8      MOVW	R20,R16
(0164) 	    temp = (1000*16)+temp;	//在最高位显示负号
    001C9 5840      SUBI	R20,0x80
    001CA 4C51      SBCI	R21,0xC1
(0165) 	   }
    001CB C022      RJMP	0x01EE
(0166)        else
(0167)        {
(0168)         temp = (temp*6.25)/10;//如果为正，补码为它本身，直接转换为温度值进行显示		
    001CC E900      LDI	R16,0x90
    001CD E010      LDI	R17,0
    001CE 940E 0859 CALL	lpm32
    001D0 0118      MOVW	R2,R16
    001D1 0129      MOVW	R4,R18
    001D2 018A      MOVW	R16,R20
    001D3 940E 08A8 CALL	int2fp
    001D5 933A      ST	-Y,R19
    001D6 932A      ST	-Y,R18
    001D7 931A      ST	-Y,R17
    001D8 930A      ST	-Y,R16
    001D9 0181      MOVW	R16,R2
    001DA 0192      MOVW	R18,R4
    001DB 940E 0A43 CALL	fpmule2
    001DD 0118      MOVW	R2,R16
    001DE 0129      MOVW	R4,R18
    001DF E80C      LDI	R16,0x8C
    001E0 E010      LDI	R17,0
    001E1 940E 0859 CALL	lpm32
    001E3 933A      ST	-Y,R19
    001E4 932A      ST	-Y,R18
    001E5 931A      ST	-Y,R17
    001E6 930A      ST	-Y,R16
    001E7 0181      MOVW	R16,R2
    001E8 0192      MOVW	R18,R4
    001E9 940E 08D3 CALL	fpdiv2
    001EB 940E 0874 CALL	fpint
    001ED 01A8      MOVW	R20,R16
(0169)        }    
(0170) 	   dis_data_RP(0,3,temp,1);//显示温度值	   
    001EE E081      LDI	R24,1
    001EF E090      LDI	R25,0
    001F0 839D      STD	Y+5,R25
    001F1 838C      STD	Y+4,R24
    001F2 011A      MOVW	R2,R20
    001F3 2444      CLR	R4
    001F4 FC37      SBRC	R3,7
    001F5 9440      COM	R4
    001F6 2455      CLR	R5
    001F7 FC47      SBRC	R4,7
    001F8 9450      COM	R5
    001F9 8228      ST	Y,R2
    001FA 8239      STD	Y+1,R3
    001FB 824A      STD	Y+2,R4
    001FC 825B      STD	Y+3,R5
    001FD E023      LDI	R18,3
    001FE 2700      CLR	R16
    001FF 940E 0684 CALL	_dis_data_RP
    00201 CF93      RJMP	0x0195
(0171) 	  }	   
(0172) 	 };
(0173) 	 break;
(0174) 	 
(0175) 	 case 6:
(0176) 	 {
(0177)  		 MH_B_Init();
    00202 940E 0735 CALL	_MH_B_Init
(0178) 		 SET_LED_D11(1);
    00204 E001      LDI	R16,1
    00205 DEE6      RCALL	_SET_LED_D11
(0179) 		 Delay_ms(100);
    00206 E604      LDI	R16,0x64
    00207 E010      LDI	R17,0
    00208 940E 02F9 CALL	_Delay_ms
    0020A C00C      RJMP	0x0217
(0180) 	     while(1)
(0181)   		 {
(0182)       	    if(!Read_MH_B())
    0020B 940E 0737 CALL	_Read_MH_B
    0020D 2300      TST	R16
    0020E F431      BNE	0x0215
(0183) 	  		{
(0184)           	   SET_LED_D11(1);
    0020F E001      LDI	R16,1
    00210 DEDB      RCALL	_SET_LED_D11
(0185) 		   	   Delay_ms(20);
    00211 E104      LDI	R16,0x14
    00212 E010      LDI	R17,0
    00213 940E 02F9 CALL	_Delay_ms
(0186) 	  		}
(0187) 	  		SET_LED_D11(0);
    00215 2700      CLR	R16
    00216 DED5      RCALL	_SET_LED_D11
    00217 CFF3      RJMP	0x020B
(0188)   	     }
(0189) 	 };
(0190) 	 case 7:
(0191) 	 {	  	  
(0192) 	     FC04Init();
    00218 940E 072F CALL	_FC04Init
(0193) 		 SET_LED_D10(1);
    0021A E001      LDI	R16,1
    0021B DEC4      RCALL	_SET_LED_D10
(0194) 		 Delay_ms(100);
    0021C E604      LDI	R16,0x64
    0021D E010      LDI	R17,0
    0021E 940E 02F9 CALL	_Delay_ms
    00220 C00C      RJMP	0x022D
(0195) 	     while(1)
(0196)   		 {
(0197)       	   if(!Read_FC04())
    00221 940E 0731 CALL	_Read_FC04
    00223 2300      TST	R16
    00224 F431      BNE	0x022B
(0198) 	  	   {
(0199)              SET_LED_D10(1);
    00225 E001      LDI	R16,1
    00226 DEB9      RCALL	_SET_LED_D10
(0200) 		  	 Delay_ms(20);
    00227 E104      LDI	R16,0x14
    00228 E010      LDI	R17,0
    00229 940E 02F9 CALL	_Delay_ms
(0201) 	       }
(0202) 	  	   SET_LED_D10(0);
    0022B 2700      CLR	R16
    0022C DEB3      RCALL	_SET_LED_D10
    0022D CFF3      RJMP	0x0221
(0203)   		 }
(0204) 	 };
(0205) 	 break;
(0206) 	 
(0207) 	 case 13://d 温度报警模式，设置阈值温度，超过温度进行报警
(0208)      {
(0209) 	  DS18B20Init();
    0022E 940E 0326 CALL	_DS18B20Init
(0210) 	  temp_yz = get_data(0,2);//温度阈值
    00230 E022      LDI	R18,2
    00231 2700      CLR	R16
    00232 940E 06DA CALL	_get_data
    00234 0158      MOVW	R10,R16
(0211) 	  temp_yz = temp_yz*10;	  
    00235 E00A      LDI	R16,0xA
    00236 E010      LDI	R17,0
    00237 0195      MOVW	R18,R10
    00238 940E 07AA CALL	empy16s
    0023A 0158      MOVW	R10,R16
    0023B C08A      RJMP	0x02C6
(0212) 	  
(0213) 	  while(1)
(0214) 	  {
(0215) 	   temp=gettemp();//读取到的温度数据
    0023C 940E 0370 CALL	_gettemp
    0023E 01A8      MOVW	R20,R16
(0216)        Delay_ms(100);
    0023F E604      LDI	R16,0x64
    00240 E010      LDI	R17,0
    00241 940E 02F9 CALL	_Delay_ms
(0217) 	   
(0218)        if(temp >= 0xf800)//如果为零下，求补码
    00243 3040      CPI	R20,0
    00244 EFE8      LDI	R30,0xF8
    00245 075E      CPC	R21,R30
    00246 F160      BCS	0x0273
(0219)        {
(0220)         temp = temp - 0XF800;   //去掉5个符号位
    00247 5040      SUBI	R20,0
    00248 4F58      SBCI	R21,0xF8
(0221) 	    temp = 0x800 - temp;    //求出补码
    00249 E080      LDI	R24,0
    0024A E098      LDI	R25,0x8
    0024B 1B84      SUB	R24,R20
    0024C 0B95      SBC	R25,R21
    0024D 01AC      MOVW	R20,R24
(0222) 	    temp = (temp*6.25)/10;  //计算温度值，应该乘0.0625，现在乘0.625可以显示一位小数位
    0024E E900      LDI	R16,0x90
    0024F E010      LDI	R17,0
    00250 940E 0859 CALL	lpm32
    00252 0118      MOVW	R2,R16
    00253 0129      MOVW	R4,R18
    00254 018A      MOVW	R16,R20
    00255 940E 08A8 CALL	int2fp
    00257 933A      ST	-Y,R19
    00258 932A      ST	-Y,R18
    00259 931A      ST	-Y,R17
    0025A 930A      ST	-Y,R16
    0025B 0181      MOVW	R16,R2
    0025C 0192      MOVW	R18,R4
    0025D 940E 0A43 CALL	fpmule2
    0025F 0118      MOVW	R2,R16
    00260 0129      MOVW	R4,R18
    00261 E80C      LDI	R16,0x8C
    00262 E010      LDI	R17,0
    00263 940E 0859 CALL	lpm32
    00265 933A      ST	-Y,R19
    00266 932A      ST	-Y,R18
    00267 931A      ST	-Y,R17
    00268 930A      ST	-Y,R16
    00269 0181      MOVW	R16,R2
    0026A 0192      MOVW	R18,R4
    0026B 940E 08D3 CALL	fpdiv2
    0026D 940E 0874 CALL	fpint
    0026F 01A8      MOVW	R20,R16
(0223) 	    temp = (1000*16)+temp;	//在最高位显示负号
    00270 5840      SUBI	R20,0x80
    00271 4C51      SBCI	R21,0xC1
(0224) 	   }
    00272 C022      RJMP	0x0295
(0225)        else
(0226)        {
(0227)         temp = (temp*6.25)/10;//如果为正，补码为它本身，直接转换为温度值进行显示		
    00273 E900      LDI	R16,0x90
    00274 E010      LDI	R17,0
    00275 940E 0859 CALL	lpm32
    00277 0118      MOVW	R2,R16
    00278 0129      MOVW	R4,R18
    00279 018A      MOVW	R16,R20
    0027A 940E 08A8 CALL	int2fp
    0027C 933A      ST	-Y,R19
    0027D 932A      ST	-Y,R18
    0027E 931A      ST	-Y,R17
    0027F 930A      ST	-Y,R16
    00280 0181      MOVW	R16,R2
    00281 0192      MOVW	R18,R4
    00282 940E 0A43 CALL	fpmule2
    00284 0118      MOVW	R2,R16
    00285 0129      MOVW	R4,R18
    00286 E80C      LDI	R16,0x8C
    00287 E010      LDI	R17,0
    00288 940E 0859 CALL	lpm32
    0028A 933A      ST	-Y,R19
    0028B 932A      ST	-Y,R18
    0028C 931A      ST	-Y,R17
    0028D 930A      ST	-Y,R16
    0028E 0181      MOVW	R16,R2
    0028F 0192      MOVW	R18,R4
    00290 940E 08D3 CALL	fpdiv2
    00292 940E 0874 CALL	fpint
    00294 01A8      MOVW	R20,R16
(0228)        }/**/   	   
(0229)   
(0230)        if(temp > temp_yz)
    00295 16A4      CP	R10,R20
    00296 06B5      CPC	R11,R21
    00297 F41C      BGE	0x029B
(0231) 	   {
(0232) 	    PORTC |= (1<<6);PORTC |= (1<<7);	   
    00298 9AAE      SBI	0x15,6
    00299 9AAF      SBI	0x15,7
(0233) 	   }
    0029A C005      RJMP	0x02A0
(0234) 	   else if(temp <= temp_yz)
    0029B 16A4      CP	R10,R20
    0029C 06B5      CPC	R11,R21
    0029D F014      BLT	0x02A0
(0235) 	   {
(0236) 	    PORTC &= ~(1<<7);PORTC &= ~(1<<6);
    0029E 98AF      CBI	0x15,7
    0029F 98AE      CBI	0x15,6
(0237) 	   }	   
(0238) 	    
(0239) 	   dis_data_RP(0,3,temp,1);//显示温度值	  
    002A0 E081      LDI	R24,1
    002A1 E090      LDI	R25,0
    002A2 839D      STD	Y+5,R25
    002A3 838C      STD	Y+4,R24
    002A4 011A      MOVW	R2,R20
    002A5 2444      CLR	R4
    002A6 FC37      SBRC	R3,7
    002A7 9440      COM	R4
    002A8 2455      CLR	R5
    002A9 FC47      SBRC	R4,7
    002AA 9450      COM	R5
    002AB 8228      ST	Y,R2
    002AC 8239      STD	Y+1,R3
    002AD 824A      STD	Y+2,R4
    002AE 825B      STD	Y+3,R5
    002AF E023      LDI	R18,3
    002B0 2700      CLR	R16
    002B1 940E 0684 CALL	_dis_data_RP
(0240) 	   dis_data_RP(4,7,temp_yz,5);	   
    002B3 E085      LDI	R24,5
    002B4 E090      LDI	R25,0
    002B5 839D      STD	Y+5,R25
    002B6 838C      STD	Y+4,R24
    002B7 0115      MOVW	R2,R10
    002B8 2444      CLR	R4
    002B9 FC37      SBRC	R3,7
    002BA 9440      COM	R4
    002BB 2455      CLR	R5
    002BC FC47      SBRC	R4,7
    002BD 9450      COM	R5
    002BE 8228      ST	Y,R2
    002BF 8239      STD	Y+1,R3
    002C0 824A      STD	Y+2,R4
    002C1 825B      STD	Y+3,R5
    002C2 E027      LDI	R18,7
    002C3 E004      LDI	R16,4
    002C4 940E 0684 CALL	_dis_data_RP
    002C6 CF75      RJMP	0x023C
    002C7 9626      ADIW	R28,6
    002C8 9508      RET
_Delay_us:
  i                    --> R20
  n                    --> Y,+2
    002C9 940E 073B CALL	push_arg4
    002CB 934A      ST	-Y,R20
    002CC 935A      ST	-Y,R21
FILE: C:\Users\HaiPiao\Desktop\附小实验\程序\声音+红外\Delay.c
(0001) /*******************************************************************************
(0002) **  Copyright (c)   2011       USTB MEI
(0003) **                  All Rights Reserved
(0004) **  
(0005) **  
(0006) **-----------------------------------------------------------------------------
(0007) **  MCU        : ATmega16 (Atmel)
(0008) **  Compiler   : ICCAVR 7.22
(0009) **  Module Name: Delay.c
(0010) **  Module Date: 2011-03-28
(0011) **  Module Auth: 吴勤兵
(0012) **  Description: Delay functions for ATmega16 at 7.3728MHz
(0013) **  Version    : V1.0
(0014) **  Notes      : These delay functions are suited for ATmega8 at 7.3728MHz.
(0015) **------------------------------------------------------------------------------
(0016) **  Version    : 
(0017) **  Modified By: 
(0018) **  Date       : 
(0019) **  Content    : 
(0020) **  Notes      : 
(0021) *******************************************************************************/
(0022) 
(0023) /*----------------------------  I N C L U D E S  -----------------------------*/
(0024) #include "Delay.h"
(0025) 
(0026) /*--------------------------  D E F I N I T I O N  ---------------------------*/
(0027) 
(0028) /*---------------------------  F U N C T I O N S  ----------------------------*/
(0029) /*******************************************************************************
(0030) Function Name: Delay_us
(0031) Author       : 吴勤兵
(0032) Date         : 2011-03-14
(0033) Description  : Delay n us
(0034) Inputs       : UINT16 n -- n us
(0035) Outputs      : None
(0036) Notes        : 
(0037) Revision     : 
(0038) *******************************************************************************/
(0039) void Delay_us(INT32U n)
(0040) {          
(0041)     unsigned int i = 0;	
(0042)     for(i = 0; i < n; i++)
    002CD 2744      CLR	R20
    002CE 2755      CLR	R21
    002CF C003      RJMP	0x02D3
(0043)     {
(0044)         NOP();
    002D0 0000      NOP
    002D1 5F4F      SUBI	R20,0xFF
    002D2 4F5F      SBCI	R21,0xFF
    002D3 802A      LDD	R2,Y+2
    002D4 803B      LDD	R3,Y+3
    002D5 804C      LDD	R4,Y+4
    002D6 805D      LDD	R5,Y+5
    002D7 013A      MOVW	R6,R20
    002D8 2488      CLR	R8
    002D9 2499      CLR	R9
    002DA 1462      CP	R6,R2
    002DB 0473      CPC	R7,R3
    002DC 0484      CPC	R8,R4
    002DD 0495      CPC	R9,R5
    002DE F388      BCS	0x02D0
    002DF 9159      LD	R21,Y+
    002E0 9149      LD	R20,Y+
    002E1 9624      ADIW	R28,4
    002E2 9508      RET
_Delay_us1:
  j                    --> R10
  i                    --> R20
  n                    --> R16
    002E3 940E 0809 CALL	push_xgset300C
(0045)     }
(0046) }
(0047) 
(0048) 
(0049) void Delay_us1(int n)
(0050) {          
(0051)     int i = 0;
(0052)     int j = 0;
    002E5 24AA      CLR	R10
    002E6 24BB      CLR	R11
(0053) 	
(0054)     for(i = 0; i < n; i++)
    002E7 2744      CLR	R20
    002E8 2755      CLR	R21
    002E9 C00A      RJMP	0x02F4
(0055)     {
(0056)          NOP();
    002EA 0000      NOP
(0057) 		 NOP();
    002EB 0000      NOP
(0058) 		 NOP();
    002EC 0000      NOP
(0059) 		 NOP();
    002ED 0000      NOP
(0060) 		 NOP();
    002EE 0000      NOP
(0061) 		 NOP();
    002EF 0000      NOP
(0062) 		 NOP();
    002F0 0000      NOP
(0063) 		 NOP();		
    002F1 0000      NOP
    002F2 5F4F      SUBI	R20,0xFF
    002F3 4F5F      SBCI	R21,0xFF
    002F4 1740      CP	R20,R16
    002F5 0751      CPC	R21,R17
    002F6 F39C      BLT	0x02EA
    002F7 940C 080E JMP	pop_xgset300C
_Delay_ms:
  i                    --> R20
  j                    --> R22
  n                    --> R16
    002F9 940E 0813 CALL	push_xgsetF000
(0064)     }
(0065) }
(0066) 
(0067) /*******************************************************************************
(0068) Function Name: Delay_ms
(0069) Author       : 吴勤兵
(0070) Date         : 2011-03-14
(0071) Description  : Delay n ms
(0072) Inputs       : UINT16 n -- n ms
(0073) Outputs      : None
(0074) Notes        : 
(0075) Revision     : 
(0076) *******************************************************************************/
(0077) void Delay_ms(unsigned int n)
(0078) {          
(0079)     unsigned int i = 0;
(0080)     unsigned int j = 0;
    002FB 2766      CLR	R22
    002FC 2777      CLR	R23
(0081) 	
(0082)     for(i = 0; i < n; i++)
    002FD 2744      CLR	R20
    002FE 2755      CLR	R21
    002FF C00B      RJMP	0x030B
(0083)     {
(0084)         for(j = 0; j < 2100; j++)
    00300 2766      CLR	R22
    00301 2777      CLR	R23
    00302 C002      RJMP	0x0305
    00303 5F6F      SUBI	R22,0xFF
    00304 4F7F      SBCI	R23,0xFF
    00305 3364      CPI	R22,0x34
    00306 E0E8      LDI	R30,0x8
    00307 077E      CPC	R23,R30
    00308 F3D0      BCS	0x0303
    00309 5F4F      SUBI	R20,0xFF
    0030A 4F5F      SBCI	R21,0xFF
    0030B 1740      CP	R20,R16
    0030C 0751      CPC	R21,R17
    0030D F390      BCS	0x0300
    0030E 940C 0818 JMP	pop_xgsetF000
_Delay_ms1:
  i                    --> R20
  j                    --> R22
  n                    --> R16
    00310 940E 0813 CALL	push_xgsetF000
(0085)         {
(0086)             // Delay n ms
(0087)         }
(0088)     }
(0089) }
(0090) 
(0091) void Delay_ms1(int n)
(0092) {          
(0093)     int i = 0;
(0094)     int j = 0;
    00312 2766      CLR	R22
    00313 2777      CLR	R23
(0095) 	
(0096)     for(i = 0; i < n; i++)
    00314 2744      CLR	R20
    00315 2755      CLR	R21
    00316 C00A      RJMP	0x0321
(0097)     {
(0098)         for(j = 0; j < 2000; j++)
    00317 2766      CLR	R22
    00318 2777      CLR	R23
    00319 5F6F      SUBI	R22,0xFF
    0031A 4F7F      SBCI	R23,0xFF
    0031B 3D60      CPI	R22,0xD0
    0031C E0E7      LDI	R30,7
    0031D 077E      CPC	R23,R30
    0031E F3D4      BLT	0x0319
    0031F 5F4F      SUBI	R20,0xFF
    00320 4F5F      SBCI	R21,0xFF
    00321 1740      CP	R20,R16
    00322 0751      CPC	R21,R17
    00323 F39C      BLT	0x0317
    00324 940C 0818 JMP	pop_xgsetF000
FILE: C:\Users\HaiPiao\Desktop\附小实验\程序\声音+红外\DS18B20.c
(0001) /**------------------------------------------------------------------------------
(0002) **  MCU        : ATmega16(Atmel)
(0003) **  Compiler   : ICCAVR 7.22
(0004) **  Module Name: 
(0005) **  Module Date: 
(0006) **  Module Auth: 
(0007) **  Description: 
(0008) **  Version    : V1.0
(0009) **  Notes      : 
(0010) **------------------------------------------------------------------------------
(0011) **  Version    : 
(0012) **  Modified By: 
(0013) **  Date       : 
(0014) **  Content    : 
(0015) **  Notes      : 
(0016) *******************************************************************************/
(0017) 
(0018) /*----------------------------  I N C L U D E S  -----------------------------*/
(0019) #include "DS18B20.h"
(0020) 
(0021) /*--------------------------  D E F I N I T I O N  ---------------------------*/
(0022) 
(0023) /*---------------------------  F U N C T I O N S  ----------------------------*/
(0024) /*******************************************************************************
(0025) Function Name: void DS18B20Init(void)
(0026) Author       : 
(0027) Date         : 
(0028) Description  : 
(0029) Inputs       : None
(0030) Outputs      : None
(0031) Notes        : 
(0032) Revision     : 
(0033) *******************************************************************************/
(0034) void DS18B20Init(void)  
(0035) {  
(0036) 
(0037)    DDRD|=BIT(DQ); //DQ 为输出状态
_DS18B20Init:
    00326 9A8D      SBI	0x11,5
(0038)    PORTD&=~BIT(DQ); //输出低电平
    00327 9895      CBI	0x12,5
(0039)    Delay_us1(500); //延迟500 微妙
    00328 EF04      LDI	R16,0xF4
    00329 E011      LDI	R17,1
    0032A 940E 02E3 CALL	_Delay_us1
(0040)    PORTD|=BIT(DQ); //示范总线
    0032C 9A95      SBI	0x12,5
(0041)    Delay_us1(60); //延迟60 微妙
    0032D E30C      LDI	R16,0x3C
    0032E E010      LDI	R17,0
    0032F 940E 02E3 CALL	_Delay_us1
(0042)    DDRD&=~BIT(DQ); //DQ 位输入状态
    00331 988D      CBI	0x11,5
(0043)    while(PIND&BIT(DQ)); //等待从机DS18B20 应答（低电平有效）
    00332 9985      SBIC	0x10,5
    00333 CFFE      RJMP	0x0332
(0044)    while(!(PIND&BIT(DQ)));
    00334 9B85      SBIS	0x10,5
    00335 CFFE      RJMP	0x0334
    00336 9508      RET
_write_1820:
  i                    --> R20
  Data                 --> R10
    00337 92AA      ST	-Y,R10
    00338 934A      ST	-Y,R20
    00339 2EA0      MOV	R10,R16
(0045) 
(0046) }  
(0047) /*******************************************************************************
(0048) Function Name: void write_1820(unsigned char Data)  
(0049) Author       : 
(0050) Date         : 
(0051) Description  : 
(0052) Inputs       : None
(0053) Outputs      : None
(0054) Notes        : 
(0055) Revision     : 
(0056) *******************************************************************************/
(0057) void write_1820(unsigned char Data)  
(0058) {   
(0059) 
(0060)     unsigned char i;
(0061)     DDRD|=BIT(DQ); //DQ 为输出
    0033A 9A8D      SBI	0x11,5
(0062)    for(i=0;i<8;i++)
    0033B 2744      CLR	R20
    0033C C017      RJMP	0x0354
(0063)    {
(0064)     PORTD&=~BIT(DQ); //拉低总线
    0033D 9895      CBI	0x12,5
(0065)     Delay_us1(10); //延迟10 微妙（最大15 微妙）
    0033E E00A      LDI	R16,0xA
    0033F E010      LDI	R17,0
    00340 940E 02E3 CALL	_Delay_us1
(0066)     if(Data&0x01) 
    00342 FEA0      SBRS	R10,0
    00343 C002      RJMP	0x0346
(0067) 	  PORTD|=BIT(DQ);
    00344 9A95      SBI	0x12,5
    00345 C001      RJMP	0x0347
(0068)     else PORTD&=~BIT(DQ);
    00346 9895      CBI	0x12,5
(0069)       Delay_us(40); //延迟40 微妙（最大45 微妙） 
    00347 E208      LDI	R16,0x28
    00348 E010      LDI	R17,0
    00349 E020      LDI	R18,0
    0034A E030      LDI	R19,0
    0034B 940E 02C9 CALL	_Delay_us
(0070) 	PORTD|=BIT(DQ); //释放总线
    0034D 9A95      SBI	0x12,5
(0071)    Delay_us1(1); //稍微延迟
    0034E E001      LDI	R16,1
    0034F E010      LDI	R17,0
    00350 940E 02E3 CALL	_Delay_us1
(0072)     Data>>=1;}
    00352 94A6      LSR	R10
    00353 9543      INC	R20
    00354 3048      CPI	R20,0x8
    00355 F338      BCS	0x033D
    00356 9149      LD	R20,Y+
    00357 90A9      LD	R10,Y+
    00358 9508      RET
_read_1820:
  Temp                 --> R20
  i                    --> R22
    00359 934A      ST	-Y,R20
    0035A 936A      ST	-Y,R22
(0073) 
(0074) }  
(0075) /*******************************************************************************
(0076) Function Name: 
(0077) Author       : 
(0078) Date         : 
(0079) Description  : 
(0080) Inputs       : None
(0081) Outputs      : None
(0082) Notes        : 
(0083) Revision     : 
(0084) *******************************************************************************/
(0085) unsigned char read_1820(void)  
(0086) {   
(0087)    unsigned char i,Temp;
(0088)    for(i=0;i<8;i++)
    0035B 2766      CLR	R22
    0035C C00D      RJMP	0x036A
(0089)  {
(0090)    Temp>>=1; //数据右移
    0035D 9546      LSR	R20
(0091)    DDRD|=BIT(DQ); //DQ 为输出状态
    0035E 9A8D      SBI	0x11,5
(0092)    PORTD&=~BIT(DQ); //拉低总线，启动输入
    0035F 9895      CBI	0x12,5
(0093)   PORTD|=BIT(DQ); //释放总线
    00360 9A95      SBI	0x12,5
(0094)    DDRD&=~BIT(DQ); //DQ 为输入状态
    00361 988D      CBI	0x11,5
(0095)   if(PIND&BIT(DQ)) 
    00362 9B85      SBIS	0x10,5
    00363 C001      RJMP	0x0365
(0096)   Temp|=0x80;
    00364 6840      ORI	R20,0x80
(0097)   Delay_us1(45); //延迟45 微妙（最大45 微妙）
    00365 E20D      LDI	R16,0x2D
    00366 E010      LDI	R17,0
    00367 940E 02E3 CALL	_Delay_us1
    00369 9563      INC	R22
    0036A 3068      CPI	R22,0x8
    0036B F388      BCS	0x035D
(0098)    }
(0099) 
(0100) 
(0101) return Temp; } 
    0036C 2F04      MOV	R16,R20
    0036D 9169      LD	R22,Y+
    0036E 9149      LD	R20,Y+
    0036F 9508      RET
_gettemp:
  Temperature          --> R10
  TEM                  --> R10
  teml                 --> R10
  temh                 --> R12
    00370 940E 0804 CALL	push_xgset003C
(0102) 
(0103) 
(0104) 
(0105) 
(0106) /*******************************************************************************
(0107) Function Name: 
(0108) Author       : 
(0109) Date         : 
(0110) Description  : 
(0111) Inputs       : None
(0112) Outputs      : None
(0113) Notes        : 
(0114) Revision     : 
(0115) *******************************************************************************/
(0116) INT32U gettemp(void)  //读取温度值 
(0117) {  //约5 ms
(0118)      unsigned int temh,teml;  
(0119) 	 INT16U TEM;
(0120)      unsigned int  Temperature=0; //返回Tc,实际的温度T=Tc*0.1,这里用整数运算
(0121) 	
(0122)      DS18B20Init();        //复位18b20  
    00372 DFB3      RCALL	_DS18B20Init
(0123)      write_1820(0xcc);   // 发出转换命令  
    00373 EC0C      LDI	R16,0xCC
    00374 DFC2      RCALL	_write_1820
(0124)      write_1820(0x44); 
    00375 E404      LDI	R16,0x44
    00376 DFC0      RCALL	_write_1820
(0125)      
(0126)      DS18B20Init();  
    00377 DFAE      RCALL	_DS18B20Init
(0127)      write_1820(0xcc);  //发出读命令  
    00378 EC0C      LDI	R16,0xCC
    00379 DFBD      RCALL	_write_1820
(0128)      write_1820(0xbe);  
    0037A EB0E      LDI	R16,0xBE
    0037B DFBB      RCALL	_write_1820
(0129)      teml=read_1820();   
    0037C DFDC      RCALL	_read_1820
    0037D 2EA0      MOV	R10,R16
    0037E 24BB      CLR	R11
(0130)      temh=read_1820();  //读数据
    0037F DFD9      RCALL	_read_1820
    00380 2EC0      MOV	R12,R16
    00381 24DD      CLR	R13
(0131) 	 
(0132) 	 TEM = ((temh<<8)|teml);
    00382 0116      MOVW	R2,R12
    00383 2C32      MOV	R3,R2
    00384 2422      CLR	R2
    00385 282A      OR	R2,R10
    00386 283B      OR	R3,R11
    00387 0151      MOVW	R10,R2
(0133) 	/* if((1<<15)&(TEM))//等于1，表示为负
(0134) 	 {
(0135) 	  TEM = ((1<<12)-(TEM&~(0X1F<<15)));//负数求补码
(0136) 	 } 
(0137) 	 else
(0138) 	 {
(0139) 	  TEM = ((temh<<8)|teml);
(0140) 	 }*/	 	 
(0141) 	 DS18B20Init(); 
    00388 DF9D      RCALL	_DS18B20Init
(0142) 	 return TEM;//*6.25;//(((temh<<8)|teml)*6.25);
    00389 0185      MOVW	R16,R10
    0038A 0196      MOVW	R18,R12
    0038B 2722      CLR	R18
    0038C 2733      CLR	R19
    0038D 940C 07EE JMP	pop_xgset003C
_init_7279:
  tmr                  --> R20
    0038F 934A      ST	-Y,R20
    00390 935A      ST	-Y,R21
FILE: C:\Users\HaiPiao\Desktop\附小实验\程序\声音+红外\HD7279.C
(0001) /********************************************************
(0002) 
(0003) 电子技术实习基地
(0004) 
(0005) ************************************************************/
(0006) /************************ MEI *******************************
(0007) 	Module Name: HD7279.c
(0008) 	Module Date: 11/14/2013
(0009) 	Module Auth: 吕振
(0010) 	
(0011) 	Description: 7279键盘的使用
(0012) ************************* MEI *****************************/
(0013) /*------------------------Includes------------------------*/
(0014) #include "HD7279.h"
(0015) 
(0016) /***************外部调用函数*******************************/
(0017) 
(0018) /**********************************************************
(0019) 函数名：HD7279初始化函数	
(0020) 功  能：初始化HD7279（管脚配置、HD7279复位）
(0021) 输  入：无
(0022) 返  回：无
(0023) 备  注：使用先，选配置管脚的宏定义
(0024) *********************************************************/		
(0025) void init_7279(void)	
(0026) {
(0027) 	unsigned int tmr;
(0028) 	
(0029) 	DR7279 |= cs7279;		         //cs7279定义为输出
    00391 9AD5      SBI	0x1A,5
(0030) 	DR7279 |= clk7279;		         //clk7279定义为输出
    00392 9AD4      SBI	0x1A,4
(0031) 	DR7279 |= dat7279;		         //dat7279定义为输出
    00393 9AD3      SBI	0x1A,3
(0032) 	DR7279 &= ~(key7279);		     //key7279定义为输入
    00394 98D2      CBI	0x1A,2
(0033) 	
(0034) 	WR7279 |= cs7279;		         //cs7279初始化为1
    00395 9ADD      SBI	0x1B,5
(0035)  	WR7279 |= clk7279;		         //clk7279初始化为1
    00396 9ADC      SBI	0x1B,4
(0036)  	WR7279 |= dat7279;		         //dat7279初始化为1
    00397 9ADB      SBI	0x1B,3
(0037)  	WR7279 |= key7279;		         //key7279初始化为有弱上拉 
    00398 9ADA      SBI	0x1B,2
(0038)  	
(0039)  	for(tmr=0;tmr<0xf000;tmr++);	 //上电延时
    00399 2744      CLR	R20
    0039A 2755      CLR	R21
    0039B C002      RJMP	0x039E
    0039C 5F4F      SUBI	R20,0xFF
    0039D 4F5F      SBCI	R21,0xFF
    0039E 3040      CPI	R20,0
    0039F EFE0      LDI	R30,0xF0
    003A0 075E      CPC	R21,R30
    003A1 F3D0      BCS	0x039C
(0040)  		
(0041) 	send_byte(CMD_RESET);		     //复位HD7279
    003A2 EA04      LDI	R16,0xA4
    003A3 D044      RCALL	_send_byte
    003A4 9159      LD	R21,Y+
    003A5 9149      LD	R20,Y+
    003A6 9508      RET
_write7279:
  dta                  --> R10
  cmd                  --> R12
    003A7 92AA      ST	-Y,R10
    003A8 92CA      ST	-Y,R12
    003A9 2EA2      MOV	R10,R18
    003AA 2EC0      MOV	R12,R16
(0042)  		 	 		
(0043) }  	 
(0044) 
(0045) /****************** **********************
(0046) 函数名：HD7279写入函数	
(0047) 功  能：对HD7279写数据
(0048) 输  入：cmd为指令数据;	dta为数据数据
(0049) 返  回：无
(0050) 备  注：HD7279的控制函数
(0051) ******************************************/
(0052) void write7279(unsigned char cmd,unsigned char dta)	//写入到HD7279
(0053) {	
(0054) 	send_byte(cmd);		//写指令
    003AB 2D0C      MOV	R16,R12
    003AC D03B      RCALL	_send_byte
(0055) 	send_byte(dta);		//定数据
    003AD 2D0A      MOV	R16,R10
    003AE D039      RCALL	_send_byte
    003AF 90C9      LD	R12,Y+
    003B0 90A9      LD	R10,Y+
    003B1 9508      RET
(0056) }
(0057) 
(0058) /****************** **********************
(0059) 函数名：HD7279读取函数	
(0060) 功  能：对HD7279读取原始键值
(0061) 输  入：无
(0062) 返  回：键盘原始键值
(0063) 备  注：HD7279的控制函数
(0064) ******************************************/
(0065) unsigned char read7279(void)
(0066) {
(0067) 	send_byte(0x15);	        //发送读取指令
_read7279:
    003B2 E105      LDI	R16,0x15
    003B3 D034      RCALL	_send_byte
(0068) 	return(receive_byte());	    //返回键值
    003B4 C04C      RJMP	_receive_byte
_get_key7279:
  KeyNum               --> R10
    003B5 92AA      ST	-Y,R10
(0069) 	
(0070) }
(0071) 
(0072) /****************** **********************
(0073) 函数名：HD7279按键等待接收函数	
(0074) 功  能：当完成一次按键，返回键值
(0075) 输  入：无
(0076) 返  回：键盘键值
(0077) 备  注：HD7279的控制函数
(0078) ******************************************/
(0079) unsigned char get_key7279(void)
(0080) {
(0081) 	unsigned char KeyNum;
(0082) 	while( (RD7279&key7279) );		//等待有键按下,无时为高电平
    003B6 99CA      SBIC	0x19,2
    003B7 CFFE      RJMP	0x03B6
(0083) 	
(0084) 	delay10ms(1);				    //时延100ms
    003B8 E001      LDI	R16,1
    003B9 E010      LDI	R17,0
    003BA D017      RCALL	_delay10ms
(0085) 	
(0086) 	KeyNum=read7279();			    //读出键码	
    003BB DFF6      RCALL	_read7279
(0087) 	
(0088) 	KeyNum=num_change7279(KeyNum);  //键码转为十进制
    003BC D05B      RCALL	_num_change7279
    003BD 2EA0      MOV	R10,R16
(0089) 	
(0090) 	delay10ms(1);				    //时延100ms
    003BE E001      LDI	R16,1
    003BF E010      LDI	R17,0
    003C0 D011      RCALL	_delay10ms
(0091) 	
(0092) 	while( !(RD7279&key7279) );		//等待按键松开
    003C1 9BCA      SBIS	0x19,2
    003C2 CFFE      RJMP	0x03C1
(0093) 	
(0094) 	return KeyNum;				    //返回键值
    003C3 2D0A      MOV	R16,R10
    003C4 90A9      LD	R10,Y+
    003C5 9508      RET
(0095) }
(0096) 
(0097) /******************************内部函数************************************/
(0098) void long_delay(void)               //长时延函数
(0099) {
(0100) 	unsigned char i;
(0101) 	for(i=0;i<80;i++);
_long_delay:
  i                    --> R16
    003C6 2700      CLR	R16
    003C7 C001      RJMP	0x03C9
    003C8 9503      INC	R16
    003C9 3500      CPI	R16,0x50
    003CA F3E8      BCS	0x03C8
    003CB 9508      RET
(0102) }	
(0103) 
(0104) void short_delay(void)            //短时延函数					
(0105) 
(0106) {
(0107) 	unsigned char i;
(0108) 	for(i=0;i<46;i++);
_short_delay:
  i                    --> R16
    003CC 2700      CLR	R16
    003CD C001      RJMP	0x03CF
    003CE 9503      INC	R16
    003CF 320E      CPI	R16,0x2E
    003D0 F3E8      BCS	0x03CE
    003D1 9508      RET
_delay10ms:
  i                    --> R10
  j                    --> R20
  k                    --> R22
  count                --> R16
    003D2 940E 081D CALL	push_xgsetF00C
(0109) }
(0110) 				
(0111) void delay10ms(unsigned int count)//10ms时延函数
(0112) {
(0113) 	unsigned char i,j,k;
(0114)  	for (i=0;i<count;i++)
    003D4 24AA      CLR	R10
    003D5 C00B      RJMP	0x03E1
(0115)       		for(j=0;j<100;j++)
    003D6 2744      CLR	R20
    003D7 C006      RJMP	0x03DE
(0116)       			for(k=0;k<100;k++);
    003D8 2766      CLR	R22
    003D9 C001      RJMP	0x03DB
    003DA 9563      INC	R22
    003DB 3664      CPI	R22,0x64
    003DC F3E8      BCS	0x03DA
    003DD 9543      INC	R20
    003DE 3644      CPI	R20,0x64
    003DF F3C0      BCS	0x03D8
    003E0 94A3      INC	R10
    003E1 2C2A      MOV	R2,R10
    003E2 2433      CLR	R3
    003E3 1620      CP	R2,R16
    003E4 0631      CPC	R3,R17
    003E5 F380      BCS	0x03D6
    003E6 940C 0824 JMP	pop_xgsetF00C
_send_byte:
  i                    --> R20
  out_byte             --> R10
    003E8 92AA      ST	-Y,R10
    003E9 934A      ST	-Y,R20
    003EA 2EA0      MOV	R10,R16
(0117) }	
(0118) 	
(0119) /****************** **********************
(0120) 函数名：HD7279字节发送函数	
(0121) 功  能：HD7279发送一个字节
(0122) 输  入：一个字节
(0123) 返  回：无
(0124) 备  注：HD7279硬件函数
(0125) ******************************************/
(0126) void send_byte(unsigned char out_byte)
(0127) {	
(0128) 	unsigned char i;
(0129) 	
(0130) 	WR7279&=~clk7279;		    //clk7279=0;
    003EB 98DC      CBI	0x1B,4
(0131) 	WR7279&=~cs7279;		    //cs7279=0
    003EC 98DD      CBI	0x1B,5
(0132) 	long_delay();
    003ED DFD8      RCALL	_long_delay
(0133) 	
(0134) 	for(i=0;i<8;i++)
    003EE 2744      CLR	R20
    003EF C00B      RJMP	0x03FB
(0135) 	{
(0136) 		if(out_byte&0x80)
    003F0 FEA7      SBRS	R10,7
    003F1 C002      RJMP	0x03F4
(0137) 		{
(0138) 			WR7279|=dat7279;	//dat7279=1;
    003F2 9ADB      SBI	0x1B,3
(0139) 		 }
    003F3 C001      RJMP	0x03F5
(0140) 		 else
(0141) 		 {
(0142) 		 	WR7279&=~dat7279;	//dat7279=0;
    003F4 98DB      CBI	0x1B,3
(0143) 		 }
(0144) 		 WR7279|=clk7279;		//clk7279=1;
    003F5 9ADC      SBI	0x1B,4
(0145) 		 short_delay();
    003F6 DFD5      RCALL	_short_delay
(0146) 		 WR7279&=~clk7279;		//clk7279=0;
    003F7 98DC      CBI	0x1B,4
(0147) 		 short_delay();
    003F8 DFD3      RCALL	_short_delay
(0148) 		 out_byte=out_byte<<1;
    003F9 0CAA      LSL	R10
    003FA 9543      INC	R20
    003FB 3048      CPI	R20,0x8
    003FC F398      BCS	0x03F0
(0149) 	 }
(0150) 	 WR7279|=dat7279;			//dat7279=1; 	 
    003FD 9ADB      SBI	0x1B,3
    003FE 9149      LD	R20,Y+
    003FF 90A9      LD	R10,Y+
    00400 9508      RET
_receive_byte:
  i                    --> R22
  in_byte              --> R20
    00401 934A      ST	-Y,R20
    00402 936A      ST	-Y,R22
(0151) }
(0152) 	
(0153) /****************** **********************
(0154) 函数名：HD7279字节接收函数	
(0155) 功  能：从HD7279接收一个字节
(0156) 输  入：无
(0157) 返  回：一个字节
(0158) 备  注：HD7279硬件函数
(0159) ******************************************/
(0160) unsigned char receive_byte(void)
(0161) {
(0162) 	unsigned char i,in_byte;
(0163) 	
(0164) 	WR7279|=clk7279;		    //clk7279=1;
    00403 9ADC      SBI	0x1B,4
(0165) 	
(0166) 	DR7279&=~dat7279;			//改dat7279为输入
    00404 98D3      CBI	0x1A,3
(0167) 	
(0168) 	long_delay();
    00405 DFC0      RCALL	_long_delay
(0169) 	
(0170) 	for(i=0;i<8;i++)
    00406 2766      CLR	R22
    00407 C009      RJMP	0x0411
(0171) 	{	
(0172) 		WR7279|=clk7279;		//clk7279=1;
    00408 9ADC      SBI	0x1B,4
(0173) 		short_delay();
    00409 DFC2      RCALL	_short_delay
(0174) 		in_byte=in_byte<<1;
    0040A 0F44      LSL	R20
(0175) 		if(RD7279&dat7279)
    0040B 9BCB      SBIS	0x19,3
    0040C C001      RJMP	0x040E
(0176) 		{
(0177) 			in_byte=in_byte|0x01;
    0040D 6041      ORI	R20,1
(0178) 		}
(0179) 		WR7279&=~clk7279;		//clk7279=0;
    0040E 98DC      CBI	0x1B,4
(0180) 		short_delay();
    0040F DFBC      RCALL	_short_delay
    00410 9563      INC	R22
    00411 3068      CPI	R22,0x8
    00412 F3A8      BCS	0x0408
(0181) 	
(0182) 	}
(0183) 	DR7279|=dat7279;			//dat7279还原为输出口
    00413 9AD3      SBI	0x1A,3
(0184) 	return(in_byte);
    00414 2F04      MOV	R16,R20
    00415 9169      LD	R22,Y+
    00416 9149      LD	R20,Y+
    00417 9508      RET
_num_change7279:
  X                    --> R16
    00418 934A      ST	-Y,R20
    00419 935A      ST	-Y,R21
(0185) }
(0186) 
(0187) /****************** **********************
(0188) 函数名：HD7279按键等待接收函数	
(0189) 功  能：当完成一次按键，返回键值
(0190) 输  入：无
(0191) 返  回：键盘键值
(0192) 备  注：HD7279的控制函数
(0193) ******************************************/
(0194) unsigned char  num_change7279 (unsigned char X)
(0195)  {
(0196)    	switch (X)
    0041A 2F40      MOV	R20,R16
    0041B 2755      CLR	R21
    0041C 3040      CPI	R20,0
    0041D E0E0      LDI	R30,0
    0041E 075E      CPC	R21,R30
    0041F F40C      BGE	0x0421
    00420 C031      RJMP	0x0452
    00421 E18B      LDI	R24,0x1B
    00422 E090      LDI	R25,0
    00423 1784      CP	R24,R20
    00424 0795      CPC	R25,R21
    00425 F40C      BGE	0x0427
    00426 C02B      RJMP	0x0452
    00427 E584      LDI	R24,0x54
    00428 E090      LDI	R25,0
    00429 01FA      MOVW	R30,R20
    0042A 0FEE      LSL	R30
    0042B 1FFF      ROL	R31
    0042C 0FE8      ADD	R30,R24
    0042D 1FF9      ADC	R31,R25
    0042E 9025      LPM	R2,Z+
    0042F 9034      LPM	R3,Z
    00430 01F1      MOVW	R30,R2
    00431 9409      IJMP
(0197) 	{
(0198) 		case  ONE 	: return 0X01;
    00432 E001      LDI	R16,1
    00433 C01F      RJMP	0x0453
(0199) 		case  TWO 	: return 0X02;
    00434 E002      LDI	R16,2
    00435 C01D      RJMP	0x0453
(0200) 		case  THREE 	: return 0X03;
    00436 E003      LDI	R16,3
    00437 C01B      RJMP	0x0453
(0201) 		case  FOUR 	: return 0X04;
    00438 E004      LDI	R16,4
    00439 C019      RJMP	0x0453
(0202) 		case  FIVE 	: return 0X05;
    0043A E005      LDI	R16,5
    0043B C017      RJMP	0x0453
(0203) 		case  SIX  	: return 0X06;
    0043C E006      LDI	R16,6
    0043D C015      RJMP	0x0453
(0204) 		case  SEVEN 	: return 0X07;
    0043E E007      LDI	R16,7
    0043F C013      RJMP	0x0453
(0205) 		case  EIGHT 	: return 0X08;
    00440 E008      LDI	R16,0x8
    00441 C011      RJMP	0x0453
(0206) 		case  NINE 	: return 0X09;
    00442 E009      LDI	R16,0x9
    00443 C00F      RJMP	0x0453
(0207) 		case  ZERO 	: return 0X00;
    00444 2700      CLR	R16
    00445 C00D      RJMP	0x0453
(0208) 		case  AAAA  	: return 0x0A;
    00446 E00A      LDI	R16,0xA
    00447 C00B      RJMP	0x0453
(0209) 		case  BBBB 	: return 0x0B;
    00448 E00B      LDI	R16,0xB
    00449 C009      RJMP	0x0453
(0210) 		case  CCCC 	: return 0x0C;
    0044A E00C      LDI	R16,0xC
    0044B C007      RJMP	0x0453
(0211) 		case  DDDD 	: return 0x0D;
    0044C E00D      LDI	R16,0xD
    0044D C005      RJMP	0x0453
(0212) 		case  EEEE 	: return 0x0E;
    0044E E00E      LDI	R16,0xE
    0044F C003      RJMP	0x0453
(0213) 		case  FFFF 	: return 0x0F;
    00450 E00F      LDI	R16,0xF
    00451 C001      RJMP	0x0453
(0214) 		default 	: return 0xFF;
    00452 EF0F      LDI	R16,0xFF
    00453 9159      LD	R21,Y+
    00454 9149      LD	R20,Y+
    00455 9508      RET
_test_7279:
  key7279_number       --> R20
  wait_cnter           --> Y,+12
  tmr                  --> Y,+8
  k                    --> Y,+4
  j                    --> Y,+0
    00456 934A      ST	-Y,R20
    00457 9760      SBIW	R28,0x10
(0215) 	}
(0216) }
(0217) 
(0218) 
(0219) 		
(0220) 
(0221) 
(0222) /****************** HD7279测试函数*************************/
(0223) void test_7279(void)
(0224) {
(0225) 	unsigned long wait_cnter;
(0226) 	unsigned long tmr,j,k;
(0227) 	unsigned char key7279_number;
(0228) 	init_7279();
    00458 DF36      RCALL	_init_7279
    00459 C1E1      RJMP	0x063B
(0229) 	while(1)
(0230) 	{
(0231) 		for(tmr=0;tmr<0xf000;tmr++);	//上电延时
    0045A E080      LDI	R24,0
    0045B 8788      STD	Y+8,R24
    0045C 8789      STD	Y+9,R24
    0045D 878A      STD	Y+10,R24
    0045E 878B      STD	Y+11,R24
    0045F C010      RJMP	0x0470
    00460 E081      LDI	R24,1
    00461 E090      LDI	R25,0
    00462 E0A0      LDI	R26,0
    00463 E0B0      LDI	R27,0
    00464 8428      LDD	R2,Y+8
    00465 8439      LDD	R3,Y+9
    00466 844A      LDD	R4,Y+10
    00467 845B      LDD	R5,Y+11
    00468 0E28      ADD	R2,R24
    00469 1E39      ADC	R3,R25
    0046A 1E4A      ADC	R4,R26
    0046B 1E5B      ADC	R5,R27
    0046C 8628      STD	Y+8,R2
    0046D 8639      STD	Y+9,R3
    0046E 864A      STD	Y+10,R4
    0046F 865B      STD	Y+11,R5
    00470 E080      LDI	R24,0
    00471 EF90      LDI	R25,0xF0
    00472 E0A0      LDI	R26,0
    00473 E0B0      LDI	R27,0
    00474 8428      LDD	R2,Y+8
    00475 8439      LDD	R3,Y+9
    00476 844A      LDD	R4,Y+10
    00477 845B      LDD	R5,Y+11
    00478 1628      CP	R2,R24
    00479 0639      CPC	R3,R25
    0047A 064A      CPC	R4,R26
    0047B 065B      CPC	R5,R27
    0047C F318      BCS	0x0460
(0232) 		send_byte(CMD_RESET);		    //复位HD7279
    0047D EA04      LDI	R16,0xA4
    0047E DF69      RCALL	_send_byte
(0233) 
(0234) 		//测试指令演示
(0235) 
(0236) 		send_byte(CMD_TEST);
    0047F EB0F      LDI	R16,0xBF
    00480 DF67      RCALL	_send_byte
(0237) 		for(j=0;j<3;j++)		        //延时约3秒
    00481 E080      LDI	R24,0
    00482 8388      ST	Y,R24
    00483 8389      STD	Y+1,R24
    00484 838A      STD	Y+2,R24
    00485 838B      STD	Y+3,R24
    00486 C013      RJMP	0x049A
(0238) 		{	
(0239) 			delay10ms(100);
    00487 E604      LDI	R16,0x64
    00488 E010      LDI	R17,0
    00489 DF48      RCALL	_delay10ms
    0048A E081      LDI	R24,1
    0048B E090      LDI	R25,0
    0048C E0A0      LDI	R26,0
    0048D E0B0      LDI	R27,0
    0048E 8028      LD	R2,Y
    0048F 8039      LDD	R3,Y+1
    00490 804A      LDD	R4,Y+2
    00491 805B      LDD	R5,Y+3
    00492 0E28      ADD	R2,R24
    00493 1E39      ADC	R3,R25
    00494 1E4A      ADC	R4,R26
    00495 1E5B      ADC	R5,R27
    00496 8228      ST	Y,R2
    00497 8239      STD	Y+1,R3
    00498 824A      STD	Y+2,R4
    00499 825B      STD	Y+3,R5
    0049A E083      LDI	R24,3
    0049B E090      LDI	R25,0
    0049C E0A0      LDI	R26,0
    0049D E0B0      LDI	R27,0
    0049E 8028      LD	R2,Y
    0049F 8039      LDD	R3,Y+1
    004A0 804A      LDD	R4,Y+2
    004A1 805B      LDD	R5,Y+3
    004A2 1628      CP	R2,R24
    004A3 0639      CPC	R3,R25
    004A4 064A      CPC	R4,R26
    004A5 065B      CPC	R5,R27
    004A6 F300      BCS	0x0487
(0240) 		}
(0241) 		send_byte(CMD_RESET);		    //清除显示
    004A7 EA04      LDI	R16,0xA4
    004A8 DF3F      RCALL	_send_byte
(0242) 		
(0243) 	
(0244) 		{	
(0245) 		 write7279(DECODE0+0,0x80);
    004A9 E820      LDI	R18,0x80
    004AA E800      LDI	R16,0x80
    004AB DEFB      RCALL	_write7279
(0246) 		 write7279(DECODE0+1,0x81);
    004AC E821      LDI	R18,0x81
    004AD E801      LDI	R16,0x81
    004AE DEF8      RCALL	_write7279
(0247) 		 write7279(DECODE0+2,0x82);
    004AF E822      LDI	R18,0x82
    004B0 E802      LDI	R16,0x82
    004B1 DEF5      RCALL	_write7279
(0248) 		 write7279(DECODE0+3,0x83);
    004B2 E823      LDI	R18,0x83
    004B3 E803      LDI	R16,0x83
    004B4 DEF2      RCALL	_write7279
(0249) 		 write7279(DECODE0+4,0x84);
    004B5 E824      LDI	R18,0x84
    004B6 E804      LDI	R16,0x84
    004B7 DEEF      RCALL	_write7279
(0250) 		 write7279(DECODE0+5,0x85);
    004B8 E825      LDI	R18,0x85
    004B9 E805      LDI	R16,0x85
    004BA DEEC      RCALL	_write7279
(0251) 		 write7279(DECODE0+6,0x86);
    004BB E826      LDI	R18,0x86
    004BC E806      LDI	R16,0x86
    004BD DEE9      RCALL	_write7279
(0252) 		 write7279(DECODE0+7,0x87);
    004BE E827      LDI	R18,0x87
    004BF E807      LDI	R16,0x87
    004C0 DEE6      RCALL	_write7279
(0253) 		 }
(0254) 		 
(0255) 		delay10ms(200);
    004C1 EC08      LDI	R16,0xC8
    004C2 E010      LDI	R17,0
    004C3 DF0E      RCALL	_delay10ms
(0256) 
(0257) 		//闪烁指令及键盘接口测试，
(0258) 		//将用户按键的键码显示出来，
(0259) 		//如果10秒内无按键或按S0键即进入下一步演示
(0260) 		wait_cnter=0;
    004C4 E080      LDI	R24,0
    004C5 878C      STD	Y+12,R24
    004C6 878D      STD	Y+13,R24
    004C7 878E      STD	Y+14,R24
    004C8 878F      STD	Y+15,R24
(0261) 		key7279_number=0xff;
    004C9 EF4F      LDI	R20,0xFF
(0262) 		write7279(BLINKCTL,0xfc);			//第1?2两位设为闪烁显示 1111，1100
    004CA EF2C      LDI	R18,0xFC
    004CB E808      LDI	R16,0x88
    004CC DEDA      RCALL	_write7279
(0263) 		write7279(UNDECODE,0x08);           //0x08 is '_'
    004CD E028      LDI	R18,0x8
    004CE E900      LDI	R16,0x90
    004CF DED7      RCALL	_write7279
(0264) 		write7279(UNDECODE+1,0x08);			//在第1?2位显示下划线'_'
    004D0 E028      LDI	R18,0x8
    004D1 E901      LDI	R16,0x91
    004D2 DED4      RCALL	_write7279
(0265) 		do
(0266) 		{
(0267) 			if(!(RD7279&key7279))			//如果有键按下
    004D3 99CA      SBIC	0x19,2
    004D4 C01B      RJMP	0x04F0
(0268) 			{   
(0269) 			 write7279(DECODE0+7,0x88);
    004D5 E828      LDI	R18,0x88
    004D6 E807      LDI	R16,0x87
    004D7 DECF      RCALL	_write7279
(0270) 			 key7279_number=read7279();     //读出键码
    004D8 DED9      RCALL	_read7279
    004D9 2F40      MOV	R20,R16
(0271) 			 write7279(BLINKCTL,0xff);
    004DA EF2F      LDI	R18,0xFF
    004DB E808      LDI	R16,0x88
    004DC DECA      RCALL	_write7279
(0272) 			 write7279(DECODE1+1,key7279_number/16);	//在第2 位显示键码高8位
    004DD 2F24      MOV	R18,R20
    004DE 9522      SWAP	R18
    004DF 702F      ANDI	R18,0xF
    004E0 EC09      LDI	R16,0xC9
    004E1 DEC5      RCALL	_write7279
(0273) 			 write7279(DECODE1,key7279_number&0x0f);	//在第1位显示键码低8位
    004E2 2F24      MOV	R18,R20
    004E3 702F      ANDI	R18,0xF
    004E4 EC08      LDI	R16,0xC8
    004E5 DEC1      RCALL	_write7279
(0274) 			 while(!(RD7279&key7279));			        //等待按键放开
    004E6 9BCA      SBIS	0x19,2
    004E7 CFFE      RJMP	0x04E6
(0275) 			 wait_cnter=0;
    004E8 E080      LDI	R24,0
    004E9 878C      STD	Y+12,R24
    004EA 878D      STD	Y+13,R24
    004EB 878E      STD	Y+14,R24
    004EC 878F      STD	Y+15,R24
(0276) 			 delay10ms(10); 
    004ED E00A      LDI	R16,0xA
    004EE E010      LDI	R17,0
    004EF DEE2      RCALL	_delay10ms
(0277) 			}	
(0278) 		}
(0279) 		while(wait_cnter<1000);	
    004F0 EE88      LDI	R24,0xE8
    004F1 E093      LDI	R25,3
    004F2 E0A0      LDI	R26,0
    004F3 E0B0      LDI	R27,0
    004F4 842C      LDD	R2,Y+12
    004F5 843D      LDD	R3,Y+13
    004F6 844E      LDD	R4,Y+14
    004F7 845F      LDD	R5,Y+15
    004F8 1628      CP	R2,R24
    004F9 0639      CPC	R3,R25
    004FA 064A      CPC	R4,R26
    004FB 065B      CPC	R5,R27
    004FC F2B0      BCS	0x04D3
(0280) 		
(0281) 		//如果按键为'0'和超时则进入下一步演示
(0282) 		write7279(BLINKCTL,0xff);			//清除闪烁设置 无位显示闪烁1111,1111
    004FD EF2F      LDI	R18,0xFF
    004FE E808      LDI	R16,0x88
    004FF DEA7      RCALL	_write7279
(0283) 		send_byte(CMD_RESET);				//清除显示
    00500 EA04      LDI	R16,0xA4
    00501 DEE6      RCALL	_send_byte
(0284) 	
(0285) 		//下载数据但不译码指令测试
(0286) 		write7279(UNDECODE+7,0x49);		//在第8位按不译码方式显示一个字符‘三’。
    00502 E429      LDI	R18,0x49
    00503 E907      LDI	R16,0x97
    00504 DEA2      RCALL	_write7279
(0287) 		delay10ms(80);
    00505 E500      LDI	R16,0x50
    00506 E010      LDI	R17,0
    00507 DECA      RCALL	_delay10ms
(0288) 	
(0289) 		//循环左右移测试，‘三’字向右移3次，再向左移3次。
(0290) 		for(j=0;j<23;j++)
    00508 E080      LDI	R24,0
    00509 8388      ST	Y,R24
    0050A 8389      STD	Y+1,R24
    0050B 838A      STD	Y+2,R24
    0050C 838B      STD	Y+3,R24
    0050D C015      RJMP	0x0523
(0291) 		{
(0292) 			send_byte(RTR_CYCLE);			//循环右移23次
    0050E EA02      LDI	R16,0xA2
    0050F DED8      RCALL	_send_byte
(0293) 			delay10ms(12);
    00510 E00C      LDI	R16,0xC
    00511 E010      LDI	R17,0
    00512 DEBF      RCALL	_delay10ms
    00513 E081      LDI	R24,1
    00514 E090      LDI	R25,0
    00515 E0A0      LDI	R26,0
    00516 E0B0      LDI	R27,0
    00517 8028      LD	R2,Y
    00518 8039      LDD	R3,Y+1
    00519 804A      LDD	R4,Y+2
    0051A 805B      LDD	R5,Y+3
    0051B 0E28      ADD	R2,R24
    0051C 1E39      ADC	R3,R25
    0051D 1E4A      ADC	R4,R26
    0051E 1E5B      ADC	R5,R27
    0051F 8228      ST	Y,R2
    00520 8239      STD	Y+1,R3
    00521 824A      STD	Y+2,R4
    00522 825B      STD	Y+3,R5
    00523 E187      LDI	R24,0x17
    00524 E090      LDI	R25,0
    00525 E0A0      LDI	R26,0
    00526 E0B0      LDI	R27,0
    00527 8028      LD	R2,Y
    00528 8039      LDD	R3,Y+1
    00529 804A      LDD	R4,Y+2
    0052A 805B      LDD	R5,Y+3
    0052B 1628      CP	R2,R24
    0052C 0639      CPC	R3,R25
    0052D 064A      CPC	R4,R26
    0052E 065B      CPC	R5,R27
    0052F F2F0      BCS	0x050E
(0294) 		}
(0295) 		
(0296) 		for(j=0;j<23;j++)
    00530 E080      LDI	R24,0
    00531 8388      ST	Y,R24
    00532 8389      STD	Y+1,R24
    00533 838A      STD	Y+2,R24
    00534 838B      STD	Y+3,R24
    00535 C015      RJMP	0x054B
(0297) 		{
(0298) 			send_byte(RTL_CYCLE);			//循环左移23次
    00536 EA03      LDI	R16,0xA3
    00537 DEB0      RCALL	_send_byte
(0299) 			delay10ms(12);
    00538 E00C      LDI	R16,0xC
    00539 E010      LDI	R17,0
    0053A DE97      RCALL	_delay10ms
    0053B E081      LDI	R24,1
    0053C E090      LDI	R25,0
    0053D E0A0      LDI	R26,0
    0053E E0B0      LDI	R27,0
    0053F 8028      LD	R2,Y
    00540 8039      LDD	R3,Y+1
    00541 804A      LDD	R4,Y+2
    00542 805B      LDD	R5,Y+3
    00543 0E28      ADD	R2,R24
    00544 1E39      ADC	R3,R25
    00545 1E4A      ADC	R4,R26
    00546 1E5B      ADC	R5,R27
    00547 8228      ST	Y,R2
    00548 8239      STD	Y+1,R3
    00549 824A      STD	Y+2,R4
    0054A 825B      STD	Y+3,R5
    0054B E187      LDI	R24,0x17
    0054C E090      LDI	R25,0
    0054D E0A0      LDI	R26,0
    0054E E0B0      LDI	R27,0
    0054F 8028      LD	R2,Y
    00550 8039      LDD	R3,Y+1
    00551 804A      LDD	R4,Y+2
    00552 805B      LDD	R5,Y+3
    00553 1628      CP	R2,R24
    00554 0639      CPC	R3,R25
    00555 064A      CPC	R4,R26
    00556 065B      CPC	R5,R27
    00557 F2F0      BCS	0x0536
(0300) 		}
(0301) 	
(0302) 		//译码方式0及左移指令测试
(0303) 		for(j=0;j<16;j++)
    00558 E080      LDI	R24,0
    00559 8388      ST	Y,R24
    0055A 8389      STD	Y+1,R24
    0055B 838A      STD	Y+2,R24
    0055C 838B      STD	Y+3,R24
    0055D C01C      RJMP	0x057A
(0304) 		{
(0305) 			send_byte(RTL_UNCYL);			//不循环左移指令
    0055E EA01      LDI	R16,0xA1
    0055F DE88      RCALL	_send_byte
(0306) 			write7279(DECODE0,j);			//译码方式0，显示在第1位
    00560 8028      LD	R2,Y
    00561 8039      LDD	R3,Y+1
    00562 804A      LDD	R4,Y+2
    00563 805B      LDD	R5,Y+3
    00564 2D22      MOV	R18,R2
    00565 E800      LDI	R16,0x80
    00566 DE40      RCALL	_write7279
(0307) 			delay10ms(50);
    00567 E302      LDI	R16,0x32
    00568 E010      LDI	R17,0
    00569 DE68      RCALL	_delay10ms
    0056A E081      LDI	R24,1
    0056B E090      LDI	R25,0
    0056C E0A0      LDI	R26,0
    0056D E0B0      LDI	R27,0
    0056E 8028      LD	R2,Y
    0056F 8039      LDD	R3,Y+1
    00570 804A      LDD	R4,Y+2
    00571 805B      LDD	R5,Y+3
    00572 0E28      ADD	R2,R24
    00573 1E39      ADC	R3,R25
    00574 1E4A      ADC	R4,R26
    00575 1E5B      ADC	R5,R27
    00576 8228      ST	Y,R2
    00577 8239      STD	Y+1,R3
    00578 824A      STD	Y+2,R4
    00579 825B      STD	Y+3,R5
    0057A E180      LDI	R24,0x10
    0057B E090      LDI	R25,0
    0057C E0A0      LDI	R26,0
    0057D E0B0      LDI	R27,0
    0057E 8028      LD	R2,Y
    0057F 8039      LDD	R3,Y+1
    00580 804A      LDD	R4,Y+2
    00581 805B      LDD	R5,Y+3
    00582 1628      CP	R2,R24
    00583 0639      CPC	R3,R25
    00584 064A      CPC	R4,R26
    00585 065B      CPC	R5,R27
    00586 F2B8      BCS	0x055E
(0308) 		}
(0309) 			delay10ms(150);
    00587 E906      LDI	R16,0x96
    00588 E010      LDI	R17,0
    00589 DE48      RCALL	_delay10ms
(0310) 			send_byte(CMD_RESET);
    0058A EA04      LDI	R16,0xA4
    0058B DE5C      RCALL	_send_byte
(0311) 	
(0312) 		//译码方式1及右移指令测试
(0313) 		for(j=0;j<16;j++)
    0058C E080      LDI	R24,0
    0058D 8388      ST	Y,R24
    0058E 8389      STD	Y+1,R24
    0058F 838A      STD	Y+2,R24
    00590 838B      STD	Y+3,R24
    00591 C01C      RJMP	0x05AE
(0314) 		{
(0315) 			send_byte(RTR_UNCYL);			//不循环左移指令
    00592 EA00      LDI	R16,0xA0
    00593 DE54      RCALL	_send_byte
(0316) 			write7279(DECODE1+7,j);			//译码方式1，显示在第8位
    00594 8028      LD	R2,Y
    00595 8039      LDD	R3,Y+1
    00596 804A      LDD	R4,Y+2
    00597 805B      LDD	R5,Y+3
    00598 2D22      MOV	R18,R2
    00599 EC0F      LDI	R16,0xCF
    0059A DE0C      RCALL	_write7279
(0317) 			delay10ms(50);
    0059B E302      LDI	R16,0x32
    0059C E010      LDI	R17,0
    0059D DE34      RCALL	_delay10ms
    0059E E081      LDI	R24,1
    0059F E090      LDI	R25,0
    005A0 E0A0      LDI	R26,0
    005A1 E0B0      LDI	R27,0
    005A2 8028      LD	R2,Y
    005A3 8039      LDD	R3,Y+1
    005A4 804A      LDD	R4,Y+2
    005A5 805B      LDD	R5,Y+3
    005A6 0E28      ADD	R2,R24
    005A7 1E39      ADC	R3,R25
    005A8 1E4A      ADC	R4,R26
    005A9 1E5B      ADC	R5,R27
    005AA 8228      ST	Y,R2
    005AB 8239      STD	Y+1,R3
    005AC 824A      STD	Y+2,R4
    005AD 825B      STD	Y+3,R5
    005AE E180      LDI	R24,0x10
    005AF E090      LDI	R25,0
    005B0 E0A0      LDI	R26,0
    005B1 E0B0      LDI	R27,0
    005B2 8028      LD	R2,Y
    005B3 8039      LDD	R3,Y+1
    005B4 804A      LDD	R4,Y+2
    005B5 805B      LDD	R5,Y+3
    005B6 1628      CP	R2,R24
    005B7 0639      CPC	R3,R25
    005B8 064A      CPC	R4,R26
    005B9 065B      CPC	R5,R27
    005BA F2B8      BCS	0x0592
(0318) 		}
(0319) 		delay10ms(150);
    005BB E906      LDI	R16,0x96
    005BC E010      LDI	R17,0
    005BD DE14      RCALL	_delay10ms
(0320) 	
(0321) 		//消隐指令测试
(0322) 	
(0323) 		for(j=0;j<6;j++)
    005BE E080      LDI	R24,0
    005BF 8388      ST	Y,R24
    005C0 8389      STD	Y+1,R24
    005C1 838A      STD	Y+2,R24
    005C2 838B      STD	Y+3,R24
    005C3 C026      RJMP	0x05EA
(0324) 		{
(0325) 			k=k>>1;
    005C4 802C      LDD	R2,Y+4
    005C5 803D      LDD	R3,Y+5
    005C6 804E      LDD	R4,Y+6
    005C7 805F      LDD	R5,Y+7
    005C8 9456      LSR	R5
    005C9 9447      ROR	R4
    005CA 9437      ROR	R3
    005CB 9427      ROR	R2
    005CC 822C      STD	Y+4,R2
    005CD 823D      STD	Y+5,R3
    005CE 824E      STD	Y+6,R4
    005CF 825F      STD	Y+7,R5
(0326) 			write7279(ACTCTL,k);			//每隔一秒钟增加一个消隐位
    005D0 802C      LDD	R2,Y+4
    005D1 803D      LDD	R3,Y+5
    005D2 804E      LDD	R4,Y+6
    005D3 805F      LDD	R5,Y+7
    005D4 2D22      MOV	R18,R2
    005D5 E908      LDI	R16,0x98
    005D6 DDD0      RCALL	_write7279
(0327) 			delay10ms(100);
    005D7 E604      LDI	R16,0x64
    005D8 E010      LDI	R17,0
    005D9 DDF8      RCALL	_delay10ms
    005DA E081      LDI	R24,1
    005DB E090      LDI	R25,0
    005DC E0A0      LDI	R26,0
    005DD E0B0      LDI	R27,0
    005DE 8028      LD	R2,Y
    005DF 8039      LDD	R3,Y+1
    005E0 804A      LDD	R4,Y+2
    005E1 805B      LDD	R5,Y+3
    005E2 0E28      ADD	R2,R24
    005E3 1E39      ADC	R3,R25
    005E4 1E4A      ADC	R4,R26
    005E5 1E5B      ADC	R5,R27
    005E6 8228      ST	Y,R2
    005E7 8239      STD	Y+1,R3
    005E8 824A      STD	Y+2,R4
    005E9 825B      STD	Y+3,R5
    005EA E086      LDI	R24,6
    005EB E090      LDI	R25,0
    005EC E0A0      LDI	R26,0
    005ED E0B0      LDI	R27,0
    005EE 8028      LD	R2,Y
    005EF 8039      LDD	R3,Y+1
    005F0 804A      LDD	R4,Y+2
    005F1 805B      LDD	R5,Y+3
    005F2 1628      CP	R2,R24
    005F3 0639      CPC	R3,R25
    005F4 064A      CPC	R4,R26
    005F5 065B      CPC	R5,R27
    005F6 F268      BCS	0x05C4
(0328) 		}
(0329) 		write7279(ACTCTL,0xff);				//恢复8位显示
    005F7 EF2F      LDI	R18,0xFF
    005F8 E908      LDI	R16,0x98
    005F9 DDAD      RCALL	_write7279
(0330) 		delay10ms(100);
    005FA E604      LDI	R16,0x64
    005FB E010      LDI	R17,0
    005FC DDD5      RCALL	_delay10ms
(0331) 		send_byte(CMD_RESET);				//清除显示
    005FD EA04      LDI	R16,0xA4
    005FE DDE9      RCALL	_send_byte
(0332) 	
(0333) 		//段点亮指令和段关闭指令
(0334) 		for(j=0;j<64;j++)
    005FF E080      LDI	R24,0
    00600 8388      ST	Y,R24
    00601 8389      STD	Y+1,R24
    00602 838A      STD	Y+2,R24
    00603 838B      STD	Y+3,R24
    00604 C029      RJMP	0x062E
(0335) 		{
(0336) 			write7279(SEGON,j);			//将64个显示段逐个点亮
    00605 8028      LD	R2,Y
    00606 8039      LDD	R3,Y+1
    00607 804A      LDD	R4,Y+2
    00608 805B      LDD	R5,Y+3
    00609 2D22      MOV	R18,R2
    0060A EE00      LDI	R16,0xE0
    0060B DD9B      RCALL	_write7279
(0337) 			write7279(SEGOFF,j-1);			//同时将前一个显示段关闭
    0060C E081      LDI	R24,1
    0060D E090      LDI	R25,0
    0060E E0A0      LDI	R26,0
    0060F E0B0      LDI	R27,0
    00610 8028      LD	R2,Y
    00611 8039      LDD	R3,Y+1
    00612 804A      LDD	R4,Y+2
    00613 805B      LDD	R5,Y+3
    00614 1A28      SUB	R2,R24
    00615 0A39      SBC	R3,R25
    00616 0A4A      SBC	R4,R26
    00617 0A5B      SBC	R5,R27
    00618 2D22      MOV	R18,R2
    00619 EC00      LDI	R16,0xC0
    0061A DD8C      RCALL	_write7279
(0338) 			delay10ms(20);
    0061B E104      LDI	R16,0x14
    0061C E010      LDI	R17,0
    0061D DDB4      RCALL	_delay10ms
    0061E E081      LDI	R24,1
    0061F E090      LDI	R25,0
    00620 E0A0      LDI	R26,0
    00621 E0B0      LDI	R27,0
    00622 8028      LD	R2,Y
    00623 8039      LDD	R3,Y+1
    00624 804A      LDD	R4,Y+2
    00625 805B      LDD	R5,Y+3
    00626 0E28      ADD	R2,R24
    00627 1E39      ADC	R3,R25
    00628 1E4A      ADC	R4,R26
    00629 1E5B      ADC	R5,R27
    0062A 8228      ST	Y,R2
    0062B 8239      STD	Y+1,R3
    0062C 824A      STD	Y+2,R4
    0062D 825B      STD	Y+3,R5
    0062E E480      LDI	R24,0x40
    0062F E090      LDI	R25,0
    00630 E0A0      LDI	R26,0
    00631 E0B0      LDI	R27,0
    00632 8028      LD	R2,Y
    00633 8039      LDD	R3,Y+1
    00634 804A      LDD	R4,Y+2
    00635 805B      LDD	R5,Y+3
    00636 1628      CP	R2,R24
    00637 0639      CPC	R3,R25
    00638 064A      CPC	R4,R26
    00639 065B      CPC	R5,R27
    0063A F250      BCS	0x0605
    0063B CE1E      RJMP	0x045A
    0063C 9660      ADIW	R28,0x10
    0063D 9149      LD	R20,Y+
    0063E 9508      RET
_dis_data:
  temp_char            --> R14
  i                    --> R10
  num                  --> Y,+10
  dig_end              --> R12
  dig_start            --> R14
    0063F 940E 07FE CALL	push_xgsetF0FC
    00641 2EC2      MOV	R12,R18
    00642 2EE0      MOV	R14,R16
(0339) 		}
(0340) 	}
(0341) }
(0342) 
(0343) 
(0344) 
(0345) 
(0346) /********************************** HD7279输入输出函数 *******************************************/
(0347) 
(0348) void dis_data ( unsigned char dig_start,unsigned char dig_end,signed long num)
(0349) {
(0350) 	unsigned char i,temp_char;
(0351) 	
(0352) 	for( i = dig_start; i <= dig_end; i++ )
    00643 2CAE      MOV	R10,R14
    00644 C036      RJMP	0x067B
(0353) 	{
(0354) 		temp_char = num % 10;
    00645 E04A      LDI	R20,0xA
    00646 E050      LDI	R21,0
    00647 E060      LDI	R22,0
    00648 E070      LDI	R23,0
    00649 850A      LDD	R16,Y+10
    0064A 851B      LDD	R17,Y+11
    0064B 852C      LDD	R18,Y+12
    0064C 853D      LDD	R19,Y+13
    0064D 937A      ST	-Y,R23
    0064E 936A      ST	-Y,R22
    0064F 935A      ST	-Y,R21
    00650 934A      ST	-Y,R20
    00651 940E 0748 CALL	mod32s
    00653 2EE0      MOV	R14,R16
(0355) 		num -= temp_char;
    00654 2C2E      MOV	R2,R14
    00655 2433      CLR	R3
    00656 2444      CLR	R4
    00657 2455      CLR	R5
    00658 846A      LDD	R6,Y+10
    00659 847B      LDD	R7,Y+11
    0065A 848C      LDD	R8,Y+12
    0065B 849D      LDD	R9,Y+13
    0065C 1862      SUB	R6,R2
    0065D 0873      SBC	R7,R3
    0065E 0884      SBC	R8,R4
    0065F 0895      SBC	R9,R5
    00660 866A      STD	Y+10,R6
    00661 867B      STD	Y+11,R7
    00662 868C      STD	Y+12,R8
    00663 869D      STD	Y+13,R9
(0356) 		num /= 10;	
    00664 E04A      LDI	R20,0xA
    00665 E050      LDI	R21,0
    00666 E060      LDI	R22,0
    00667 E070      LDI	R23,0
    00668 850A      LDD	R16,Y+10
    00669 851B      LDD	R17,Y+11
    0066A 852C      LDD	R18,Y+12
    0066B 853D      LDD	R19,Y+13
    0066C 937A      ST	-Y,R23
    0066D 936A      ST	-Y,R22
    0066E 935A      ST	-Y,R21
    0066F 934A      ST	-Y,R20
    00670 940E 0746 CALL	div32s
    00672 870A      STD	Y+10,R16
    00673 871B      STD	Y+11,R17
    00674 872C      STD	Y+12,R18
    00675 873D      STD	Y+13,R19
(0357) 		write7279 ( DECODE0 + i , 0x00 +  temp_char );//0x00为不加点显示，0x80为加点显示
    00676 2D2E      MOV	R18,R14
    00677 2D0A      MOV	R16,R10
    00678 5800      SUBI	R16,0x80
    00679 DD2D      RCALL	_write7279
    0067A 94A3      INC	R10
    0067B 2C2C      MOV	R2,R12
    0067C 2433      CLR	R3
    0067D 2C4A      MOV	R4,R10
    0067E 2455      CLR	R5
    0067F 1424      CP	R2,R4
    00680 0435      CPC	R3,R5
    00681 F61C      BGE	0x0645
    00682 940C 07F3 JMP	pop_xgsetF0FC
_dis_data_RP:
  temp_char            --> R14
  i                    --> R10
  rp                   --> R12
  num                  --> Y,+12
  dig_end              --> Y,+10
  dig_start            --> R14
    00684 933A      ST	-Y,R19
    00685 932A      ST	-Y,R18
    00686 940E 07FE CALL	push_xgsetF0FC
    00688 2EE0      MOV	R14,R16
    00689 88C8      LDD	R12,Y+16
    0068A 88D9      LDD	R13,Y+17
(0358) 
(0359) 	}
(0360) }
(0361) 
(0362) 
(0363) //带小数点显示，可以在rp位显示小数点
(0364) void dis_data_RP ( unsigned char dig_start,unsigned char dig_end,signed long num,int rp)
(0365) {
(0366) 	unsigned char i,temp_char;
(0367) 	
(0368) 	for( i = dig_start; i <= dig_end; i++ )
    0068B 2CAE      MOV	R10,R14
    0068C C041      RJMP	0x06CE
(0369) 	{
(0370) 		temp_char = num % 10;
    0068D E04A      LDI	R20,0xA
    0068E E050      LDI	R21,0
    0068F E060      LDI	R22,0
    00690 E070      LDI	R23,0
    00691 850C      LDD	R16,Y+12
    00692 851D      LDD	R17,Y+13
    00693 852E      LDD	R18,Y+14
    00694 853F      LDD	R19,Y+15
    00695 937A      ST	-Y,R23
    00696 936A      ST	-Y,R22
    00697 935A      ST	-Y,R21
    00698 934A      ST	-Y,R20
    00699 940E 0748 CALL	mod32s
    0069B 2EE0      MOV	R14,R16
(0371) 		num -= temp_char;
    0069C 2C2E      MOV	R2,R14
    0069D 2433      CLR	R3
    0069E 2444      CLR	R4
    0069F 2455      CLR	R5
    006A0 846C      LDD	R6,Y+12
    006A1 847D      LDD	R7,Y+13
    006A2 848E      LDD	R8,Y+14
    006A3 849F      LDD	R9,Y+15
    006A4 1862      SUB	R6,R2
    006A5 0873      SBC	R7,R3
    006A6 0884      SBC	R8,R4
    006A7 0895      SBC	R9,R5
    006A8 866C      STD	Y+12,R6
    006A9 867D      STD	Y+13,R7
    006AA 868E      STD	Y+14,R8
    006AB 869F      STD	Y+15,R9
(0372) 		num /= 10;
    006AC E04A      LDI	R20,0xA
    006AD E050      LDI	R21,0
    006AE E060      LDI	R22,0
    006AF E070      LDI	R23,0
    006B0 850C      LDD	R16,Y+12
    006B1 851D      LDD	R17,Y+13
    006B2 852E      LDD	R18,Y+14
    006B3 853F      LDD	R19,Y+15
    006B4 937A      ST	-Y,R23
    006B5 936A      ST	-Y,R22
    006B6 935A      ST	-Y,R21
    006B7 934A      ST	-Y,R20
    006B8 940E 0746 CALL	div32s
    006BA 870C      STD	Y+12,R16
    006BB 871D      STD	Y+13,R17
    006BC 872E      STD	Y+14,R18
    006BD 873F      STD	Y+15,R19
(0373) 		if(i!=rp)
    006BE 2C2A      MOV	R2,R10
    006BF 2433      CLR	R3
    006C0 142C      CP	R2,R12
    006C1 043D      CPC	R3,R13
    006C2 F029      BEQ	0x06C8
(0374) 		write7279 ( DECODE0 + i , 0x00 +  temp_char );//0x00为不加点显示，0x80为加点显示
    006C3 2D2E      MOV	R18,R14
    006C4 2D02      MOV	R16,R2
    006C5 5800      SUBI	R16,0x80
    006C6 DCE0      RCALL	_write7279
    006C7 C005      RJMP	0x06CD
(0375) 		else
(0376) 		write7279 ( DECODE0 + i , 0X80 +  temp_char );
    006C8 2D2E      MOV	R18,R14
    006C9 5820      SUBI	R18,0x80
    006CA 2D0A      MOV	R16,R10
    006CB 5800      SUBI	R16,0x80
    006CC DCDA      RCALL	_write7279
    006CD 94A3      INC	R10
    006CE 842A      LDD	R2,Y+10
    006CF 2433      CLR	R3
    006D0 2C4A      MOV	R4,R10
    006D1 2455      CLR	R5
    006D2 1424      CP	R2,R4
    006D3 0435      CPC	R3,R5
    006D4 F00C      BLT	0x06D6
    006D5 CFB7      RJMP	0x068D
    006D6 940E 07F3 CALL	pop_xgsetF0FC
    006D8 9622      ADIW	R28,2
    006D9 9508      RET
_get_data:
  temp_long            --> Y,+0
  temp_char            --> R14
  i                    --> R10
  dig_end              --> R14
  dig_start            --> R12
    006DA 940E 07FE CALL	push_xgsetF0FC
    006DC 2EE2      MOV	R14,R18
    006DD 2EC0      MOV	R12,R16
    006DE 9724      SBIW	R28,4
(0377) 	}
(0378) }/**/
(0379) 
(0380) signed long get_data ( signed char dig_start,signed char dig_end )
(0381) {
(0382) 	signed long temp_long = 0;
    006DF E080      LDI	R24,0
    006E0 8388      ST	Y,R24
    006E1 8389      STD	Y+1,R24
    006E2 838A      STD	Y+2,R24
    006E3 838B      STD	Y+3,R24
(0383) 	signed char i,temp_char;	
(0384) 	
(0385) 	for( i = dig_start; i <= dig_end; i++ )
    006E4 2CAC      MOV	R10,R12
    006E5 C005      RJMP	0x06EB
(0386) 		write7279(UNDECODE + i,0x08);  //显示为'_'
    006E6 E028      LDI	R18,0x8
    006E7 2D0A      MOV	R16,R10
    006E8 5700      SUBI	R16,0x70
    006E9 DCBD      RCALL	_write7279
    006EA 94A3      INC	R10
    006EB 14EA      CP	R14,R10
    006EC F7CC      BGE	0x06E6
(0387) 		
(0388) 	for( i = dig_end; i >= dig_start ; i-- )
    006ED 2CAE      MOV	R10,R14
    006EE C032      RJMP	0x0721
(0389) 	{
(0390) 		temp_char = get_key7279();
    006EF DCC5      RCALL	_get_key7279
    006F0 2EE0      MOV	R14,R16
(0391) 		
(0392) 		temp_long *= 10;
    006F1 8028      LD	R2,Y
    006F2 8039      LDD	R3,Y+1
    006F3 804A      LDD	R4,Y+2
    006F4 805B      LDD	R5,Y+3
    006F5 E04A      LDI	R20,0xA
    006F6 E050      LDI	R21,0
    006F7 E060      LDI	R22,0
    006F8 E070      LDI	R23,0
    006F9 925A      ST	-Y,R5
    006FA 924A      ST	-Y,R4
    006FB 923A      ST	-Y,R3
    006FC 922A      ST	-Y,R2
    006FD 018A      MOVW	R16,R20
    006FE 019B      MOVW	R18,R22
    006FF 940E 07BA CALL	empy32u|empy32s
    00701 8308      ST	Y,R16
    00702 8319      STD	Y+1,R17
    00703 832A      STD	Y+2,R18
    00704 833B      STD	Y+3,R19
(0393) 		temp_long += temp_char;
    00705 2C2E      MOV	R2,R14
    00706 2433      CLR	R3
    00707 FC27      SBRC	R2,7
    00708 9430      COM	R3
    00709 2444      CLR	R4
    0070A FC37      SBRC	R3,7
    0070B 9440      COM	R4
    0070C 2455      CLR	R5
    0070D FC47      SBRC	R4,7
    0070E 9450      COM	R5
    0070F 8068      LD	R6,Y
    00710 8079      LDD	R7,Y+1
    00711 808A      LDD	R8,Y+2
    00712 809B      LDD	R9,Y+3
    00713 0C62      ADD	R6,R2
    00714 1C73      ADC	R7,R3
    00715 1C84      ADC	R8,R4
    00716 1C95      ADC	R9,R5
    00717 8268      ST	Y,R6
    00718 8279      STD	Y+1,R7
    00719 828A      STD	Y+2,R8
    0071A 829B      STD	Y+3,R9
(0394) 		
(0395) 		write7279 ( DECODE1 + i , 0x80 +  temp_char); //1译码可以显示字母
    0071B 2D2E      MOV	R18,R14
    0071C 5820      SUBI	R18,0x80
    0071D 2D0A      MOV	R16,R10
    0071E 5308      SUBI	R16,0x38
    0071F DC87      RCALL	_write7279
    00720 94AA      DEC	R10
    00721 14AC      CP	R10,R12
    00722 F664      BGE	0x06EF
(0396) 	}
(0397) 	delay10ms(5);
    00723 E005      LDI	R16,5
    00724 E010      LDI	R17,0
    00725 DCAC      RCALL	_delay10ms
(0398) 	send_byte(CMD_RESET);
    00726 EA04      LDI	R16,0xA4
    00727 DCC0      RCALL	_send_byte
(0399) 		
(0400) 	return temp_long;		
    00728 8108      LD	R16,Y
    00729 8119      LDD	R17,Y+1
    0072A 812A      LDD	R18,Y+2
    0072B 813B      LDD	R19,Y+3
    0072C 9624      ADIW	R28,4
    0072D 940C 07F3 JMP	pop_xgsetF0FC
FILE: C:\Users\HaiPiao\Desktop\附小实验\程序\声音+红外\FC04.c
(0001) /*******************************************************************************
(0002) **  MCU        : ATmega16 (Atmel)
(0003) **  Compiler   : ICCAVR 7.22
(0004) **  Module Name: FC4.c
(0005) **  Module Date: 2015-10-16
(0006) **  Module Auth: 蔡海飘
(0007) **  Description: 咪头
(0008) **  Version    : V1.0
(0009) **  Notes      : 
(0010) **------------------------------------------------------------------------------
(0011) /*----------------------------  I N C L U D E S  -----------------------------*/
(0012) #include "FC04.h"
(0013) 
(0014) /*--------------------------  D E F I N I T I O N  ---------------------------*/
(0015) 
(0016) /*---------------------------  F U N C T I O N S  ----------------------------*/
(0017) void FC04Init(void)
(0018) {
(0019)  	 DDRD &= ~(0x01<<1);
_FC04Init:
    0072F 9889      CBI	0x11,1
    00730 9508      RET
(0020) }  
(0021) 
(0022) unsigned char Read_FC04(void)  
(0023) {
(0024)     unsigned char state = 0;
_Read_FC04:
  state                --> R16
    00731 2700      CLR	R16
(0025) 	state = PIND&(0x01<<1);
    00732 B300      IN	R16,0x10
    00733 7002      ANDI	R16,2
(0026) 	return state;
    00734 9508      RET
FILE: C:\Users\HaiPiao\Desktop\附小实验\程序\声音+红外\MH_B.c
(0001) /*******************************************************************************
(0002) **  MCU        : ATmega16 (Atmel)
(0003) **  Compiler   : ICCAVR 7.22
(0004) **  Module Name: MH_B.c
(0005) **  Module Date: 2015-10-16
(0006) **  Module Auth: 蔡海飘
(0007) **  Description: 红外传感器
(0008) **  Version    : V1.0
(0009) **  Notes      : 
(0010) **------------------------------------------------------------------------------
(0011) /*----------------------------  I N C L U D E S  -----------------------------*/
(0012) #include "MH_B.h"
(0013) 
(0014) /*--------------------------  D E F I N I T I O N  ---------------------------*/
(0015) 
(0016) /*---------------------------  F U N C T I O N S  ----------------------------*/
(0017) void MH_B_Init(void)
(0018) {
(0019)  	 DDRA &= ~(0x01<<6);
_MH_B_Init:
    00735 98D6      CBI	0x1A,6
    00736 9508      RET
(0020) }  
(0021) 
(0022) unsigned char Read_MH_B(void)  
(0023) {
(0024)     unsigned char state = 0;
_Read_MH_B:
  state                --> R16
    00737 2700      CLR	R16
(0025) 	state = PINA&(0x01<<6);
    00738 B309      IN	R16,0x19
    00739 7400      ANDI	R16,0x40
(0026) 	return state;
FILE: <library>
    0073A 9508      RET
push_arg4:
    0073B 933A      ST	-Y,R19
    0073C 932A      ST	-Y,R18
push_arg2:
    0073D 931A      ST	-Y,R17
    0073E 930A      ST	-Y,R16
    0073F 9508      RET
div32u:
    00740 94E8      BCLR	6
    00741 C001      RJMP	0x0743
mod32u:
    00742 9468      BSET	6
    00743 D030      RCALL	long_div_prolog
    00744 24CC      CLR	R12
    00745 C009      RJMP	0x074F
div32s:
    00746 94E8      BCLR	6
    00747 C001      RJMP	0x0749
mod32s:
    00748 9468      BSET	6
    00749 D02A      RCALL	long_div_prolog
    0074A FD37      SBRC	R19,7
    0074B 940E 082B CALL	neg32
    0074D FDB7      SBRC	R27,7
    0074E D052      RCALL	neg_R24_R27
    0074F 2477      CLR	R7
    00750 2488      CLR	R8
    00751 2499      CLR	R9
    00752 24AA      CLR	R10
    00753 24BB      CLR	R11
    00754 D042      RCALL	tst_R16_R19
    00755 F0C1      BEQ	0x076E
    00756 D045      RCALL	tst_R24_R27
    00757 F0B1      BEQ	0x076E
    00758 E2E8      LDI	R30,0x28
    00759 0F00      LSL	R16
    0075A 1F11      ROL	R17
    0075B 1F22      ROL	R18
    0075C 1F33      ROL	R19
    0075D 1C77      ROL	R7
    0075E 1C88      ROL	R8
    0075F 1C99      ROL	R9
    00760 1CAA      ROL	R10
    00761 1CBB      ROL	R11
    00762 1688      CP	R8,R24
    00763 0699      CPC	R9,R25
    00764 06AA      CPC	R10,R26
    00765 06BB      CPC	R11,R27
    00766 F028      BCS	0x076C
    00767 1A88      SUB	R8,R24
    00768 0A99      SBC	R9,R25
    00769 0AAA      SBC	R10,R26
    0076A 0ABB      SBC	R11,R27
    0076B 9503      INC	R16
    0076C 95EA      DEC	R30
    0076D F759      BNE	0x0759
    0076E F426      BRTC	0x0773
    0076F 2D08      MOV	R16,R8
    00770 2D19      MOV	R17,R9
    00771 2D2A      MOV	R18,R10
    00772 2D3B      MOV	R19,R11
    00773 C013      RJMP	long_div_epilog
long_div_prolog:
    00774 927A      ST	-Y,R7
    00775 928A      ST	-Y,R8
    00776 929A      ST	-Y,R9
    00777 92AA      ST	-Y,R10
    00778 92BA      ST	-Y,R11
    00779 92CA      ST	-Y,R12
    0077A 93EA      ST	-Y,R30
    0077B 938A      ST	-Y,R24
    0077C 939A      ST	-Y,R25
    0077D 93AA      ST	-Y,R26
    0077E 93BA      ST	-Y,R27
    0077F 858B      LDD	R24,Y+11
    00780 859C      LDD	R25,Y+12
    00781 85AD      LDD	R26,Y+13
    00782 85BE      LDD	R27,Y+14
    00783 2EC3      MOV	R12,R19
    00784 F00E      BRTS	0x0786
    00785 26CB      EOR	R12,R27
    00786 9508      RET
long_div_epilog:
    00787 FCC7      SBRC	R12,7
    00788 940E 082B CALL	neg32
    0078A 91B9      LD	R27,Y+
    0078B 91A9      LD	R26,Y+
    0078C 9199      LD	R25,Y+
    0078D 9189      LD	R24,Y+
    0078E 91E9      LD	R30,Y+
    0078F 90C9      LD	R12,Y+
    00790 90B9      LD	R11,Y+
    00791 90A9      LD	R10,Y+
    00792 9099      LD	R9,Y+
    00793 9089      LD	R8,Y+
    00794 9079      LD	R7,Y+
    00795 9624      ADIW	R28,4
    00796 9508      RET
tst_R16_R19:
    00797 2FE0      MOV	R30,R16
    00798 2BE1      OR	R30,R17
    00799 2BE2      OR	R30,R18
    0079A 2BE3      OR	R30,R19
    0079B 9508      RET
tst_R24_R27:
    0079C 2FE8      MOV	R30,R24
    0079D 2BE9      OR	R30,R25
    0079E 2BEA      OR	R30,R26
    0079F 2BEB      OR	R30,R27
    007A0 9508      RET
neg_R24_R27:
    007A1 9580      COM	R24
    007A2 9590      COM	R25
    007A3 95A0      COM	R26
    007A4 95B0      COM	R27
    007A5 5F8F      SUBI	R24,0xFF
    007A6 4F9F      SBCI	R25,0xFF
    007A7 4FAF      SBCI	R26,0xFF
    007A8 4FBF      SBCI	R27,0xFF
    007A9 9508      RET
empy16s:
    007AA 920A      ST	-Y,R0
    007AB 921A      ST	-Y,R1
    007AC 938A      ST	-Y,R24
    007AD 939A      ST	-Y,R25
    007AE 9F02      MUL	R16,R18
    007AF 01C0      MOVW	R24,R0
    007B0 9F12      MUL	R17,R18
    007B1 0D90      ADD	R25,R0
    007B2 9F03      MUL	R16,R19
    007B3 0D90      ADD	R25,R0
    007B4 018C      MOVW	R16,R24
    007B5 9199      LD	R25,Y+
    007B6 9189      LD	R24,Y+
    007B7 9019      LD	R1,Y+
    007B8 9009      LD	R0,Y+
    007B9 9508      RET
empy32u|empy32s:
    007BA 940E 0834 CALL	long_prolog
    007BC 927A      ST	-Y,R7
    007BD 940E 084D CALL	tstzero1
    007BF F159      BEQ	0x07EB
    007C0 2477      CLR	R7
    007C1 940E 0853 CALL	tstzero2
    007C3 F419      BNE	0x07C7
    007C4 018C      MOVW	R16,R24
    007C5 019D      MOVW	R18,R26
    007C6 C024      RJMP	0x07EB
    007C7 920A      ST	-Y,R0
    007C8 921A      ST	-Y,R1
    007C9 9F08      MUL	R16,R24
    007CA 2CB0      MOV	R11,R0
    007CB 2CA1      MOV	R10,R1
    007CC 9F28      MUL	R18,R24
    007CD 2C90      MOV	R9,R0
    007CE 2C81      MOV	R8,R1
    007CF 9F18      MUL	R17,R24
    007D0 0CA0      ADD	R10,R0
    007D1 1C91      ADC	R9,R1
    007D2 1C87      ADC	R8,R7
    007D3 9F09      MUL	R16,R25
    007D4 0CA0      ADD	R10,R0
    007D5 1C91      ADC	R9,R1
    007D6 1C87      ADC	R8,R7
    007D7 9F19      MUL	R17,R25
    007D8 0C90      ADD	R9,R0
    007D9 1C81      ADC	R8,R1
    007DA 9F0A      MUL	R16,R26
    007DB 0C90      ADD	R9,R0
    007DC 1C81      ADC	R8,R1
    007DD 9F38      MUL	R19,R24
    007DE 0C80      ADD	R8,R0
    007DF 9F29      MUL	R18,R25
    007E0 0C80      ADD	R8,R0
    007E1 9F1A      MUL	R17,R26
    007E2 0C80      ADD	R8,R0
    007E3 9F0B      MUL	R16,R27
    007E4 0C80      ADD	R8,R0
    007E5 9019      LD	R1,Y+
    007E6 9009      LD	R0,Y+
    007E7 2D0B      MOV	R16,R11
    007E8 2D1A      MOV	R17,R10
    007E9 2D29      MOV	R18,R9
    007EA 2D38      MOV	R19,R8
    007EB 9079      LD	R7,Y+
    007EC 940C 0842 JMP	long_epilog
pop_xgset003C:
    007EE 90A9      LD	R10,Y+
    007EF 90B9      LD	R11,Y+
    007F0 90C9      LD	R12,Y+
    007F1 90D9      LD	R13,Y+
    007F2 9508      RET
pop_xgsetF0FC:
    007F3 90A9      LD	R10,Y+
    007F4 90B9      LD	R11,Y+
    007F5 90C9      LD	R12,Y+
    007F6 90D9      LD	R13,Y+
    007F7 90E9      LD	R14,Y+
    007F8 90F9      LD	R15,Y+
    007F9 9149      LD	R20,Y+
    007FA 9159      LD	R21,Y+
    007FB 9169      LD	R22,Y+
    007FC 9179      LD	R23,Y+
    007FD 9508      RET
push_xgsetF0FC:
    007FE 937A      ST	-Y,R23
    007FF 936A      ST	-Y,R22
push_xgset30FC:
    00800 935A      ST	-Y,R21
    00801 934A      ST	-Y,R20
push_xgset00FC:
    00802 92FA      ST	-Y,R15
    00803 92EA      ST	-Y,R14
push_xgset003C:
    00804 92DA      ST	-Y,R13
    00805 92CA      ST	-Y,R12
    00806 92BA      ST	-Y,R11
    00807 92AA      ST	-Y,R10
    00808 9508      RET
push_xgset300C:
    00809 935A      ST	-Y,R21
    0080A 934A      ST	-Y,R20
    0080B 92BA      ST	-Y,R11
    0080C 92AA      ST	-Y,R10
    0080D 9508      RET
pop_xgset300C:
    0080E 90A9      LD	R10,Y+
    0080F 90B9      LD	R11,Y+
    00810 9149      LD	R20,Y+
    00811 9159      LD	R21,Y+
    00812 9508      RET
push_xgsetF000:
    00813 937A      ST	-Y,R23
    00814 936A      ST	-Y,R22
    00815 935A      ST	-Y,R21
    00816 934A      ST	-Y,R20
    00817 9508      RET
pop_xgsetF000:
    00818 9149      LD	R20,Y+
    00819 9159      LD	R21,Y+
    0081A 9169      LD	R22,Y+
    0081B 9179      LD	R23,Y+
    0081C 9508      RET
push_xgsetF00C:
    0081D 937A      ST	-Y,R23
    0081E 936A      ST	-Y,R22
    0081F 935A      ST	-Y,R21
    00820 934A      ST	-Y,R20
    00821 92BA      ST	-Y,R11
    00822 92AA      ST	-Y,R10
    00823 9508      RET
pop_xgsetF00C:
    00824 90A9      LD	R10,Y+
    00825 90B9      LD	R11,Y+
    00826 9149      LD	R20,Y+
    00827 9159      LD	R21,Y+
    00828 9169      LD	R22,Y+
    00829 9179      LD	R23,Y+
    0082A 9508      RET
neg32:
    0082B 9500      COM	R16
    0082C 9510      COM	R17
    0082D 9520      COM	R18
    0082E 9530      COM	R19
    0082F 5F0F      SUBI	R16,0xFF
    00830 4F1F      SBCI	R17,0xFF
    00831 4F2F      SBCI	R18,0xFF
    00832 4F3F      SBCI	R19,0xFF
    00833 9508      RET
long_prolog:
    00834 928A      ST	-Y,R8
    00835 929A      ST	-Y,R9
    00836 92AA      ST	-Y,R10
    00837 92BA      ST	-Y,R11
    00838 93EA      ST	-Y,R30
    00839 938A      ST	-Y,R24
    0083A 939A      ST	-Y,R25
    0083B 93AA      ST	-Y,R26
    0083C 93BA      ST	-Y,R27
    0083D 8589      LDD	R24,Y+9
    0083E 859A      LDD	R25,Y+10
    0083F 85AB      LDD	R26,Y+11
    00840 85BC      LDD	R27,Y+12
    00841 9508      RET
long_epilog:
    00842 91B9      LD	R27,Y+
    00843 91A9      LD	R26,Y+
    00844 9199      LD	R25,Y+
    00845 9189      LD	R24,Y+
    00846 91E9      LD	R30,Y+
    00847 90B9      LD	R11,Y+
    00848 90A9      LD	R10,Y+
    00849 9099      LD	R9,Y+
    0084A 9089      LD	R8,Y+
    0084B 9624      ADIW	R28,4
    0084C 9508      RET
tstzero1:
    0084D 27EE      CLR	R30
    0084E 2BE0      OR	R30,R16
    0084F 2BE1      OR	R30,R17
    00850 2BE2      OR	R30,R18
    00851 2BE3      OR	R30,R19
    00852 9508      RET
tstzero2:
    00853 27EE      CLR	R30
    00854 2BE8      OR	R30,R24
    00855 2BE9      OR	R30,R25
    00856 2BEA      OR	R30,R26
    00857 2BEB      OR	R30,R27
    00858 9508      RET
lpm32:
    00859 93EA      ST	-Y,R30
    0085A 93FA      ST	-Y,R31
    0085B 920A      ST	-Y,R0
    0085C 2FE0      MOV	R30,R16
    0085D 2FF1      MOV	R31,R17
    0085E 95C8      LPM
    0085F 2D00      MOV	R16,R0
    00860 9631      ADIW	R30,1
    00861 95C8      LPM
    00862 2D10      MOV	R17,R0
    00863 9631      ADIW	R30,1
    00864 95C8      LPM
    00865 2D20      MOV	R18,R0
    00866 9631      ADIW	R30,1
    00867 95C8      LPM
    00868 2D30      MOV	R19,R0
    00869 9009      LD	R0,Y+
    0086A 91F9      LD	R31,Y+
    0086B 91E9      LD	R30,Y+
    0086C 9508      RET
lsl16:
    0086D 2322      TST	R18
    0086E F021      BEQ	0x0873
    0086F 0F00      LSL	R16
    00870 1F11      ROL	R17
    00871 952A      DEC	R18
    00872 CFFA      RJMP	lsl16
    00873 9508      RET
fpint:
    00874 924A      ST	-Y,R4
    00875 925A      ST	-Y,R5
    00876 926A      ST	-Y,R6
    00877 938A      ST	-Y,R24
    00878 940E 0974 CALL	unpacku
    0087A F111      BEQ	0x089D
    0087B 2055      TST	R5
    0087C F0E2      BMI	0x0899
    0087D E18F      LDI	R24,0x1F
    0087E 1648      CP	R4,R24
    0087F F4C0      BCC	0x0898
    00880 E187      LDI	R24,0x17
    00881 1648      CP	R4,R24
    00882 F0D1      BEQ	0x089D
    00883 F458      BCC	0x088F
    00884 9441      NEG	R4
    00885 EE89      LDI	R24,0xE9
    00886 1A48      SUB	R4,R24
    00887 C005      RJMP	0x088D
    00888 9535      ASR	R19
    00889 9527      ROR	R18
    0088A 9517      ROR	R17
    0088B 9507      ROR	R16
    0088C 944A      DEC	R4
    0088D F7D1      BNE	0x0888
    0088E C00E      RJMP	0x089D
    0088F E187      LDI	R24,0x17
    00890 1A48      SUB	R4,R24
    00891 0F00      LSL	R16
    00892 1F11      ROL	R17
    00893 1F22      ROL	R18
    00894 1F33      ROL	R19
    00895 944A      DEC	R4
    00896 F7D1      BNE	0x0891
    00897 C005      RJMP	0x089D
    00898 E73F      LDI	R19,0x7F
    00899 2F23      MOV	R18,R19
    0089A 2F13      MOV	R17,R19
    0089B 2F03      MOV	R16,R19
    0089C C004      RJMP	0x08A1
    0089D 2066      TST	R6
    0089E F011      BEQ	0x08A1
    0089F 940E 082B CALL	neg32
    008A1 9189      LD	R24,Y+
    008A2 9069      LD	R6,Y+
    008A3 9059      LD	R5,Y+
    008A4 9049      LD	R4,Y+
    008A5 9508      RET
uint2fp:
    008A6 9468      BSET	6
    008A7 C001      RJMP	0x08A9
int2fp:
    008A8 94E8      BCLR	6
    008A9 2722      CLR	R18
    008AA 2733      CLR	R19
    008AB F046      BRTS	0x08B4
    008AC FD17      SBRC	R17,7
    008AD 9520      COM	R18
    008AE FD17      SBRC	R17,7
    008AF 9530      COM	R19
    008B0 C003      RJMP	0x08B4
ulong2fp:
    008B1 9468      BSET	6
    008B2 C001      RJMP	0x08B4
long2fp:
    008B3 94E8      BCLR	6
    008B4 924A      ST	-Y,R4
    008B5 925A      ST	-Y,R5
    008B6 926A      ST	-Y,R6
    008B7 938A      ST	-Y,R24
    008B8 E187      LDI	R24,0x17
    008B9 2E48      MOV	R4,R24
    008BA 2455      CLR	R5
    008BB 2466      CLR	R6
    008BC F036      BRTS	0x08C3
    008BD 2333      TST	R19
    008BE F422      BPL	0x08C3
    008BF 940E 082B CALL	neg32
    008C1 E880      LDI	R24,0x80
    008C2 2E68      MOV	R6,R24
    008C3 940E 098D CALL	normalize_and_pack
    008C5 9189      LD	R24,Y+
    008C6 9069      LD	R6,Y+
    008C7 9059      LD	R5,Y+
    008C8 9049      LD	R4,Y+
    008C9 9508      RET
fpdiv1:
    008CA 93FA      ST	-Y,R31
    008CB 93EA      ST	-Y,R30
    008CC 81EA      LDD	R30,Y+2
    008CD 81FB      LDD	R31,Y+3
    008CE D027      RCALL	0x08F6
    008CF 91E9      LD	R30,Y+
    008D0 91F9      LD	R31,Y+
    008D1 9622      ADIW	R28,2
    008D2 9508      RET
fpdiv2:
    008D3 93FA      ST	-Y,R31
    008D4 93EA      ST	-Y,R30
    008D5 2FEC      MOV	R30,R28
    008D6 2FFD      MOV	R31,R29
    008D7 9632      ADIW	R30,2
    008D8 D01D      RCALL	0x08F6
    008D9 91E9      LD	R30,Y+
    008DA 91F9      LD	R31,Y+
    008DB 9624      ADIW	R28,4
    008DC 9508      RET
fpdiv1x:
    008DD 93FA      ST	-Y,R31
    008DE 93EA      ST	-Y,R30
    008DF 81EA      LDD	R30,Y+2
    008E0 81FB      LDD	R31,Y+3
    008E1 D014      RCALL	0x08F6
    008E2 91E9      LD	R30,Y+
    008E3 91F9      LD	R31,Y+
    008E4 8339      STD	Y+1,R19
    008E5 8328      ST	Y,R18
    008E6 931A      ST	-Y,R17
    008E7 930A      ST	-Y,R16
    008E8 9508      RET
fpdiv2x:
    008E9 93FA      ST	-Y,R31
    008EA 93EA      ST	-Y,R30
    008EB 2FEC      MOV	R30,R28
    008EC 2FFD      MOV	R31,R29
    008ED 9632      ADIW	R30,2
    008EE D007      RCALL	0x08F6
    008EF 91E9      LD	R30,Y+
    008F0 91F9      LD	R31,Y+
    008F1 833B      STD	Y+3,R19
    008F2 832A      STD	Y+2,R18
    008F3 8319      STD	Y+1,R17
    008F4 8308      ST	Y,R16
    008F5 9508      RET
    008F6 920A      ST	-Y,R0
    008F7 921A      ST	-Y,R1
    008F8 922A      ST	-Y,R2
    008F9 923A      ST	-Y,R3
    008FA 940E 09D2 CALL	saveFPRegs
    008FC 933A      ST	-Y,R19
    008FD 932A      ST	-Y,R18
    008FE 931A      ST	-Y,R17
    008FF 930A      ST	-Y,R16
    00900 8100      LD	R16,Z
    00901 8111      LDD	R17,Z+1
    00902 8122      LDD	R18,Z+2
    00903 8133      LDD	R19,Z+3
    00904 940E 0974 CALL	unpacku
    00906 F409      BNE	0x0908
    00907 C057      RJMP	0x095F
    00908 2CE6      MOV	R14,R6
    00909 2CD5      MOV	R13,R5
    0090A 2CC4      MOV	R12,R4
    0090B 2EB3      MOV	R11,R19
    0090C 2EA2      MOV	R10,R18
    0090D 2E91      MOV	R9,R17
    0090E 2E80      MOV	R8,R16
    0090F 9109      LD	R16,Y+
    00910 9119      LD	R17,Y+
    00911 9129      LD	R18,Y+
    00912 9139      LD	R19,Y+
    00913 940E 0974 CALL	unpacku
    00915 F1A1      BEQ	0x094A
    00916 246E      EOR	R6,R14
    00917 184C      SUB	R4,R12
    00918 085D      SBC	R5,R13
    00919 E880      LDI	R24,0x80
    0091A 1648      CP	R4,R24
    0091B 0653      CPC	R5,R19
    0091C F00C      BLT	0x091E
    0091D C033      RJMP	0x0951
    0091E E881      LDI	R24,0x81
    0091F 1648      CP	R4,R24
    00920 EF8F      LDI	R24,0xFF
    00921 0658      CPC	R5,R24
    00922 F40C      BGE	0x0924
    00923 C036      RJMP	0x095A
    00924 E280      LDI	R24,0x20
    00925 2433      CLR	R3
    00926 2E23      MOV	R2,R19
    00927 2E12      MOV	R1,R18
    00928 2E01      MOV	R0,R17
    00929 2F30      MOV	R19,R16
    0092A 2722      CLR	R18
    0092B 2711      CLR	R17
    0092C 2700      CLR	R16
    0092D 9426      LSR	R2
    0092E 9417      ROR	R1
    0092F 9407      ROR	R0
    00930 9537      ROR	R19
    00931 9527      ROR	R18
    00932 0F00      LSL	R16
    00933 1F11      ROL	R17
    00934 1F22      ROL	R18
    00935 1F33      ROL	R19
    00936 1C00      ROL	R0
    00937 1C11      ROL	R1
    00938 1C22      ROL	R2
    00939 1C33      ROL	R3
    0093A F028      BCS	0x0940
    0093B 1808      SUB	R0,R8
    0093C 0819      SBC	R1,R9
    0093D 082A      SBC	R2,R10
    0093E 083B      SBC	R3,R11
    0093F C004      RJMP	0x0944
    00940 0C08      ADD	R0,R8
    00941 1C19      ADC	R1,R9
    00942 1C2A      ADC	R2,R10
    00943 1C3B      ADC	R3,R11
    00944 F00A      BMI	0x0946
    00945 6001      ORI	R16,1
    00946 958A      DEC	R24
    00947 F751      BNE	0x0932
    00948 940E 098D CALL	normalize_and_pack
    0094A 940E 09E1 CALL	restoreFPRegs
    0094C 9039      LD	R3,Y+
    0094D 9029      LD	R2,Y+
    0094E 9019      LD	R1,Y+
    0094F 9009      LD	R0,Y+
    00950 9508      RET
    00951 EF0F      LDI	R16,0xFF
    00952 2F10      MOV	R17,R16
    00953 E72F      LDI	R18,0x7F
    00954 E73F      LDI	R19,0x7F
    00955 2066      TST	R6
    00956 F399      BEQ	0x094A
    00957 940E 082B CALL	neg32
    00959 CFF0      RJMP	0x094A
    0095A 2700      CLR	R16
    0095B 2F10      MOV	R17,R16
    0095C 2F20      MOV	R18,R16
    0095D 2F30      MOV	R19,R16
    0095E CFEB      RJMP	0x094A
    0095F 9109      LD	R16,Y+
    00960 9119      LD	R17,Y+
    00961 9129      LD	R18,Y+
    00962 9139      LD	R19,Y+
    00963 CFED      RJMP	0x0951
unpacks:
    00964 D00F      RCALL	unpacku
    00965 F029      BEQ	0x096B
    00966 2066      TST	R6
    00967 F011      BEQ	0x096A
    00968 940E 082B CALL	neg32
    0096A 9498      BCLR	1
    0096B 9508      RET
tstR16_R19:
    0096C 2300      TST	R16
    0096D F429      BNE	0x0973
    0096E 2311      TST	R17
    0096F F419      BNE	0x0973
    00970 2322      TST	R18
    00971 F409      BNE	0x0973
    00972 2333      TST	R19
    00973 9508      RET
unpacku:
    00974 DFF7      RCALL	tstR16_R19
    00975 F099      BEQ	0x0989
    00976 938A      ST	-Y,R24
    00977 2E63      MOV	R6,R19
    00978 E880      LDI	R24,0x80
    00979 2268      AND	R6,R24
    0097A 0F22      LSL	R18
    0097B 1F33      ROL	R19
    0097C 2E43      MOV	R4,R19
    0097D E78F      LDI	R24,0x7F
    0097E 1A48      SUB	R4,R24
    0097F 2455      CLR	R5
    00980 2788      CLR	R24
    00981 0A58      SBC	R5,R24
    00982 9526      LSR	R18
    00983 E830      LDI	R19,0x80
    00984 2B23      OR	R18,R19
    00985 2733      CLR	R19
    00986 9189      LD	R24,Y+
    00987 9498      BCLR	1
    00988 9508      RET
    00989 2444      CLR	R4
    0098A 2455      CLR	R5
    0098B 2466      CLR	R6
    0098C 9508      RET
normalize_and_pack:
    0098D DFDE      RCALL	tstR16_R19
    0098E F409      BNE	0x0990
    0098F 9508      RET
    00990 93AA      ST	-Y,R26
    00991 93BA      ST	-Y,R27
    00992 01D2      MOVW	R26,R4
    00993 939A      ST	-Y,R25
    00994 938A      ST	-Y,R24
    00995 E78E      LDI	R24,0x7E
    00996 E090      LDI	R25,0
    00997 2333      TST	R19
    00998 F049      BEQ	0x09A2
    00999 9536      LSR	R19
    0099A 9527      ROR	R18
    0099B 9517      ROR	R17
    0099C 9507      ROR	R16
    0099D 17A8      CP	R26,R24
    0099E 07B9      CPC	R27,R25
    0099F F4CC      BGE	0x09B9
    009A0 9611      ADIW	R26,1
    009A1 CFF5      RJMP	0x0997
    009A2 9580      COM	R24
    009A3 9590      COM	R25
    009A4 9601      ADIW	R24,1
    009A5 2322      TST	R18
    009A6 F0BA      BMI	0x09BE
    009A7 0F00      LSL	R16
    009A8 1F11      ROL	R17
    009A9 1F22      ROL	R18
    009AA 17A8      CP	R26,R24
    009AB 07B9      CPC	R27,R25
    009AC F014      BLT	0x09AF
    009AD 9711      SBIW	R26,1
    009AE CFF6      RJMP	0x09A5
    009AF 2700      CLR	R16
    009B0 2711      CLR	R17
    009B1 2722      CLR	R18
    009B2 2733      CLR	R19
    009B3 9189      LD	R24,Y+
    009B4 9199      LD	R25,Y+
    009B5 012D      MOVW	R4,R26
    009B6 91B9      LD	R27,Y+
    009B7 91A9      LD	R26,Y+
    009B8 9508      RET
    009B9 2733      CLR	R19
    009BA EF0F      LDI	R16,0xFF
    009BB 2F10      MOV	R17,R16
    009BC E72F      LDI	R18,0x7F
    009BD 2F32      MOV	R19,R18
    009BE 9189      LD	R24,Y+
    009BF 9199      LD	R25,Y+
    009C0 012D      MOVW	R4,R26
    009C1 C002      RJMP	0x09C4
pack:
    009C2 93AA      ST	-Y,R26
    009C3 93BA      ST	-Y,R27
    009C4 DFA7      RCALL	tstR16_R19
    009C5 F049      BEQ	0x09CF
    009C6 01D2      MOVW	R26,R4
    009C7 58A1      SUBI	R26,0x81
    009C8 4FBF      SBCI	R27,0xFF
    009C9 012D      MOVW	R4,R26
    009CA 2D34      MOV	R19,R4
    009CB 0F22      LSL	R18
    009CC 9536      LSR	R19
    009CD 9527      ROR	R18
    009CE 2936      OR	R19,R6
    009CF 91B9      LD	R27,Y+
    009D0 91A9      LD	R26,Y+
    009D1 9508      RET
saveFPRegs:
    009D2 924A      ST	-Y,R4
    009D3 925A      ST	-Y,R5
    009D4 926A      ST	-Y,R6
    009D5 927A      ST	-Y,R7
    009D6 928A      ST	-Y,R8
    009D7 929A      ST	-Y,R9
    009D8 92AA      ST	-Y,R10
    009D9 92BA      ST	-Y,R11
    009DA 92CA      ST	-Y,R12
    009DB 92DA      ST	-Y,R13
    009DC 92EA      ST	-Y,R14
    009DD 92FA      ST	-Y,R15
    009DE 938A      ST	-Y,R24
    009DF 939A      ST	-Y,R25
    009E0 9508      RET
restoreFPRegs:
    009E1 9199      LD	R25,Y+
    009E2 9189      LD	R24,Y+
    009E3 90F9      LD	R15,Y+
    009E4 90E9      LD	R14,Y+
    009E5 90D9      LD	R13,Y+
    009E6 90C9      LD	R12,Y+
    009E7 90B9      LD	R11,Y+
    009E8 90A9      LD	R10,Y+
    009E9 9099      LD	R9,Y+
    009EA 9089      LD	R8,Y+
    009EB 9079      LD	R7,Y+
    009EC 9069      LD	R6,Y+
    009ED 9059      LD	R5,Y+
    009EE 9049      LD	R4,Y+
    009EF 9508      RET
fpmule:
    009F0 940E 09D2 CALL	saveFPRegs
    009F2 93AA      ST	-Y,R26
    009F3 93BA      ST	-Y,R27
    009F4 940E 0974 CALL	unpacku
    009F6 F1E1      BEQ	0x0A33
    009F7 2CE6      MOV	R14,R6
    009F8 2CD5      MOV	R13,R5
    009F9 2CC4      MOV	R12,R4
    009FA 2EB3      MOV	R11,R19
    009FB 2EA2      MOV	R10,R18
    009FC 2E91      MOV	R9,R17
    009FD 2E80      MOV	R8,R16
    009FE 8100      LD	R16,Z
    009FF 8111      LDD	R17,Z+1
    00A00 8122      LDD	R18,Z+2
    00A01 8133      LDD	R19,Z+3
    00A02 940E 0974 CALL	unpacku
    00A04 F171      BEQ	0x0A33
    00A05 246E      EOR	R6,R14
    00A06 0C4C      ADD	R4,R12
    00A07 1C5D      ADC	R5,R13
    00A08 E880      LDI	R24,0x80
    00A09 1648      CP	R4,R24
    00A0A 0653      CPC	R5,R19
    00A0B F564      BGE	0x0A38
    00A0C E881      LDI	R24,0x81
    00A0D 1648      CP	R4,R24
    00A0E EF8F      LDI	R24,0xFF
    00A0F 0658      CPC	R5,R24
    00A10 F16C      BLT	0x0A3E
    00A11 9EA2      MUL	R10,R18
    00A12 2DB1      MOV	R27,R1
    00A13 2DA0      MOV	R26,R0
    00A14 9E91      MUL	R9,R17
    00A15 2D91      MOV	R25,R1
    00A16 2D80      MOV	R24,R0
    00A17 9EA0      MUL	R10,R16
    00A18 0D80      ADD	R24,R0
    00A19 1D91      ADC	R25,R1
    00A1A 1FA3      ADC	R26,R19
    00A1B 1FB3      ADC	R27,R19
    00A1C 9E82      MUL	R8,R18
    00A1D 0D80      ADD	R24,R0
    00A1E 1D91      ADC	R25,R1
    00A1F 1FA3      ADC	R26,R19
    00A20 1FB3      ADC	R27,R19
    00A21 9E92      MUL	R9,R18
    00A22 0D90      ADD	R25,R0
    00A23 1DA1      ADC	R26,R1
    00A24 1FB3      ADC	R27,R19
    00A25 9EA1      MUL	R10,R17
    00A26 0D90      ADD	R25,R0
    00A27 1DA1      ADC	R26,R1
    00A28 1FB3      ADC	R27,R19
    00A29 2F2B      MOV	R18,R27
    00A2A 2F1A      MOV	R17,R26
    00A2B 2F09      MOV	R16,R25
    00A2C 0F88      LSL	R24
    00A2D 1F00      ROL	R16
    00A2E 1F11      ROL	R17
    00A2F 1F22      ROL	R18
    00A30 1F33      ROL	R19
    00A31 940E 098D CALL	normalize_and_pack
    00A33 91B9      LD	R27,Y+
    00A34 91A9      LD	R26,Y+
    00A35 940E 09E1 CALL	restoreFPRegs
    00A37 9508      RET
    00A38 EF0F      LDI	R16,0xFF
    00A39 2F10      MOV	R17,R16
    00A3A E72F      LDI	R18,0x7F
    00A3B E78F      LDI	R24,0x7F
    00A3C 2E48      MOV	R4,R24
    00A3D CFF5      RJMP	0x0A33
    00A3E 2700      CLR	R16
    00A3F 2F10      MOV	R17,R16
    00A40 2F20      MOV	R18,R16
    00A41 2F30      MOV	R19,R16
    00A42 CFF0      RJMP	0x0A33
fpmule2:
    00A43 93FA      ST	-Y,R31
    00A44 93EA      ST	-Y,R30
    00A45 2FEC      MOV	R30,R28
    00A46 2FFD      MOV	R31,R29
    00A47 9632      ADIW	R30,2
    00A48 940E 09F0 CALL	fpmule
    00A4A 91E9      LD	R30,Y+
    00A4B 91F9      LD	R31,Y+
    00A4C 9624      ADIW	R28,4
    00A4D 9508      RET
