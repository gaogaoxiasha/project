Interrupt Vectors
    00000 940C 00C0 JMP	__text_start|__start
    00010 940C 0786 JMP	_timer1_ovf_isr

Program Code (text area)
__text_start|__start:
    000C0 E5CF      LDI	R28,0x5F
    000C1 E0D4      LDI	R29,4
    000C2 BFCD      OUT	0x3D,R28
    000C3 BFDE      OUT	0x3E,R29
    000C4 51CE      SUBI	R28,0x1E
    000C5 40D0      SBCI	R29,0
    000C6 EA0A      LDI	R16,0xAA
    000C7 8308      ST	Y,R16
    000C8 2400      CLR	R0
    000C9 E3EB      LDI	R30,0x3B
    000CA E0F1      LDI	R31,1
    000CB E011      LDI	R17,1
    000CC 33EB      CPI	R30,0x3B
    000CD 07F1      CPC	R31,R17
    000CE F011      BEQ	0x00D1
    000CF 9201      ST	Z+,R0
    000D0 CFFB      RJMP	0x00CC
    000D1 8300      ST	Z,R16
    000D2 EAE4      LDI	R30,0xA4
    000D3 E0F0      LDI	R31,0
    000D4 E6A0      LDI	R26,0x60
    000D5 E0B0      LDI	R27,0
    000D6 E011      LDI	R17,1
    000D7 E000      LDI	R16,0
    000D8 BF0B      OUT	0x3B,R16
    000D9 37EF      CPI	R30,0x7F
    000DA 07F1      CPC	R31,R17
    000DB F021      BEQ	0x00E0
    000DC 95C8      LPM
    000DD 9631      ADIW	R30,1
    000DE 920D      ST	X+,R0
    000DF CFF9      RJMP	0x00D9
    000E0 940E 012D CALL	_main
_exit:
    000E2 CFFF      RJMP	_exit
FILE: C:\Users\HaiPiao\Desktop\附小实验\程序\project\main.c
(0001) //ICC-AVR application builder : 2014/7/22 19:16:57
(0002) // Target : M16
(0003) // Crystal: 7.3728Mhz
(0004) 
(0005) #include "Includes.h"
(0006) 
(0007) #define Max_note      100
(0008) 
(0009) unsigned int note_n = 0;
(0010) unsigned int int_n = 0;
(0011) INT16U distance_mm = 0;//距离
(0012) 		 
(0013) void LEDOnBoardInit(void)
(0014) {
(0015)     DDRC |= (0x01<<6)|(0x01<<7);
_LEDOnBoardInit:
    000E3 B384      IN	R24,0x14
    000E4 6C80      ORI	R24,0xC0
    000E5 BB84      OUT	0x14,R24
(0016) 	//PORTC |= (0x01<<6)|(0x01<<7);
(0017) 	PORTC &= ~((0x01<<6)|(0x01<<7));
    000E6 B385      IN	R24,0x15
    000E7 738F      ANDI	R24,0x3F
    000E8 BB85      OUT	0x15,R24
    000E9 9508      RET
(0018) }
(0019) void SET_LED_D10(unsigned char state)
(0020) {
(0021)  	PORTC = PORTC&(~(0X01<<6))|(state<<6);
_SET_LED_D10:
  state                --> R16
    000EA 2E20      MOV	R2,R16
    000EB 0C22      LSL	R2
    000EC 0C22      LSL	R2
    000ED 0C22      LSL	R2
    000EE 0C22      LSL	R2
    000EF 0C22      LSL	R2
    000F0 0C22      LSL	R2
    000F1 B385      IN	R24,0x15
    000F2 7B8F      ANDI	R24,0xBF
    000F3 2982      OR	R24,R2
    000F4 BB85      OUT	0x15,R24
    000F5 9508      RET
(0022) }
(0023) void SET_LED_D11(unsigned char state)
(0024) {
(0025)  	PORTC = PORTC&(~(0X01<<7))|(state<<7);
_SET_LED_D11:
  state                --> R16
    000F6 2E20      MOV	R2,R16
    000F7 0C22      LSL	R2
    000F8 0C22      LSL	R2
    000F9 0C22      LSL	R2
    000FA 0C22      LSL	R2
    000FB 0C22      LSL	R2
    000FC 0C22      LSL	R2
    000FD 0C22      LSL	R2
    000FE B385      IN	R24,0x15
    000FF 778F      ANDI	R24,0x7F
    00100 2982      OR	R24,R2
    00101 BB85      OUT	0x15,R24
    00102 9508      RET
(0026) }
(0027) unsigned int t[28] = {0,3824,3460,3036,2864,2552,2272,2024,0,0,0,     //中音0-7
(0028)                         1880,1702,1517,1431,1275,1136,1012,0,0,0,     //高音11-17   频率
(0029) 						7633,6802,6060,5730,5102,4545,4048};          //低音21-27
(0030) 						
(0031) unsigned int d[28] = {0, 105, 116, 132, 140, 157, 176, 198,0,0,0,     //中音0-7
(0032)                          209, 234, 263, 279, 313, 352, 395,0,0,0,     //高音11-17   节拍
(0033) 						  52,  58,  66,  70,  78,  88,  98};          //低音21-27
(0034) 
(0035) unsigned char music[Max_note] = { 5,4, 5,4, 6,8, 5,8,11,8, 7,16,
(0036)                                   5,4, 5,4, 6,8, 5,8,12,8,11,16,
(0037) 								  5,4, 5,4,15,8,13,8,11,8, 7,8, 6,16,
(0038) 								 14,4,14,4,13,8,11,8,12,8,11,16,
(0039) 								 5,4, 5,4, 6,8, 5,8,11,8, 7,16,
(0040)                                   5,4, 5,4, 6,8, 5,8,12,8,11,16,
(0041) 								  5,4, 5,4,15,8,13,8,11,8, 7,8, 6,16,
(0042) 								 14,4,14,4,13,8,11,8,12,8,11,16};//祝你生日快乐100
(0043) 						  
(0044) 
(0045) 
(0046) 
(0047) void port_init(void)
(0048) {
(0049)  PORTA = 0x00;
_port_init:
    00103 2422      CLR	R2
    00104 BA2B      OUT	0x1B,R2
(0050)  DDRA  = 0x00;
    00105 BA2A      OUT	0x1A,R2
(0051)  PORTB = 0x00;
    00106 BA28      OUT	0x18,R2
(0052)  DDRB  = 0x00;
    00107 BA27      OUT	0x17,R2
(0053)  PORTC = 0x00; //m103 output only
    00108 BA25      OUT	0x15,R2
(0054)  DDRC  = 0x00;
    00109 BA24      OUT	0x14,R2
(0055)  PORTD = 0x00;
    0010A BA22      OUT	0x12,R2
(0056)  DDRD  = 0x00;
    0010B BA21      OUT	0x11,R2
    0010C 9508      RET
(0057)  }
(0058)  
(0059)  
(0060) //TIMER2 initialize - prescale:1024
(0061) // WGM: CTC
(0062) // desired value: 100Hz
(0063) // actual value: 98.630Hz (1.4%)
(0064) void timer2_50Hz(void)
(0065) {
(0066)  TCCR2 = 0x00; //stop
_timer2_50Hz:
    0010D 2422      CLR	R2
    0010E BC25      OUT	0x25,R2
(0067)  ASSR  = 0x00; //set async mode
    0010F BC22      OUT	0x22,R2
(0068)  TCNT2 = 0xB8; //setup
    00110 EB88      LDI	R24,0xB8
    00111 BD84      OUT	0x24,R24
(0069)  OCR2  = 0x48;
    00112 E488      LDI	R24,0x48
    00113 BD83      OUT	0x23,R24
(0070)  TCCR2 = 0x1F; //start
    00114 E18F      LDI	R24,0x1F
    00115 BD85      OUT	0x25,R24
    00116 9508      RET
(0071) }
(0072) 
(0073) //TIMER2 initialize - prescale:256
(0074) // WGM: CTC
(0075) // desired value: 200Hz
(0076) // actual value: 198.621Hz (0.7%)
(0077) void timer2_100Hz(void)
(0078) {
(0079)  TCCR2 = 0x00; //stop
_timer2_100Hz:
    00117 2422      CLR	R2
    00118 BC25      OUT	0x25,R2
(0080)  ASSR  = 0x00; //set async mode
    00119 BC22      OUT	0x22,R2
(0081)  TCNT2 = 0x70; //setup
    0011A E780      LDI	R24,0x70
    0011B BD84      OUT	0x24,R24
(0082)  OCR2  = 0x90;
    0011C E980      LDI	R24,0x90
    0011D BD83      OUT	0x23,R24
(0083)  TCCR2 = 0x1E; //start
    0011E E18E      LDI	R24,0x1E
    0011F BD85      OUT	0x25,R24
    00120 9508      RET
(0084) }
(0085) 
(0086) 
(0087) //call this routine to initialize all peripherals
(0088) void init_devices(void)
(0089) {
(0090)  //stop errant interrupts until set up
(0091)  CLI(); //disable all interrupts
_init_devices:
    00121 94F8      BCLR	7
(0092)  port_init(); 
    00122 DFE0      RCALL	_port_init
(0093)  LEDOnBoardInit();
    00123 DFBF      RCALL	_LEDOnBoardInit
(0094)  init_7279(); 
    00124 940E 0309 CALL	_init_7279
(0095) 
(0096)  //timer2_init();
(0097)   
(0098)  MCUCR = 0x00;
    00126 2422      CLR	R2
    00127 BE25      OUT	0x35,R2
(0099)  GICR  = 0x00;
    00128 BE2B      OUT	0x3B,R2
(0100)  TIMSK = 0x80; //timer interrupt sources
    00129 E880      LDI	R24,0x80
    0012A BF89      OUT	0x39,R24
(0101)  SEI(); //re-enable interrupts
    0012B 9478      BSET	7
    0012C 9508      RET
_main:
  CH                   --> R22
  temp_yz              --> R10
  led                  --> R20
  temp                 --> R20
    0012D 9726      SBIW	R28,6
(0102)  //all peripherals are now initialized
(0103) }
(0104) 
(0105) void main(void)
(0106) {
(0107)   int temp,temp_yz;
(0108)   int CH;
(0109)   int led=0; 
    0012E 2744      CLR	R20
    0012F 2755      CLR	R21
(0110)   init_devices();
    00130 DFF0      RCALL	_init_devices
(0111)   Delay_ms(20);      
    00131 E104      LDI	R16,0x14
    00132 E010      LDI	R17,0
    00133 940E 0742 CALL	_Delay_ms
(0112)   
(0113) 
(0114)   /*
(0115)   */
(0116)   CH = get_data(0,0);
    00135 2722      CLR	R18
    00136 2700      CLR	R16
    00137 940E 0654 CALL	_get_data
    00139 01B8      MOVW	R22,R16
(0117)  // CH = 7;
(0118)   switch (CH)
    0013A 3000      CPI	R16,0
    0013B 0701      CPC	R16,R17
    0013C F0F9      BEQ	0x015C
    0013D 3004      CPI	R16,4
    0013E E0E0      LDI	R30,0
    0013F 071E      CPC	R17,R30
    00140 F409      BNE	0x0142
    00141 C055      RJMP	0x0197
    00142 3005      CPI	R16,5
    00143 E0E0      LDI	R30,0
    00144 071E      CPC	R17,R30
    00145 F409      BNE	0x0147
    00146 C0CA      RJMP	0x0211
    00147 3006      CPI	R16,6
    00148 E0E0      LDI	R30,0
    00149 071E      CPC	R17,R30
    0014A F409      BNE	0x014C
    0014B C0EA      RJMP	0x0236
    0014C 3007      CPI	R16,7
    0014D E0E0      LDI	R30,0
    0014E 071E      CPC	R17,R30
    0014F F409      BNE	0x0151
    00150 C0FB      RJMP	0x024C
    00151 3000      CPI	R16,0
    00152 E0E0      LDI	R30,0
    00153 071E      CPC	R17,R30
    00154 F40C      BGE	0x0156
    00155 C1A5      RJMP	0x02FB
    00156 306D      CPI	R22,0xD
    00157 E0E0      LDI	R30,0
    00158 077E      CPC	R23,R30
    00159 F409      BNE	0x015B
    0015A C107      RJMP	0x0262
    0015B C19F      RJMP	0x02FB
(0119)   {
(0120)    case 0://LED模式
(0121)      {	  
(0122) 	  DDRB = 0xFF;
    0015C EF8F      LDI	R24,0xFF
    0015D BB87      OUT	0x17,R24
(0123)       PORTB = 0XFF;
    0015E BB88      OUT	0x18,R24
(0124)       DDRD = 0XFF;
    0015F BB81      OUT	0x11,R24
(0125) 	  PORTD = 0XFF;
    00160 BB82      OUT	0x12,R24
    00161 C034      RJMP	0x0196
(0126)       
(0127) 	  while(1)
(0128) 	  {
(0129) 	   if(led<8)
    00162 3048      CPI	R20,0x8
    00163 E0E0      LDI	R30,0
    00164 075E      CPC	R21,R30
    00165 F494      BGE	0x0178
(0130) 	   {
(0131) 	    PORTD = 0XFF;
    00166 EF8F      LDI	R24,0xFF
    00167 BB82      OUT	0x12,R24
(0132) 		PORTB = ~(1<<led);
    00168 E001      LDI	R16,1
    00169 E010      LDI	R17,0
    0016A 019A      MOVW	R18,R20
    0016B 940E 0930 CALL	lsl16
    0016D 0118      MOVW	R2,R16
    0016E 9420      COM	R2
    0016F 9430      COM	R3
    00170 BA28      OUT	0x18,R2
(0133) 		Delay_ms(200);
    00171 EC08      LDI	R16,0xC8
    00172 E010      LDI	R17,0
    00173 940E 0742 CALL	_Delay_ms
(0134) 		led++;
    00175 5F4F      SUBI	R20,0xFF
    00176 4F5F      SBCI	R21,0xFF
(0135) 	   }
    00177 C01E      RJMP	0x0196
(0136) 	   else if((led>=8)&&(led<16))
    00178 3048      CPI	R20,0x8
    00179 E0E0      LDI	R30,0
    0017A 075E      CPC	R21,R30
    0017B F0C4      BLT	0x0194
    0017C 3140      CPI	R20,0x10
    0017D E0E0      LDI	R30,0
    0017E 075E      CPC	R21,R30
    0017F F4A4      BGE	0x0194
(0137) 	   {
(0138) 	    PORTB = 0XFF;
    00180 EF8F      LDI	R24,0xFF
    00181 BB88      OUT	0x18,R24
(0139) 		PORTD = ~(1<<(led-8));
    00182 019A      MOVW	R18,R20
    00183 5028      SUBI	R18,0x8
    00184 4030      SBCI	R19,0
    00185 E001      LDI	R16,1
    00186 E010      LDI	R17,0
    00187 940E 0930 CALL	lsl16
    00189 0118      MOVW	R2,R16
    0018A 9420      COM	R2
    0018B 9430      COM	R3
    0018C BA22      OUT	0x12,R2
(0140) 		Delay_ms(200);
    0018D EC08      LDI	R16,0xC8
    0018E E010      LDI	R17,0
    0018F 940E 0742 CALL	_Delay_ms
(0141) 		led++;
    00191 5F4F      SUBI	R20,0xFF
    00192 4F5F      SBCI	R21,0xFF
(0142) 	   }
    00193 C002      RJMP	0x0196
(0143) 	   else
(0144) 	   {
(0145) 	    led=0;
    00194 2744      CLR	R20
    00195 2755      CLR	R21
    00196 CFCB      RJMP	0x0162
(0146) 	   } 
(0147) 	  }	   
(0148) 	 };
(0149) 	 break;
(0150) 	 
(0151)    case 4://温度传感器模式，显示温度值
(0152)      {
(0153) 	  dis_data(7,7,4);
    00197 E084      LDI	R24,4
    00198 8388      ST	Y,R24
    00199 E080      LDI	R24,0
    0019A 8389      STD	Y+1,R24
    0019B 838A      STD	Y+2,R24
    0019C 838B      STD	Y+3,R24
    0019D E027      LDI	R18,7
    0019E E007      LDI	R16,7
    0019F 940E 05B9 CALL	_dis_data
(0154) 	  DS18B20Init();
    001A1 940E 06A9 CALL	_DS18B20Init
    001A3 C06C      RJMP	0x0210
(0155) 	  while(1)
(0156) 	  {
(0157) 	   temp=gettemp();//读取到的温度数据
    001A4 940E 06F3 CALL	_gettemp
    001A6 01A8      MOVW	R20,R16
(0158)        Delay_ms(100);
    001A7 E604      LDI	R16,0x64
    001A8 E010      LDI	R17,0
    001A9 940E 0742 CALL	_Delay_ms
(0159)    
(0160)        if(temp >= 0xf800)//如果为零下，求补码
    001AB 3040      CPI	R20,0
    001AC EFE8      LDI	R30,0xF8
    001AD 075E      CPC	R21,R30
    001AE F160      BCS	0x01DB
(0161)        {
(0162)         temp = temp - 0XF800;   //去掉5个符号位
    001AF 5040      SUBI	R20,0
    001B0 4F58      SBCI	R21,0xF8
(0163) 	    temp = 0x800 - temp;    //求出补码
    001B1 E080      LDI	R24,0
    001B2 E098      LDI	R25,0x8
    001B3 1B84      SUB	R24,R20
    001B4 0B95      SBC	R25,R21
    001B5 01AC      MOVW	R20,R24
(0164) 	    temp = (temp*6.25)/10;  //计算温度值，应该乘0.0625，现在乘0.625可以显示一位小数位
    001B6 E900      LDI	R16,0x90
    001B7 E010      LDI	R17,0
    001B8 940E 091C CALL	lpm32
    001BA 0118      MOVW	R2,R16
    001BB 0129      MOVW	R4,R18
    001BC 018A      MOVW	R16,R20
    001BD 940E 096B CALL	int2fp
    001BF 933A      ST	-Y,R19
    001C0 932A      ST	-Y,R18
    001C1 931A      ST	-Y,R17
    001C2 930A      ST	-Y,R16
    001C3 0181      MOVW	R16,R2
    001C4 0192      MOVW	R18,R4
    001C5 940E 0B06 CALL	fpmule2
    001C7 0118      MOVW	R2,R16
    001C8 0129      MOVW	R4,R18
    001C9 E80C      LDI	R16,0x8C
    001CA E010      LDI	R17,0
    001CB 940E 091C CALL	lpm32
    001CD 933A      ST	-Y,R19
    001CE 932A      ST	-Y,R18
    001CF 931A      ST	-Y,R17
    001D0 930A      ST	-Y,R16
    001D1 0181      MOVW	R16,R2
    001D2 0192      MOVW	R18,R4
    001D3 940E 0996 CALL	fpdiv2
    001D5 940E 0937 CALL	fpint
    001D7 01A8      MOVW	R20,R16
(0165) 	    temp = (1000*16)+temp;	//在最高位显示负号
    001D8 5840      SUBI	R20,0x80
    001D9 4C51      SBCI	R21,0xC1
(0166) 	   }
    001DA C022      RJMP	0x01FD
(0167)        else
(0168)        {
(0169)         temp = (temp*6.25)/10;//如果为正，补码为它本身，直接转换为温度值进行显示		
    001DB E900      LDI	R16,0x90
    001DC E010      LDI	R17,0
    001DD 940E 091C CALL	lpm32
    001DF 0118      MOVW	R2,R16
    001E0 0129      MOVW	R4,R18
    001E1 018A      MOVW	R16,R20
    001E2 940E 096B CALL	int2fp
    001E4 933A      ST	-Y,R19
    001E5 932A      ST	-Y,R18
    001E6 931A      ST	-Y,R17
    001E7 930A      ST	-Y,R16
    001E8 0181      MOVW	R16,R2
    001E9 0192      MOVW	R18,R4
    001EA 940E 0B06 CALL	fpmule2
    001EC 0118      MOVW	R2,R16
    001ED 0129      MOVW	R4,R18
    001EE E80C      LDI	R16,0x8C
    001EF E010      LDI	R17,0
    001F0 940E 091C CALL	lpm32
    001F2 933A      ST	-Y,R19
    001F3 932A      ST	-Y,R18
    001F4 931A      ST	-Y,R17
    001F5 930A      ST	-Y,R16
    001F6 0181      MOVW	R16,R2
    001F7 0192      MOVW	R18,R4
    001F8 940E 0996 CALL	fpdiv2
    001FA 940E 0937 CALL	fpint
    001FC 01A8      MOVW	R20,R16
(0170)        }    
(0171) 	   dis_data_RP(0,3,temp,1);//显示温度值	   
    001FD E081      LDI	R24,1
    001FE E090      LDI	R25,0
    001FF 839D      STD	Y+5,R25
    00200 838C      STD	Y+4,R24
    00201 011A      MOVW	R2,R20
    00202 2444      CLR	R4
    00203 FC37      SBRC	R3,7
    00204 9440      COM	R4
    00205 2455      CLR	R5
    00206 FC47      SBRC	R4,7
    00207 9450      COM	R5
    00208 8228      ST	Y,R2
    00209 8239      STD	Y+1,R3
    0020A 824A      STD	Y+2,R4
    0020B 825B      STD	Y+3,R5
    0020C E023      LDI	R18,3
    0020D 2700      CLR	R16
    0020E 940E 05FE CALL	_dis_data_RP
    00210 CF93      RJMP	0x01A4
(0172) 	  }	   
(0173) 	 };
(0174) 	 break;
(0175) 	 
(0176) 	 case 5://温度传感器模式，显示温度值
(0177)      {
(0178) 	     HC_SR04_Init();
    00211 940E 076F CALL	_HC_SR04_Init
(0179) 		 CLI();
    00213 94F8      BCLR	7
(0180) 		 timer1_init();
    00214 940E 0773 CALL	_timer1_init
(0181) 		 MCUCR = 0x00;
    00216 2422      CLR	R2
    00217 BE25      OUT	0x35,R2
(0182)  		 GICR  = 0x00;
    00218 BE2B      OUT	0x3B,R2
(0183)  		 TIMSK |= (0x01<<2); //溢出中断使能
    00219 B789      IN	R24,0x39
    0021A 6084      ORI	R24,4
    0021B BF89      OUT	0x39,R24
(0184) 		 SEI();
    0021C 9478      BSET	7
    0021D C017      RJMP	0x0235
(0185) 		 while(1)
(0186) 		 {
(0187) 		     
(0188) 		     distance_mm = (INT16U)GetDistance();//单位mm
    0021E 940E 0796 CALL	_GetDistance
    00220 940E 0937 CALL	fpint
    00222 9310 0065 STS	distance_mm+1,R17
    00224 9300 0064 STS	distance_mm,R16
(0189) 			 dis_data(0,3,distance_mm);
    00226 0118      MOVW	R2,R16
    00227 2444      CLR	R4
    00228 2455      CLR	R5
    00229 8228      ST	Y,R2
    0022A 8239      STD	Y+1,R3
    0022B 824A      STD	Y+2,R4
    0022C 825B      STD	Y+3,R5
    0022D E023      LDI	R18,3
    0022E 2700      CLR	R16
    0022F 940E 05B9 CALL	_dis_data
(0190) 			 Delay_ms(100);
    00231 E604      LDI	R16,0x64
    00232 E010      LDI	R17,0
    00233 940E 0742 CALL	_Delay_ms
    00235 CFE8      RJMP	0x021E
(0191) 		 }
(0192) 	 }
(0193) 	 
(0194) 	 case 6:
(0195) 	 {
(0196)  		 MH_B_Init();
    00236 940E 0303 CALL	_MH_B_Init
(0197) 		 SET_LED_D11(1);
    00238 E001      LDI	R16,1
    00239 DEBC      RCALL	_SET_LED_D11
(0198) 		 Delay_ms(100);
    0023A E604      LDI	R16,0x64
    0023B E010      LDI	R17,0
    0023C 940E 0742 CALL	_Delay_ms
    0023E C00C      RJMP	0x024B
(0199) 	     while(1)
(0200)   		 {
(0201)       	    if(!Read_MH_B())
    0023F 940E 0305 CALL	_Read_MH_B
    00241 2300      TST	R16
    00242 F431      BNE	0x0249
(0202) 	  		{
(0203)           	   SET_LED_D11(1);
    00243 E001      LDI	R16,1
    00244 DEB1      RCALL	_SET_LED_D11
(0204) 		   	   Delay_ms(20);
    00245 E104      LDI	R16,0x14
    00246 E010      LDI	R17,0
    00247 940E 0742 CALL	_Delay_ms
(0205) 	  		}
(0206) 	  		SET_LED_D11(0);
    00249 2700      CLR	R16
    0024A DEAB      RCALL	_SET_LED_D11
    0024B CFF3      RJMP	0x023F
(0207)   	     }
(0208) 	 };
(0209) 	 case 7:
(0210) 	 {	  	  
(0211) 	     FC04Init();
    0024C 940E 02FD CALL	_FC04Init
(0212) 		 SET_LED_D10(1);
    0024E E001      LDI	R16,1
    0024F DE9A      RCALL	_SET_LED_D10
(0213) 		 Delay_ms(100);
    00250 E604      LDI	R16,0x64
    00251 E010      LDI	R17,0
    00252 940E 0742 CALL	_Delay_ms
    00254 C00C      RJMP	0x0261
(0214) 	     while(1)
(0215)   		 {
(0216)       	   if(!Read_FC04())
    00255 940E 02FF CALL	_Read_FC04
    00257 2300      TST	R16
    00258 F431      BNE	0x025F
(0217) 	  	   {
(0218)              SET_LED_D10(1);
    00259 E001      LDI	R16,1
    0025A DE8F      RCALL	_SET_LED_D10
(0219) 		  	 Delay_ms(20);
    0025B E104      LDI	R16,0x14
    0025C E010      LDI	R17,0
    0025D 940E 0742 CALL	_Delay_ms
(0220) 	       }
(0221) 	  	   SET_LED_D10(0);
    0025F 2700      CLR	R16
    00260 DE89      RCALL	_SET_LED_D10
    00261 CFF3      RJMP	0x0255
(0222)   		 }
(0223) 	 };
(0224) 	 break;
(0225) 	 
(0226) 	 case 13://d 温度报警模式，设置阈值温度，超过温度进行报警
(0227)      {
(0228) 	  DS18B20Init();
    00262 940E 06A9 CALL	_DS18B20Init
(0229) 	  temp_yz = get_data(0,2);//温度阈值
    00264 E022      LDI	R18,2
    00265 2700      CLR	R16
    00266 940E 0654 CALL	_get_data
    00268 0158      MOVW	R10,R16
(0230) 	  temp_yz = temp_yz*10;	  
    00269 E00A      LDI	R16,0xA
    0026A E010      LDI	R17,0
    0026B 0195      MOVW	R18,R10
    0026C 940E 086D CALL	empy16s
    0026E 0158      MOVW	R10,R16
    0026F C08A      RJMP	0x02FA
(0231) 	  
(0232) 	  while(1)
(0233) 	  {
(0234) 	   temp=gettemp();//读取到的温度数据
    00270 940E 06F3 CALL	_gettemp
    00272 01A8      MOVW	R20,R16
(0235)        Delay_ms(100);
    00273 E604      LDI	R16,0x64
    00274 E010      LDI	R17,0
    00275 940E 0742 CALL	_Delay_ms
(0236) 	   
(0237)        if(temp >= 0xf800)//如果为零下，求补码
    00277 3040      CPI	R20,0
    00278 EFE8      LDI	R30,0xF8
    00279 075E      CPC	R21,R30
    0027A F160      BCS	0x02A7
(0238)        {
(0239)         temp = temp - 0XF800;   //去掉5个符号位
    0027B 5040      SUBI	R20,0
    0027C 4F58      SBCI	R21,0xF8
(0240) 	    temp = 0x800 - temp;    //求出补码
    0027D E080      LDI	R24,0
    0027E E098      LDI	R25,0x8
    0027F 1B84      SUB	R24,R20
    00280 0B95      SBC	R25,R21
    00281 01AC      MOVW	R20,R24
(0241) 	    temp = (temp*6.25)/10;  //计算温度值，应该乘0.0625，现在乘0.625可以显示一位小数位
    00282 E900      LDI	R16,0x90
    00283 E010      LDI	R17,0
    00284 940E 091C CALL	lpm32
    00286 0118      MOVW	R2,R16
    00287 0129      MOVW	R4,R18
    00288 018A      MOVW	R16,R20
    00289 940E 096B CALL	int2fp
    0028B 933A      ST	-Y,R19
    0028C 932A      ST	-Y,R18
    0028D 931A      ST	-Y,R17
    0028E 930A      ST	-Y,R16
    0028F 0181      MOVW	R16,R2
    00290 0192      MOVW	R18,R4
    00291 940E 0B06 CALL	fpmule2
    00293 0118      MOVW	R2,R16
    00294 0129      MOVW	R4,R18
    00295 E80C      LDI	R16,0x8C
    00296 E010      LDI	R17,0
    00297 940E 091C CALL	lpm32
    00299 933A      ST	-Y,R19
    0029A 932A      ST	-Y,R18
    0029B 931A      ST	-Y,R17
    0029C 930A      ST	-Y,R16
    0029D 0181      MOVW	R16,R2
    0029E 0192      MOVW	R18,R4
    0029F 940E 0996 CALL	fpdiv2
    002A1 940E 0937 CALL	fpint
    002A3 01A8      MOVW	R20,R16
(0242) 	    temp = (1000*16)+temp;	//在最高位显示负号
    002A4 5840      SUBI	R20,0x80
    002A5 4C51      SBCI	R21,0xC1
(0243) 	   }
    002A6 C022      RJMP	0x02C9
(0244)        else
(0245)        {
(0246)         temp = (temp*6.25)/10;//如果为正，补码为它本身，直接转换为温度值进行显示		
    002A7 E900      LDI	R16,0x90
    002A8 E010      LDI	R17,0
    002A9 940E 091C CALL	lpm32
    002AB 0118      MOVW	R2,R16
    002AC 0129      MOVW	R4,R18
    002AD 018A      MOVW	R16,R20
    002AE 940E 096B CALL	int2fp
    002B0 933A      ST	-Y,R19
    002B1 932A      ST	-Y,R18
    002B2 931A      ST	-Y,R17
    002B3 930A      ST	-Y,R16
    002B4 0181      MOVW	R16,R2
    002B5 0192      MOVW	R18,R4
    002B6 940E 0B06 CALL	fpmule2
    002B8 0118      MOVW	R2,R16
    002B9 0129      MOVW	R4,R18
    002BA E80C      LDI	R16,0x8C
    002BB E010      LDI	R17,0
    002BC 940E 091C CALL	lpm32
    002BE 933A      ST	-Y,R19
    002BF 932A      ST	-Y,R18
    002C0 931A      ST	-Y,R17
    002C1 930A      ST	-Y,R16
    002C2 0181      MOVW	R16,R2
    002C3 0192      MOVW	R18,R4
    002C4 940E 0996 CALL	fpdiv2
    002C6 940E 0937 CALL	fpint
    002C8 01A8      MOVW	R20,R16
(0247)        }/**/   	   
(0248)   
(0249)        if(temp > temp_yz)
    002C9 16A4      CP	R10,R20
    002CA 06B5      CPC	R11,R21
    002CB F41C      BGE	0x02CF
(0250) 	   {
(0251) 	    PORTC |= (1<<6);PORTC |= (1<<7);	   
    002CC 9AAE      SBI	0x15,6
    002CD 9AAF      SBI	0x15,7
(0252) 	   }
    002CE C005      RJMP	0x02D4
(0253) 	   else if(temp <= temp_yz)
    002CF 16A4      CP	R10,R20
    002D0 06B5      CPC	R11,R21
    002D1 F014      BLT	0x02D4
(0254) 	   {
(0255) 	    PORTC &= ~(1<<7);PORTC &= ~(1<<6);
    002D2 98AF      CBI	0x15,7
    002D3 98AE      CBI	0x15,6
(0256) 	   }	   
(0257) 	    
(0258) 	   dis_data_RP(0,3,temp,1);//显示温度值	  
    002D4 E081      LDI	R24,1
    002D5 E090      LDI	R25,0
    002D6 839D      STD	Y+5,R25
    002D7 838C      STD	Y+4,R24
    002D8 011A      MOVW	R2,R20
    002D9 2444      CLR	R4
    002DA FC37      SBRC	R3,7
    002DB 9440      COM	R4
    002DC 2455      CLR	R5
    002DD FC47      SBRC	R4,7
    002DE 9450      COM	R5
    002DF 8228      ST	Y,R2
    002E0 8239      STD	Y+1,R3
    002E1 824A      STD	Y+2,R4
    002E2 825B      STD	Y+3,R5
    002E3 E023      LDI	R18,3
    002E4 2700      CLR	R16
    002E5 940E 05FE CALL	_dis_data_RP
(0259) 	   dis_data_RP(4,7,temp_yz,5);	   
    002E7 E085      LDI	R24,5
    002E8 E090      LDI	R25,0
    002E9 839D      STD	Y+5,R25
    002EA 838C      STD	Y+4,R24
    002EB 0115      MOVW	R2,R10
    002EC 2444      CLR	R4
    002ED FC37      SBRC	R3,7
    002EE 9440      COM	R4
    002EF 2455      CLR	R5
    002F0 FC47      SBRC	R4,7
    002F1 9450      COM	R5
    002F2 8228      ST	Y,R2
    002F3 8239      STD	Y+1,R3
    002F4 824A      STD	Y+2,R4
    002F5 825B      STD	Y+3,R5
    002F6 E027      LDI	R18,7
    002F7 E004      LDI	R16,4
    002F8 940E 05FE CALL	_dis_data_RP
    002FA CF75      RJMP	0x0270
    002FB 9626      ADIW	R28,6
    002FC 9508      RET
FILE: C:\Users\HaiPiao\Desktop\附小实验\程序\project\FC04.c
(0001) /*******************************************************************************
(0002) **  MCU        : ATmega16 (Atmel)
(0003) **  Compiler   : ICCAVR 7.22
(0004) **  Module Name: FC4.c
(0005) **  Module Date: 2015-10-16
(0006) **  Module Auth: 蔡海飘
(0007) **  Description: 咪头
(0008) **  Version    : V1.0
(0009) **  Notes      : 
(0010) **------------------------------------------------------------------------------
(0011) /*----------------------------  I N C L U D E S  -----------------------------*/
(0012) #include "FC04.h"
(0013) 
(0014) /*--------------------------  D E F I N I T I O N  ---------------------------*/
(0015) 
(0016) /*---------------------------  F U N C T I O N S  ----------------------------*/
(0017) void FC04Init(void)
(0018) {
(0019)  	 DDRD &= ~(0x01<<1);
_FC04Init:
    002FD 9889      CBI	0x11,1
    002FE 9508      RET
(0020) }  
(0021) 
(0022) unsigned char Read_FC04(void)  
(0023) {
(0024)     unsigned char state = 0;
_Read_FC04:
  state                --> R16
    002FF 2700      CLR	R16
(0025) 	state = PIND&(0x01<<1);
    00300 B300      IN	R16,0x10
    00301 7002      ANDI	R16,2
(0026) 	return state;
    00302 9508      RET
FILE: C:\Users\HaiPiao\Desktop\附小实验\程序\project\MH_B.c
(0001) /*******************************************************************************
(0002) **  MCU        : ATmega16 (Atmel)
(0003) **  Compiler   : ICCAVR 7.22
(0004) **  Module Name: MH_B.c
(0005) **  Module Date: 2015-10-16
(0006) **  Module Auth: 蔡海飘
(0007) **  Description: 红外传感器
(0008) **  Version    : V1.0
(0009) **  Notes      : 
(0010) **------------------------------------------------------------------------------
(0011) /*----------------------------  I N C L U D E S  -----------------------------*/
(0012) #include "MH_B.h"
(0013) 
(0014) /*--------------------------  D E F I N I T I O N  ---------------------------*/
(0015) 
(0016) /*---------------------------  F U N C T I O N S  ----------------------------*/
(0017) void MH_B_Init(void)
(0018) {
(0019)  	 DDRA &= ~(0x01<<6);
_MH_B_Init:
    00303 98D6      CBI	0x1A,6
    00304 9508      RET
(0020) }  
(0021) 
(0022) unsigned char Read_MH_B(void)  
(0023) {
(0024)     unsigned char state = 0;
_Read_MH_B:
  state                --> R16
    00305 2700      CLR	R16
(0025) 	state = PINA&(0x01<<6);
    00306 B309      IN	R16,0x19
    00307 7400      ANDI	R16,0x40
(0026) 	return state;
    00308 9508      RET
_init_7279:
  tmr                  --> R20
    00309 934A      ST	-Y,R20
    0030A 935A      ST	-Y,R21
FILE: C:\Users\HaiPiao\Desktop\附小实验\程序\声音+红外\HD7279.C
(0001) /********************************************************
(0002) 
(0003) 电子技术实习基地
(0004) 
(0005) ************************************************************/
(0006) /************************ MEI *******************************
(0007) 	Module Name: HD7279.c
(0008) 	Module Date: 11/14/2013
(0009) 	Module Auth: 吕振
(0010) 	
(0011) 	Description: 7279键盘的使用
(0012) ************************* MEI *****************************/
(0013) /*------------------------Includes------------------------*/
(0014) #include "HD7279.h"
(0015) 
(0016) /***************外部调用函数*******************************/
(0017) 
(0018) /**********************************************************
(0019) 函数名：HD7279初始化函数	
(0020) 功  能：初始化HD7279（管脚配置、HD7279复位）
(0021) 输  入：无
(0022) 返  回：无
(0023) 备  注：使用先，选配置管脚的宏定义
(0024) *********************************************************/		
(0025) void init_7279(void)	
(0026) {
(0027) 	unsigned int tmr;
(0028) 	
(0029) 	DR7279 |= cs7279;		         //cs7279定义为输出
    0030B 9AD5      SBI	0x1A,5
(0030) 	DR7279 |= clk7279;		         //clk7279定义为输出
    0030C 9AD4      SBI	0x1A,4
(0031) 	DR7279 |= dat7279;		         //dat7279定义为输出
    0030D 9AD3      SBI	0x1A,3
(0032) 	DR7279 &= ~(key7279);		     //key7279定义为输入
    0030E 98D2      CBI	0x1A,2
(0033) 	
(0034) 	WR7279 |= cs7279;		         //cs7279初始化为1
    0030F 9ADD      SBI	0x1B,5
(0035)  	WR7279 |= clk7279;		         //clk7279初始化为1
    00310 9ADC      SBI	0x1B,4
(0036)  	WR7279 |= dat7279;		         //dat7279初始化为1
    00311 9ADB      SBI	0x1B,3
(0037)  	WR7279 |= key7279;		         //key7279初始化为有弱上拉 
    00312 9ADA      SBI	0x1B,2
(0038)  	
(0039)  	for(tmr=0;tmr<0xf000;tmr++);	 //上电延时
    00313 2744      CLR	R20
    00314 2755      CLR	R21
    00315 C002      RJMP	0x0318
    00316 5F4F      SUBI	R20,0xFF
    00317 4F5F      SBCI	R21,0xFF
    00318 3040      CPI	R20,0
    00319 EFE0      LDI	R30,0xF0
    0031A 075E      CPC	R21,R30
    0031B F3D0      BCS	0x0316
(0040)  		
(0041) 	send_byte(CMD_RESET);		     //复位HD7279
    0031C EA04      LDI	R16,0xA4
    0031D D044      RCALL	_send_byte
    0031E 9159      LD	R21,Y+
    0031F 9149      LD	R20,Y+
    00320 9508      RET
_write7279:
  dta                  --> R10
  cmd                  --> R12
    00321 92AA      ST	-Y,R10
    00322 92CA      ST	-Y,R12
    00323 2EA2      MOV	R10,R18
    00324 2EC0      MOV	R12,R16
(0042)  		 	 		
(0043) }  	 
(0044) 
(0045) /****************** **********************
(0046) 函数名：HD7279写入函数	
(0047) 功  能：对HD7279写数据
(0048) 输  入：cmd为指令数据;	dta为数据数据
(0049) 返  回：无
(0050) 备  注：HD7279的控制函数
(0051) ******************************************/
(0052) void write7279(unsigned char cmd,unsigned char dta)	//写入到HD7279
(0053) {	
(0054) 	send_byte(cmd);		//写指令
    00325 2D0C      MOV	R16,R12
    00326 D03B      RCALL	_send_byte
(0055) 	send_byte(dta);		//定数据
    00327 2D0A      MOV	R16,R10
    00328 D039      RCALL	_send_byte
    00329 90C9      LD	R12,Y+
    0032A 90A9      LD	R10,Y+
    0032B 9508      RET
(0056) }
(0057) 
(0058) /****************** **********************
(0059) 函数名：HD7279读取函数	
(0060) 功  能：对HD7279读取原始键值
(0061) 输  入：无
(0062) 返  回：键盘原始键值
(0063) 备  注：HD7279的控制函数
(0064) ******************************************/
(0065) unsigned char read7279(void)
(0066) {
(0067) 	send_byte(0x15);	        //发送读取指令
_read7279:
    0032C E105      LDI	R16,0x15
    0032D D034      RCALL	_send_byte
(0068) 	return(receive_byte());	    //返回键值
    0032E C04C      RJMP	_receive_byte
_get_key7279:
  KeyNum               --> R10
    0032F 92AA      ST	-Y,R10
(0069) 	
(0070) }
(0071) 
(0072) /****************** **********************
(0073) 函数名：HD7279按键等待接收函数	
(0074) 功  能：当完成一次按键，返回键值
(0075) 输  入：无
(0076) 返  回：键盘键值
(0077) 备  注：HD7279的控制函数
(0078) ******************************************/
(0079) unsigned char get_key7279(void)
(0080) {
(0081) 	unsigned char KeyNum;
(0082) 	while( (RD7279&key7279) );		//等待有键按下,无时为高电平
    00330 99CA      SBIC	0x19,2
    00331 CFFE      RJMP	0x0330
(0083) 	
(0084) 	delay10ms(1);				    //时延100ms
    00332 E001      LDI	R16,1
    00333 E010      LDI	R17,0
    00334 D017      RCALL	_delay10ms
(0085) 	
(0086) 	KeyNum=read7279();			    //读出键码	
    00335 DFF6      RCALL	_read7279
(0087) 	
(0088) 	KeyNum=num_change7279(KeyNum);  //键码转为十进制
    00336 D05B      RCALL	_num_change7279
    00337 2EA0      MOV	R10,R16
(0089) 	
(0090) 	delay10ms(1);				    //时延100ms
    00338 E001      LDI	R16,1
    00339 E010      LDI	R17,0
    0033A D011      RCALL	_delay10ms
(0091) 	
(0092) 	while( !(RD7279&key7279) );		//等待按键松开
    0033B 9BCA      SBIS	0x19,2
    0033C CFFE      RJMP	0x033B
(0093) 	
(0094) 	return KeyNum;				    //返回键值
    0033D 2D0A      MOV	R16,R10
    0033E 90A9      LD	R10,Y+
    0033F 9508      RET
(0095) }
(0096) 
(0097) /******************************内部函数************************************/
(0098) void long_delay(void)               //长时延函数
(0099) {
(0100) 	unsigned char i;
(0101) 	for(i=0;i<80;i++);
_long_delay:
  i                    --> R16
    00340 2700      CLR	R16
    00341 C001      RJMP	0x0343
    00342 9503      INC	R16
    00343 3500      CPI	R16,0x50
    00344 F3E8      BCS	0x0342
    00345 9508      RET
(0102) }	
(0103) 
(0104) void short_delay(void)            //短时延函数					
(0105) 
(0106) {
(0107) 	unsigned char i;
(0108) 	for(i=0;i<46;i++);
_short_delay:
  i                    --> R16
    00346 2700      CLR	R16
    00347 C001      RJMP	0x0349
    00348 9503      INC	R16
    00349 320E      CPI	R16,0x2E
    0034A F3E8      BCS	0x0348
    0034B 9508      RET
_delay10ms:
  i                    --> R10
  j                    --> R20
  k                    --> R22
  count                --> R16
    0034C 940E 08E0 CALL	push_xgsetF00C
(0109) }
(0110) 				
(0111) void delay10ms(unsigned int count)//10ms时延函数
(0112) {
(0113) 	unsigned char i,j,k;
(0114)  	for (i=0;i<count;i++)
    0034E 24AA      CLR	R10
    0034F C00B      RJMP	0x035B
(0115)       		for(j=0;j<100;j++)
    00350 2744      CLR	R20
    00351 C006      RJMP	0x0358
(0116)       			for(k=0;k<100;k++);
    00352 2766      CLR	R22
    00353 C001      RJMP	0x0355
    00354 9563      INC	R22
    00355 3664      CPI	R22,0x64
    00356 F3E8      BCS	0x0354
    00357 9543      INC	R20
    00358 3644      CPI	R20,0x64
    00359 F3C0      BCS	0x0352
    0035A 94A3      INC	R10
    0035B 2C2A      MOV	R2,R10
    0035C 2433      CLR	R3
    0035D 1620      CP	R2,R16
    0035E 0631      CPC	R3,R17
    0035F F380      BCS	0x0350
    00360 940C 08E7 JMP	pop_xgsetF00C
_send_byte:
  i                    --> R20
  out_byte             --> R10
    00362 92AA      ST	-Y,R10
    00363 934A      ST	-Y,R20
    00364 2EA0      MOV	R10,R16
(0117) }	
(0118) 	
(0119) /****************** **********************
(0120) 函数名：HD7279字节发送函数	
(0121) 功  能：HD7279发送一个字节
(0122) 输  入：一个字节
(0123) 返  回：无
(0124) 备  注：HD7279硬件函数
(0125) ******************************************/
(0126) void send_byte(unsigned char out_byte)
(0127) {	
(0128) 	unsigned char i;
(0129) 	
(0130) 	WR7279&=~clk7279;		    //clk7279=0;
    00365 98DC      CBI	0x1B,4
(0131) 	WR7279&=~cs7279;		    //cs7279=0
    00366 98DD      CBI	0x1B,5
(0132) 	long_delay();
    00367 DFD8      RCALL	_long_delay
(0133) 	
(0134) 	for(i=0;i<8;i++)
    00368 2744      CLR	R20
    00369 C00B      RJMP	0x0375
(0135) 	{
(0136) 		if(out_byte&0x80)
    0036A FEA7      SBRS	R10,7
    0036B C002      RJMP	0x036E
(0137) 		{
(0138) 			WR7279|=dat7279;	//dat7279=1;
    0036C 9ADB      SBI	0x1B,3
(0139) 		 }
    0036D C001      RJMP	0x036F
(0140) 		 else
(0141) 		 {
(0142) 		 	WR7279&=~dat7279;	//dat7279=0;
    0036E 98DB      CBI	0x1B,3
(0143) 		 }
(0144) 		 WR7279|=clk7279;		//clk7279=1;
    0036F 9ADC      SBI	0x1B,4
(0145) 		 short_delay();
    00370 DFD5      RCALL	_short_delay
(0146) 		 WR7279&=~clk7279;		//clk7279=0;
    00371 98DC      CBI	0x1B,4
(0147) 		 short_delay();
    00372 DFD3      RCALL	_short_delay
(0148) 		 out_byte=out_byte<<1;
    00373 0CAA      LSL	R10
    00374 9543      INC	R20
    00375 3048      CPI	R20,0x8
    00376 F398      BCS	0x036A
(0149) 	 }
(0150) 	 WR7279|=dat7279;			//dat7279=1; 	 
    00377 9ADB      SBI	0x1B,3
    00378 9149      LD	R20,Y+
    00379 90A9      LD	R10,Y+
    0037A 9508      RET
_receive_byte:
  i                    --> R22
  in_byte              --> R20
    0037B 934A      ST	-Y,R20
    0037C 936A      ST	-Y,R22
(0151) }
(0152) 	
(0153) /****************** **********************
(0154) 函数名：HD7279字节接收函数	
(0155) 功  能：从HD7279接收一个字节
(0156) 输  入：无
(0157) 返  回：一个字节
(0158) 备  注：HD7279硬件函数
(0159) ******************************************/
(0160) unsigned char receive_byte(void)
(0161) {
(0162) 	unsigned char i,in_byte;
(0163) 	
(0164) 	WR7279|=clk7279;		    //clk7279=1;
    0037D 9ADC      SBI	0x1B,4
(0165) 	
(0166) 	DR7279&=~dat7279;			//改dat7279为输入
    0037E 98D3      CBI	0x1A,3
(0167) 	
(0168) 	long_delay();
    0037F DFC0      RCALL	_long_delay
(0169) 	
(0170) 	for(i=0;i<8;i++)
    00380 2766      CLR	R22
    00381 C009      RJMP	0x038B
(0171) 	{	
(0172) 		WR7279|=clk7279;		//clk7279=1;
    00382 9ADC      SBI	0x1B,4
(0173) 		short_delay();
    00383 DFC2      RCALL	_short_delay
(0174) 		in_byte=in_byte<<1;
    00384 0F44      LSL	R20
(0175) 		if(RD7279&dat7279)
    00385 9BCB      SBIS	0x19,3
    00386 C001      RJMP	0x0388
(0176) 		{
(0177) 			in_byte=in_byte|0x01;
    00387 6041      ORI	R20,1
(0178) 		}
(0179) 		WR7279&=~clk7279;		//clk7279=0;
    00388 98DC      CBI	0x1B,4
(0180) 		short_delay();
    00389 DFBC      RCALL	_short_delay
    0038A 9563      INC	R22
    0038B 3068      CPI	R22,0x8
    0038C F3A8      BCS	0x0382
(0181) 	
(0182) 	}
(0183) 	DR7279|=dat7279;			//dat7279还原为输出口
    0038D 9AD3      SBI	0x1A,3
(0184) 	return(in_byte);
    0038E 2F04      MOV	R16,R20
    0038F 9169      LD	R22,Y+
    00390 9149      LD	R20,Y+
    00391 9508      RET
_num_change7279:
  X                    --> R16
    00392 934A      ST	-Y,R20
    00393 935A      ST	-Y,R21
(0185) }
(0186) 
(0187) /****************** **********************
(0188) 函数名：HD7279按键等待接收函数	
(0189) 功  能：当完成一次按键，返回键值
(0190) 输  入：无
(0191) 返  回：键盘键值
(0192) 备  注：HD7279的控制函数
(0193) ******************************************/
(0194) unsigned char  num_change7279 (unsigned char X)
(0195)  {
(0196)    	switch (X)
    00394 2F40      MOV	R20,R16
    00395 2755      CLR	R21
    00396 3040      CPI	R20,0
    00397 E0E0      LDI	R30,0
    00398 075E      CPC	R21,R30
    00399 F40C      BGE	0x039B
    0039A C031      RJMP	0x03CC
    0039B E18B      LDI	R24,0x1B
    0039C E090      LDI	R25,0
    0039D 1784      CP	R24,R20
    0039E 0795      CPC	R25,R21
    0039F F40C      BGE	0x03A1
    003A0 C02B      RJMP	0x03CC
    003A1 E584      LDI	R24,0x54
    003A2 E090      LDI	R25,0
    003A3 01FA      MOVW	R30,R20
    003A4 0FEE      LSL	R30
    003A5 1FFF      ROL	R31
    003A6 0FE8      ADD	R30,R24
    003A7 1FF9      ADC	R31,R25
    003A8 9025      LPM	R2,Z+
    003A9 9034      LPM	R3,Z
    003AA 01F1      MOVW	R30,R2
    003AB 9409      IJMP
(0197) 	{
(0198) 		case  ONE 	: return 0X01;
    003AC E001      LDI	R16,1
    003AD C01F      RJMP	0x03CD
(0199) 		case  TWO 	: return 0X02;
    003AE E002      LDI	R16,2
    003AF C01D      RJMP	0x03CD
(0200) 		case  THREE 	: return 0X03;
    003B0 E003      LDI	R16,3
    003B1 C01B      RJMP	0x03CD
(0201) 		case  FOUR 	: return 0X04;
    003B2 E004      LDI	R16,4
    003B3 C019      RJMP	0x03CD
(0202) 		case  FIVE 	: return 0X05;
    003B4 E005      LDI	R16,5
    003B5 C017      RJMP	0x03CD
(0203) 		case  SIX  	: return 0X06;
    003B6 E006      LDI	R16,6
    003B7 C015      RJMP	0x03CD
(0204) 		case  SEVEN 	: return 0X07;
    003B8 E007      LDI	R16,7
    003B9 C013      RJMP	0x03CD
(0205) 		case  EIGHT 	: return 0X08;
    003BA E008      LDI	R16,0x8
    003BB C011      RJMP	0x03CD
(0206) 		case  NINE 	: return 0X09;
    003BC E009      LDI	R16,0x9
    003BD C00F      RJMP	0x03CD
(0207) 		case  ZERO 	: return 0X00;
    003BE 2700      CLR	R16
    003BF C00D      RJMP	0x03CD
(0208) 		case  AAAA  	: return 0x0A;
    003C0 E00A      LDI	R16,0xA
    003C1 C00B      RJMP	0x03CD
(0209) 		case  BBBB 	: return 0x0B;
    003C2 E00B      LDI	R16,0xB
    003C3 C009      RJMP	0x03CD
(0210) 		case  CCCC 	: return 0x0C;
    003C4 E00C      LDI	R16,0xC
    003C5 C007      RJMP	0x03CD
(0211) 		case  DDDD 	: return 0x0D;
    003C6 E00D      LDI	R16,0xD
    003C7 C005      RJMP	0x03CD
(0212) 		case  EEEE 	: return 0x0E;
    003C8 E00E      LDI	R16,0xE
    003C9 C003      RJMP	0x03CD
(0213) 		case  FFFF 	: return 0x0F;
    003CA E00F      LDI	R16,0xF
    003CB C001      RJMP	0x03CD
(0214) 		default 	: return 0xFF;
    003CC EF0F      LDI	R16,0xFF
    003CD 9159      LD	R21,Y+
    003CE 9149      LD	R20,Y+
    003CF 9508      RET
_test_7279:
  key7279_number       --> R20
  wait_cnter           --> Y,+12
  tmr                  --> Y,+8
  k                    --> Y,+4
  j                    --> Y,+0
    003D0 934A      ST	-Y,R20
    003D1 9760      SBIW	R28,0x10
(0215) 	}
(0216) }
(0217) 
(0218) 
(0219) 		
(0220) 
(0221) 
(0222) /****************** HD7279测试函数*************************/
(0223) void test_7279(void)
(0224) {
(0225) 	unsigned long wait_cnter;
(0226) 	unsigned long tmr,j,k;
(0227) 	unsigned char key7279_number;
(0228) 	init_7279();
    003D2 DF36      RCALL	_init_7279
    003D3 C1E1      RJMP	0x05B5
(0229) 	while(1)
(0230) 	{
(0231) 		for(tmr=0;tmr<0xf000;tmr++);	//上电延时
    003D4 E080      LDI	R24,0
    003D5 8788      STD	Y+8,R24
    003D6 8789      STD	Y+9,R24
    003D7 878A      STD	Y+10,R24
    003D8 878B      STD	Y+11,R24
    003D9 C010      RJMP	0x03EA
    003DA E081      LDI	R24,1
    003DB E090      LDI	R25,0
    003DC E0A0      LDI	R26,0
    003DD E0B0      LDI	R27,0
    003DE 8428      LDD	R2,Y+8
    003DF 8439      LDD	R3,Y+9
    003E0 844A      LDD	R4,Y+10
    003E1 845B      LDD	R5,Y+11
    003E2 0E28      ADD	R2,R24
    003E3 1E39      ADC	R3,R25
    003E4 1E4A      ADC	R4,R26
    003E5 1E5B      ADC	R5,R27
    003E6 8628      STD	Y+8,R2
    003E7 8639      STD	Y+9,R3
    003E8 864A      STD	Y+10,R4
    003E9 865B      STD	Y+11,R5
    003EA E080      LDI	R24,0
    003EB EF90      LDI	R25,0xF0
    003EC E0A0      LDI	R26,0
    003ED E0B0      LDI	R27,0
    003EE 8428      LDD	R2,Y+8
    003EF 8439      LDD	R3,Y+9
    003F0 844A      LDD	R4,Y+10
    003F1 845B      LDD	R5,Y+11
    003F2 1628      CP	R2,R24
    003F3 0639      CPC	R3,R25
    003F4 064A      CPC	R4,R26
    003F5 065B      CPC	R5,R27
    003F6 F318      BCS	0x03DA
(0232) 		send_byte(CMD_RESET);		    //复位HD7279
    003F7 EA04      LDI	R16,0xA4
    003F8 DF69      RCALL	_send_byte
(0233) 
(0234) 		//测试指令演示
(0235) 
(0236) 		send_byte(CMD_TEST);
    003F9 EB0F      LDI	R16,0xBF
    003FA DF67      RCALL	_send_byte
(0237) 		for(j=0;j<3;j++)		        //延时约3秒
    003FB E080      LDI	R24,0
    003FC 8388      ST	Y,R24
    003FD 8389      STD	Y+1,R24
    003FE 838A      STD	Y+2,R24
    003FF 838B      STD	Y+3,R24
    00400 C013      RJMP	0x0414
(0238) 		{	
(0239) 			delay10ms(100);
    00401 E604      LDI	R16,0x64
    00402 E010      LDI	R17,0
    00403 DF48      RCALL	_delay10ms
    00404 E081      LDI	R24,1
    00405 E090      LDI	R25,0
    00406 E0A0      LDI	R26,0
    00407 E0B0      LDI	R27,0
    00408 8028      LD	R2,Y
    00409 8039      LDD	R3,Y+1
    0040A 804A      LDD	R4,Y+2
    0040B 805B      LDD	R5,Y+3
    0040C 0E28      ADD	R2,R24
    0040D 1E39      ADC	R3,R25
    0040E 1E4A      ADC	R4,R26
    0040F 1E5B      ADC	R5,R27
    00410 8228      ST	Y,R2
    00411 8239      STD	Y+1,R3
    00412 824A      STD	Y+2,R4
    00413 825B      STD	Y+3,R5
    00414 E083      LDI	R24,3
    00415 E090      LDI	R25,0
    00416 E0A0      LDI	R26,0
    00417 E0B0      LDI	R27,0
    00418 8028      LD	R2,Y
    00419 8039      LDD	R3,Y+1
    0041A 804A      LDD	R4,Y+2
    0041B 805B      LDD	R5,Y+3
    0041C 1628      CP	R2,R24
    0041D 0639      CPC	R3,R25
    0041E 064A      CPC	R4,R26
    0041F 065B      CPC	R5,R27
    00420 F300      BCS	0x0401
(0240) 		}
(0241) 		send_byte(CMD_RESET);		    //清除显示
    00421 EA04      LDI	R16,0xA4
    00422 DF3F      RCALL	_send_byte
(0242) 		
(0243) 	
(0244) 		{	
(0245) 		 write7279(DECODE0+0,0x80);
    00423 E820      LDI	R18,0x80
    00424 E800      LDI	R16,0x80
    00425 DEFB      RCALL	_write7279
(0246) 		 write7279(DECODE0+1,0x81);
    00426 E821      LDI	R18,0x81
    00427 E801      LDI	R16,0x81
    00428 DEF8      RCALL	_write7279
(0247) 		 write7279(DECODE0+2,0x82);
    00429 E822      LDI	R18,0x82
    0042A E802      LDI	R16,0x82
    0042B DEF5      RCALL	_write7279
(0248) 		 write7279(DECODE0+3,0x83);
    0042C E823      LDI	R18,0x83
    0042D E803      LDI	R16,0x83
    0042E DEF2      RCALL	_write7279
(0249) 		 write7279(DECODE0+4,0x84);
    0042F E824      LDI	R18,0x84
    00430 E804      LDI	R16,0x84
    00431 DEEF      RCALL	_write7279
(0250) 		 write7279(DECODE0+5,0x85);
    00432 E825      LDI	R18,0x85
    00433 E805      LDI	R16,0x85
    00434 DEEC      RCALL	_write7279
(0251) 		 write7279(DECODE0+6,0x86);
    00435 E826      LDI	R18,0x86
    00436 E806      LDI	R16,0x86
    00437 DEE9      RCALL	_write7279
(0252) 		 write7279(DECODE0+7,0x87);
    00438 E827      LDI	R18,0x87
    00439 E807      LDI	R16,0x87
    0043A DEE6      RCALL	_write7279
(0253) 		 }
(0254) 		 
(0255) 		delay10ms(200);
    0043B EC08      LDI	R16,0xC8
    0043C E010      LDI	R17,0
    0043D DF0E      RCALL	_delay10ms
(0256) 
(0257) 		//闪烁指令及键盘接口测试，
(0258) 		//将用户按键的键码显示出来，
(0259) 		//如果10秒内无按键或按S0键即进入下一步演示
(0260) 		wait_cnter=0;
    0043E E080      LDI	R24,0
    0043F 878C      STD	Y+12,R24
    00440 878D      STD	Y+13,R24
    00441 878E      STD	Y+14,R24
    00442 878F      STD	Y+15,R24
(0261) 		key7279_number=0xff;
    00443 EF4F      LDI	R20,0xFF
(0262) 		write7279(BLINKCTL,0xfc);			//第1?2两位设为闪烁显示 1111，1100
    00444 EF2C      LDI	R18,0xFC
    00445 E808      LDI	R16,0x88
    00446 DEDA      RCALL	_write7279
(0263) 		write7279(UNDECODE,0x08);           //0x08 is '_'
    00447 E028      LDI	R18,0x8
    00448 E900      LDI	R16,0x90
    00449 DED7      RCALL	_write7279
(0264) 		write7279(UNDECODE+1,0x08);			//在第1?2位显示下划线'_'
    0044A E028      LDI	R18,0x8
    0044B E901      LDI	R16,0x91
    0044C DED4      RCALL	_write7279
(0265) 		do
(0266) 		{
(0267) 			if(!(RD7279&key7279))			//如果有键按下
    0044D 99CA      SBIC	0x19,2
    0044E C01B      RJMP	0x046A
(0268) 			{   
(0269) 			 write7279(DECODE0+7,0x88);
    0044F E828      LDI	R18,0x88
    00450 E807      LDI	R16,0x87
    00451 DECF      RCALL	_write7279
(0270) 			 key7279_number=read7279();     //读出键码
    00452 DED9      RCALL	_read7279
    00453 2F40      MOV	R20,R16
(0271) 			 write7279(BLINKCTL,0xff);
    00454 EF2F      LDI	R18,0xFF
    00455 E808      LDI	R16,0x88
    00456 DECA      RCALL	_write7279
(0272) 			 write7279(DECODE1+1,key7279_number/16);	//在第2 位显示键码高8位
    00457 2F24      MOV	R18,R20
    00458 9522      SWAP	R18
    00459 702F      ANDI	R18,0xF
    0045A EC09      LDI	R16,0xC9
    0045B DEC5      RCALL	_write7279
(0273) 			 write7279(DECODE1,key7279_number&0x0f);	//在第1位显示键码低8位
    0045C 2F24      MOV	R18,R20
    0045D 702F      ANDI	R18,0xF
    0045E EC08      LDI	R16,0xC8
    0045F DEC1      RCALL	_write7279
(0274) 			 while(!(RD7279&key7279));			        //等待按键放开
    00460 9BCA      SBIS	0x19,2
    00461 CFFE      RJMP	0x0460
(0275) 			 wait_cnter=0;
    00462 E080      LDI	R24,0
    00463 878C      STD	Y+12,R24
    00464 878D      STD	Y+13,R24
    00465 878E      STD	Y+14,R24
    00466 878F      STD	Y+15,R24
(0276) 			 delay10ms(10); 
    00467 E00A      LDI	R16,0xA
    00468 E010      LDI	R17,0
    00469 DEE2      RCALL	_delay10ms
(0277) 			}	
(0278) 		}
(0279) 		while(wait_cnter<1000);	
    0046A EE88      LDI	R24,0xE8
    0046B E093      LDI	R25,3
    0046C E0A0      LDI	R26,0
    0046D E0B0      LDI	R27,0
    0046E 842C      LDD	R2,Y+12
    0046F 843D      LDD	R3,Y+13
    00470 844E      LDD	R4,Y+14
    00471 845F      LDD	R5,Y+15
    00472 1628      CP	R2,R24
    00473 0639      CPC	R3,R25
    00474 064A      CPC	R4,R26
    00475 065B      CPC	R5,R27
    00476 F2B0      BCS	0x044D
(0280) 		
(0281) 		//如果按键为'0'和超时则进入下一步演示
(0282) 		write7279(BLINKCTL,0xff);			//清除闪烁设置 无位显示闪烁1111,1111
    00477 EF2F      LDI	R18,0xFF
    00478 E808      LDI	R16,0x88
    00479 DEA7      RCALL	_write7279
(0283) 		send_byte(CMD_RESET);				//清除显示
    0047A EA04      LDI	R16,0xA4
    0047B DEE6      RCALL	_send_byte
(0284) 	
(0285) 		//下载数据但不译码指令测试
(0286) 		write7279(UNDECODE+7,0x49);		//在第8位按不译码方式显示一个字符‘三’。
    0047C E429      LDI	R18,0x49
    0047D E907      LDI	R16,0x97
    0047E DEA2      RCALL	_write7279
(0287) 		delay10ms(80);
    0047F E500      LDI	R16,0x50
    00480 E010      LDI	R17,0
    00481 DECA      RCALL	_delay10ms
(0288) 	
(0289) 		//循环左右移测试，‘三’字向右移3次，再向左移3次。
(0290) 		for(j=0;j<23;j++)
    00482 E080      LDI	R24,0
    00483 8388      ST	Y,R24
    00484 8389      STD	Y+1,R24
    00485 838A      STD	Y+2,R24
    00486 838B      STD	Y+3,R24
    00487 C015      RJMP	0x049D
(0291) 		{
(0292) 			send_byte(RTR_CYCLE);			//循环右移23次
    00488 EA02      LDI	R16,0xA2
    00489 DED8      RCALL	_send_byte
(0293) 			delay10ms(12);
    0048A E00C      LDI	R16,0xC
    0048B E010      LDI	R17,0
    0048C DEBF      RCALL	_delay10ms
    0048D E081      LDI	R24,1
    0048E E090      LDI	R25,0
    0048F E0A0      LDI	R26,0
    00490 E0B0      LDI	R27,0
    00491 8028      LD	R2,Y
    00492 8039      LDD	R3,Y+1
    00493 804A      LDD	R4,Y+2
    00494 805B      LDD	R5,Y+3
    00495 0E28      ADD	R2,R24
    00496 1E39      ADC	R3,R25
    00497 1E4A      ADC	R4,R26
    00498 1E5B      ADC	R5,R27
    00499 8228      ST	Y,R2
    0049A 8239      STD	Y+1,R3
    0049B 824A      STD	Y+2,R4
    0049C 825B      STD	Y+3,R5
    0049D E187      LDI	R24,0x17
    0049E E090      LDI	R25,0
    0049F E0A0      LDI	R26,0
    004A0 E0B0      LDI	R27,0
    004A1 8028      LD	R2,Y
    004A2 8039      LDD	R3,Y+1
    004A3 804A      LDD	R4,Y+2
    004A4 805B      LDD	R5,Y+3
    004A5 1628      CP	R2,R24
    004A6 0639      CPC	R3,R25
    004A7 064A      CPC	R4,R26
    004A8 065B      CPC	R5,R27
    004A9 F2F0      BCS	0x0488
(0294) 		}
(0295) 		
(0296) 		for(j=0;j<23;j++)
    004AA E080      LDI	R24,0
    004AB 8388      ST	Y,R24
    004AC 8389      STD	Y+1,R24
    004AD 838A      STD	Y+2,R24
    004AE 838B      STD	Y+3,R24
    004AF C015      RJMP	0x04C5
(0297) 		{
(0298) 			send_byte(RTL_CYCLE);			//循环左移23次
    004B0 EA03      LDI	R16,0xA3
    004B1 DEB0      RCALL	_send_byte
(0299) 			delay10ms(12);
    004B2 E00C      LDI	R16,0xC
    004B3 E010      LDI	R17,0
    004B4 DE97      RCALL	_delay10ms
    004B5 E081      LDI	R24,1
    004B6 E090      LDI	R25,0
    004B7 E0A0      LDI	R26,0
    004B8 E0B0      LDI	R27,0
    004B9 8028      LD	R2,Y
    004BA 8039      LDD	R3,Y+1
    004BB 804A      LDD	R4,Y+2
    004BC 805B      LDD	R5,Y+3
    004BD 0E28      ADD	R2,R24
    004BE 1E39      ADC	R3,R25
    004BF 1E4A      ADC	R4,R26
    004C0 1E5B      ADC	R5,R27
    004C1 8228      ST	Y,R2
    004C2 8239      STD	Y+1,R3
    004C3 824A      STD	Y+2,R4
    004C4 825B      STD	Y+3,R5
    004C5 E187      LDI	R24,0x17
    004C6 E090      LDI	R25,0
    004C7 E0A0      LDI	R26,0
    004C8 E0B0      LDI	R27,0
    004C9 8028      LD	R2,Y
    004CA 8039      LDD	R3,Y+1
    004CB 804A      LDD	R4,Y+2
    004CC 805B      LDD	R5,Y+3
    004CD 1628      CP	R2,R24
    004CE 0639      CPC	R3,R25
    004CF 064A      CPC	R4,R26
    004D0 065B      CPC	R5,R27
    004D1 F2F0      BCS	0x04B0
(0300) 		}
(0301) 	
(0302) 		//译码方式0及左移指令测试
(0303) 		for(j=0;j<16;j++)
    004D2 E080      LDI	R24,0
    004D3 8388      ST	Y,R24
    004D4 8389      STD	Y+1,R24
    004D5 838A      STD	Y+2,R24
    004D6 838B      STD	Y+3,R24
    004D7 C01C      RJMP	0x04F4
(0304) 		{
(0305) 			send_byte(RTL_UNCYL);			//不循环左移指令
    004D8 EA01      LDI	R16,0xA1
    004D9 DE88      RCALL	_send_byte
(0306) 			write7279(DECODE0,j);			//译码方式0，显示在第1位
    004DA 8028      LD	R2,Y
    004DB 8039      LDD	R3,Y+1
    004DC 804A      LDD	R4,Y+2
    004DD 805B      LDD	R5,Y+3
    004DE 2D22      MOV	R18,R2
    004DF E800      LDI	R16,0x80
    004E0 DE40      RCALL	_write7279
(0307) 			delay10ms(50);
    004E1 E302      LDI	R16,0x32
    004E2 E010      LDI	R17,0
    004E3 DE68      RCALL	_delay10ms
    004E4 E081      LDI	R24,1
    004E5 E090      LDI	R25,0
    004E6 E0A0      LDI	R26,0
    004E7 E0B0      LDI	R27,0
    004E8 8028      LD	R2,Y
    004E9 8039      LDD	R3,Y+1
    004EA 804A      LDD	R4,Y+2
    004EB 805B      LDD	R5,Y+3
    004EC 0E28      ADD	R2,R24
    004ED 1E39      ADC	R3,R25
    004EE 1E4A      ADC	R4,R26
    004EF 1E5B      ADC	R5,R27
    004F0 8228      ST	Y,R2
    004F1 8239      STD	Y+1,R3
    004F2 824A      STD	Y+2,R4
    004F3 825B      STD	Y+3,R5
    004F4 E180      LDI	R24,0x10
    004F5 E090      LDI	R25,0
    004F6 E0A0      LDI	R26,0
    004F7 E0B0      LDI	R27,0
    004F8 8028      LD	R2,Y
    004F9 8039      LDD	R3,Y+1
    004FA 804A      LDD	R4,Y+2
    004FB 805B      LDD	R5,Y+3
    004FC 1628      CP	R2,R24
    004FD 0639      CPC	R3,R25
    004FE 064A      CPC	R4,R26
    004FF 065B      CPC	R5,R27
    00500 F2B8      BCS	0x04D8
(0308) 		}
(0309) 			delay10ms(150);
    00501 E906      LDI	R16,0x96
    00502 E010      LDI	R17,0
    00503 DE48      RCALL	_delay10ms
(0310) 			send_byte(CMD_RESET);
    00504 EA04      LDI	R16,0xA4
    00505 DE5C      RCALL	_send_byte
(0311) 	
(0312) 		//译码方式1及右移指令测试
(0313) 		for(j=0;j<16;j++)
    00506 E080      LDI	R24,0
    00507 8388      ST	Y,R24
    00508 8389      STD	Y+1,R24
    00509 838A      STD	Y+2,R24
    0050A 838B      STD	Y+3,R24
    0050B C01C      RJMP	0x0528
(0314) 		{
(0315) 			send_byte(RTR_UNCYL);			//不循环左移指令
    0050C EA00      LDI	R16,0xA0
    0050D DE54      RCALL	_send_byte
(0316) 			write7279(DECODE1+7,j);			//译码方式1，显示在第8位
    0050E 8028      LD	R2,Y
    0050F 8039      LDD	R3,Y+1
    00510 804A      LDD	R4,Y+2
    00511 805B      LDD	R5,Y+3
    00512 2D22      MOV	R18,R2
    00513 EC0F      LDI	R16,0xCF
    00514 DE0C      RCALL	_write7279
(0317) 			delay10ms(50);
    00515 E302      LDI	R16,0x32
    00516 E010      LDI	R17,0
    00517 DE34      RCALL	_delay10ms
    00518 E081      LDI	R24,1
    00519 E090      LDI	R25,0
    0051A E0A0      LDI	R26,0
    0051B E0B0      LDI	R27,0
    0051C 8028      LD	R2,Y
    0051D 8039      LDD	R3,Y+1
    0051E 804A      LDD	R4,Y+2
    0051F 805B      LDD	R5,Y+3
    00520 0E28      ADD	R2,R24
    00521 1E39      ADC	R3,R25
    00522 1E4A      ADC	R4,R26
    00523 1E5B      ADC	R5,R27
    00524 8228      ST	Y,R2
    00525 8239      STD	Y+1,R3
    00526 824A      STD	Y+2,R4
    00527 825B      STD	Y+3,R5
    00528 E180      LDI	R24,0x10
    00529 E090      LDI	R25,0
    0052A E0A0      LDI	R26,0
    0052B E0B0      LDI	R27,0
    0052C 8028      LD	R2,Y
    0052D 8039      LDD	R3,Y+1
    0052E 804A      LDD	R4,Y+2
    0052F 805B      LDD	R5,Y+3
    00530 1628      CP	R2,R24
    00531 0639      CPC	R3,R25
    00532 064A      CPC	R4,R26
    00533 065B      CPC	R5,R27
    00534 F2B8      BCS	0x050C
(0318) 		}
(0319) 		delay10ms(150);
    00535 E906      LDI	R16,0x96
    00536 E010      LDI	R17,0
    00537 DE14      RCALL	_delay10ms
(0320) 	
(0321) 		//消隐指令测试
(0322) 	
(0323) 		for(j=0;j<6;j++)
    00538 E080      LDI	R24,0
    00539 8388      ST	Y,R24
    0053A 8389      STD	Y+1,R24
    0053B 838A      STD	Y+2,R24
    0053C 838B      STD	Y+3,R24
    0053D C026      RJMP	0x0564
(0324) 		{
(0325) 			k=k>>1;
    0053E 802C      LDD	R2,Y+4
    0053F 803D      LDD	R3,Y+5
    00540 804E      LDD	R4,Y+6
    00541 805F      LDD	R5,Y+7
    00542 9456      LSR	R5
    00543 9447      ROR	R4
    00544 9437      ROR	R3
    00545 9427      ROR	R2
    00546 822C      STD	Y+4,R2
    00547 823D      STD	Y+5,R3
    00548 824E      STD	Y+6,R4
    00549 825F      STD	Y+7,R5
(0326) 			write7279(ACTCTL,k);			//每隔一秒钟增加一个消隐位
    0054A 802C      LDD	R2,Y+4
    0054B 803D      LDD	R3,Y+5
    0054C 804E      LDD	R4,Y+6
    0054D 805F      LDD	R5,Y+7
    0054E 2D22      MOV	R18,R2
    0054F E908      LDI	R16,0x98
    00550 DDD0      RCALL	_write7279
(0327) 			delay10ms(100);
    00551 E604      LDI	R16,0x64
    00552 E010      LDI	R17,0
    00553 DDF8      RCALL	_delay10ms
    00554 E081      LDI	R24,1
    00555 E090      LDI	R25,0
    00556 E0A0      LDI	R26,0
    00557 E0B0      LDI	R27,0
    00558 8028      LD	R2,Y
    00559 8039      LDD	R3,Y+1
    0055A 804A      LDD	R4,Y+2
    0055B 805B      LDD	R5,Y+3
    0055C 0E28      ADD	R2,R24
    0055D 1E39      ADC	R3,R25
    0055E 1E4A      ADC	R4,R26
    0055F 1E5B      ADC	R5,R27
    00560 8228      ST	Y,R2
    00561 8239      STD	Y+1,R3
    00562 824A      STD	Y+2,R4
    00563 825B      STD	Y+3,R5
    00564 E086      LDI	R24,6
    00565 E090      LDI	R25,0
    00566 E0A0      LDI	R26,0
    00567 E0B0      LDI	R27,0
    00568 8028      LD	R2,Y
    00569 8039      LDD	R3,Y+1
    0056A 804A      LDD	R4,Y+2
    0056B 805B      LDD	R5,Y+3
    0056C 1628      CP	R2,R24
    0056D 0639      CPC	R3,R25
    0056E 064A      CPC	R4,R26
    0056F 065B      CPC	R5,R27
    00570 F268      BCS	0x053E
(0328) 		}
(0329) 		write7279(ACTCTL,0xff);				//恢复8位显示
    00571 EF2F      LDI	R18,0xFF
    00572 E908      LDI	R16,0x98
    00573 DDAD      RCALL	_write7279
(0330) 		delay10ms(100);
    00574 E604      LDI	R16,0x64
    00575 E010      LDI	R17,0
    00576 DDD5      RCALL	_delay10ms
(0331) 		send_byte(CMD_RESET);				//清除显示
    00577 EA04      LDI	R16,0xA4
    00578 DDE9      RCALL	_send_byte
(0332) 	
(0333) 		//段点亮指令和段关闭指令
(0334) 		for(j=0;j<64;j++)
    00579 E080      LDI	R24,0
    0057A 8388      ST	Y,R24
    0057B 8389      STD	Y+1,R24
    0057C 838A      STD	Y+2,R24
    0057D 838B      STD	Y+3,R24
    0057E C029      RJMP	0x05A8
(0335) 		{
(0336) 			write7279(SEGON,j);			//将64个显示段逐个点亮
    0057F 8028      LD	R2,Y
    00580 8039      LDD	R3,Y+1
    00581 804A      LDD	R4,Y+2
    00582 805B      LDD	R5,Y+3
    00583 2D22      MOV	R18,R2
    00584 EE00      LDI	R16,0xE0
    00585 DD9B      RCALL	_write7279
(0337) 			write7279(SEGOFF,j-1);			//同时将前一个显示段关闭
    00586 E081      LDI	R24,1
    00587 E090      LDI	R25,0
    00588 E0A0      LDI	R26,0
    00589 E0B0      LDI	R27,0
    0058A 8028      LD	R2,Y
    0058B 8039      LDD	R3,Y+1
    0058C 804A      LDD	R4,Y+2
    0058D 805B      LDD	R5,Y+3
    0058E 1A28      SUB	R2,R24
    0058F 0A39      SBC	R3,R25
    00590 0A4A      SBC	R4,R26
    00591 0A5B      SBC	R5,R27
    00592 2D22      MOV	R18,R2
    00593 EC00      LDI	R16,0xC0
    00594 DD8C      RCALL	_write7279
(0338) 			delay10ms(20);
    00595 E104      LDI	R16,0x14
    00596 E010      LDI	R17,0
    00597 DDB4      RCALL	_delay10ms
    00598 E081      LDI	R24,1
    00599 E090      LDI	R25,0
    0059A E0A0      LDI	R26,0
    0059B E0B0      LDI	R27,0
    0059C 8028      LD	R2,Y
    0059D 8039      LDD	R3,Y+1
    0059E 804A      LDD	R4,Y+2
    0059F 805B      LDD	R5,Y+3
    005A0 0E28      ADD	R2,R24
    005A1 1E39      ADC	R3,R25
    005A2 1E4A      ADC	R4,R26
    005A3 1E5B      ADC	R5,R27
    005A4 8228      ST	Y,R2
    005A5 8239      STD	Y+1,R3
    005A6 824A      STD	Y+2,R4
    005A7 825B      STD	Y+3,R5
    005A8 E480      LDI	R24,0x40
    005A9 E090      LDI	R25,0
    005AA E0A0      LDI	R26,0
    005AB E0B0      LDI	R27,0
    005AC 8028      LD	R2,Y
    005AD 8039      LDD	R3,Y+1
    005AE 804A      LDD	R4,Y+2
    005AF 805B      LDD	R5,Y+3
    005B0 1628      CP	R2,R24
    005B1 0639      CPC	R3,R25
    005B2 064A      CPC	R4,R26
    005B3 065B      CPC	R5,R27
    005B4 F250      BCS	0x057F
    005B5 CE1E      RJMP	0x03D4
    005B6 9660      ADIW	R28,0x10
    005B7 9149      LD	R20,Y+
    005B8 9508      RET
_dis_data:
  temp_char            --> R14
  i                    --> R10
  num                  --> Y,+10
  dig_end              --> R12
  dig_start            --> R14
    005B9 940E 08C1 CALL	push_xgsetF0FC
    005BB 2EC2      MOV	R12,R18
    005BC 2EE0      MOV	R14,R16
(0339) 		}
(0340) 	}
(0341) }
(0342) 
(0343) 
(0344) 
(0345) 
(0346) /********************************** HD7279输入输出函数 *******************************************/
(0347) 
(0348) void dis_data ( unsigned char dig_start,unsigned char dig_end,signed long num)
(0349) {
(0350) 	unsigned char i,temp_char;
(0351) 	
(0352) 	for( i = dig_start; i <= dig_end; i++ )
    005BD 2CAE      MOV	R10,R14
    005BE C036      RJMP	0x05F5
(0353) 	{
(0354) 		temp_char = num % 10;
    005BF E04A      LDI	R20,0xA
    005C0 E050      LDI	R21,0
    005C1 E060      LDI	R22,0
    005C2 E070      LDI	R23,0
    005C3 850A      LDD	R16,Y+10
    005C4 851B      LDD	R17,Y+11
    005C5 852C      LDD	R18,Y+12
    005C6 853D      LDD	R19,Y+13
    005C7 937A      ST	-Y,R23
    005C8 936A      ST	-Y,R22
    005C9 935A      ST	-Y,R21
    005CA 934A      ST	-Y,R20
    005CB 940E 080B CALL	mod32s
    005CD 2EE0      MOV	R14,R16
(0355) 		num -= temp_char;
    005CE 2C2E      MOV	R2,R14
    005CF 2433      CLR	R3
    005D0 2444      CLR	R4
    005D1 2455      CLR	R5
    005D2 846A      LDD	R6,Y+10
    005D3 847B      LDD	R7,Y+11
    005D4 848C      LDD	R8,Y+12
    005D5 849D      LDD	R9,Y+13
    005D6 1862      SUB	R6,R2
    005D7 0873      SBC	R7,R3
    005D8 0884      SBC	R8,R4
    005D9 0895      SBC	R9,R5
    005DA 866A      STD	Y+10,R6
    005DB 867B      STD	Y+11,R7
    005DC 868C      STD	Y+12,R8
    005DD 869D      STD	Y+13,R9
(0356) 		num /= 10;	
    005DE E04A      LDI	R20,0xA
    005DF E050      LDI	R21,0
    005E0 E060      LDI	R22,0
    005E1 E070      LDI	R23,0
    005E2 850A      LDD	R16,Y+10
    005E3 851B      LDD	R17,Y+11
    005E4 852C      LDD	R18,Y+12
    005E5 853D      LDD	R19,Y+13
    005E6 937A      ST	-Y,R23
    005E7 936A      ST	-Y,R22
    005E8 935A      ST	-Y,R21
    005E9 934A      ST	-Y,R20
    005EA 940E 0809 CALL	div32s
    005EC 870A      STD	Y+10,R16
    005ED 871B      STD	Y+11,R17
    005EE 872C      STD	Y+12,R18
    005EF 873D      STD	Y+13,R19
(0357) 		write7279 ( DECODE0 + i , 0x00 +  temp_char );//0x00为不加点显示，0x80为加点显示
    005F0 2D2E      MOV	R18,R14
    005F1 2D0A      MOV	R16,R10
    005F2 5800      SUBI	R16,0x80
    005F3 DD2D      RCALL	_write7279
    005F4 94A3      INC	R10
    005F5 2C2C      MOV	R2,R12
    005F6 2433      CLR	R3
    005F7 2C4A      MOV	R4,R10
    005F8 2455      CLR	R5
    005F9 1424      CP	R2,R4
    005FA 0435      CPC	R3,R5
    005FB F61C      BGE	0x05BF
    005FC 940C 08B6 JMP	pop_xgsetF0FC
_dis_data_RP:
  temp_char            --> R14
  i                    --> R10
  rp                   --> R12
  num                  --> Y,+12
  dig_end              --> Y,+10
  dig_start            --> R14
    005FE 933A      ST	-Y,R19
    005FF 932A      ST	-Y,R18
    00600 940E 08C1 CALL	push_xgsetF0FC
    00602 2EE0      MOV	R14,R16
    00603 88C8      LDD	R12,Y+16
    00604 88D9      LDD	R13,Y+17
(0358) 
(0359) 	}
(0360) }
(0361) 
(0362) 
(0363) //带小数点显示，可以在rp位显示小数点
(0364) void dis_data_RP ( unsigned char dig_start,unsigned char dig_end,signed long num,int rp)
(0365) {
(0366) 	unsigned char i,temp_char;
(0367) 	
(0368) 	for( i = dig_start; i <= dig_end; i++ )
    00605 2CAE      MOV	R10,R14
    00606 C041      RJMP	0x0648
(0369) 	{
(0370) 		temp_char = num % 10;
    00607 E04A      LDI	R20,0xA
    00608 E050      LDI	R21,0
    00609 E060      LDI	R22,0
    0060A E070      LDI	R23,0
    0060B 850C      LDD	R16,Y+12
    0060C 851D      LDD	R17,Y+13
    0060D 852E      LDD	R18,Y+14
    0060E 853F      LDD	R19,Y+15
    0060F 937A      ST	-Y,R23
    00610 936A      ST	-Y,R22
    00611 935A      ST	-Y,R21
    00612 934A      ST	-Y,R20
    00613 940E 080B CALL	mod32s
    00615 2EE0      MOV	R14,R16
(0371) 		num -= temp_char;
    00616 2C2E      MOV	R2,R14
    00617 2433      CLR	R3
    00618 2444      CLR	R4
    00619 2455      CLR	R5
    0061A 846C      LDD	R6,Y+12
    0061B 847D      LDD	R7,Y+13
    0061C 848E      LDD	R8,Y+14
    0061D 849F      LDD	R9,Y+15
    0061E 1862      SUB	R6,R2
    0061F 0873      SBC	R7,R3
    00620 0884      SBC	R8,R4
    00621 0895      SBC	R9,R5
    00622 866C      STD	Y+12,R6
    00623 867D      STD	Y+13,R7
    00624 868E      STD	Y+14,R8
    00625 869F      STD	Y+15,R9
(0372) 		num /= 10;
    00626 E04A      LDI	R20,0xA
    00627 E050      LDI	R21,0
    00628 E060      LDI	R22,0
    00629 E070      LDI	R23,0
    0062A 850C      LDD	R16,Y+12
    0062B 851D      LDD	R17,Y+13
    0062C 852E      LDD	R18,Y+14
    0062D 853F      LDD	R19,Y+15
    0062E 937A      ST	-Y,R23
    0062F 936A      ST	-Y,R22
    00630 935A      ST	-Y,R21
    00631 934A      ST	-Y,R20
    00632 940E 0809 CALL	div32s
    00634 870C      STD	Y+12,R16
    00635 871D      STD	Y+13,R17
    00636 872E      STD	Y+14,R18
    00637 873F      STD	Y+15,R19
(0373) 		if(i!=rp)
    00638 2C2A      MOV	R2,R10
    00639 2433      CLR	R3
    0063A 142C      CP	R2,R12
    0063B 043D      CPC	R3,R13
    0063C F029      BEQ	0x0642
(0374) 		write7279 ( DECODE0 + i , 0x00 +  temp_char );//0x00为不加点显示，0x80为加点显示
    0063D 2D2E      MOV	R18,R14
    0063E 2D02      MOV	R16,R2
    0063F 5800      SUBI	R16,0x80
    00640 DCE0      RCALL	_write7279
    00641 C005      RJMP	0x0647
(0375) 		else
(0376) 		write7279 ( DECODE0 + i , 0X80 +  temp_char );
    00642 2D2E      MOV	R18,R14
    00643 5820      SUBI	R18,0x80
    00644 2D0A      MOV	R16,R10
    00645 5800      SUBI	R16,0x80
    00646 DCDA      RCALL	_write7279
    00647 94A3      INC	R10
    00648 842A      LDD	R2,Y+10
    00649 2433      CLR	R3
    0064A 2C4A      MOV	R4,R10
    0064B 2455      CLR	R5
    0064C 1424      CP	R2,R4
    0064D 0435      CPC	R3,R5
    0064E F00C      BLT	0x0650
    0064F CFB7      RJMP	0x0607
    00650 940E 08B6 CALL	pop_xgsetF0FC
    00652 9622      ADIW	R28,2
    00653 9508      RET
_get_data:
  temp_long            --> Y,+0
  temp_char            --> R14
  i                    --> R10
  dig_end              --> R14
  dig_start            --> R12
    00654 940E 08C1 CALL	push_xgsetF0FC
    00656 2EE2      MOV	R14,R18
    00657 2EC0      MOV	R12,R16
    00658 9724      SBIW	R28,4
(0377) 	}
(0378) }/**/
(0379) 
(0380) signed long get_data ( signed char dig_start,signed char dig_end )
(0381) {
(0382) 	signed long temp_long = 0;
    00659 E080      LDI	R24,0
    0065A 8388      ST	Y,R24
    0065B 8389      STD	Y+1,R24
    0065C 838A      STD	Y+2,R24
    0065D 838B      STD	Y+3,R24
(0383) 	signed char i,temp_char;	
(0384) 	
(0385) 	for( i = dig_start; i <= dig_end; i++ )
    0065E 2CAC      MOV	R10,R12
    0065F C005      RJMP	0x0665
(0386) 		write7279(UNDECODE + i,0x08);  //显示为'_'
    00660 E028      LDI	R18,0x8
    00661 2D0A      MOV	R16,R10
    00662 5700      SUBI	R16,0x70
    00663 DCBD      RCALL	_write7279
    00664 94A3      INC	R10
    00665 14EA      CP	R14,R10
    00666 F7CC      BGE	0x0660
(0387) 		
(0388) 	for( i = dig_end; i >= dig_start ; i-- )
    00667 2CAE      MOV	R10,R14
    00668 C032      RJMP	0x069B
(0389) 	{
(0390) 		temp_char = get_key7279();
    00669 DCC5      RCALL	_get_key7279
    0066A 2EE0      MOV	R14,R16
(0391) 		
(0392) 		temp_long *= 10;
    0066B 8028      LD	R2,Y
    0066C 8039      LDD	R3,Y+1
    0066D 804A      LDD	R4,Y+2
    0066E 805B      LDD	R5,Y+3
    0066F E04A      LDI	R20,0xA
    00670 E050      LDI	R21,0
    00671 E060      LDI	R22,0
    00672 E070      LDI	R23,0
    00673 925A      ST	-Y,R5
    00674 924A      ST	-Y,R4
    00675 923A      ST	-Y,R3
    00676 922A      ST	-Y,R2
    00677 018A      MOVW	R16,R20
    00678 019B      MOVW	R18,R22
    00679 940E 087D CALL	empy32s|empy32u
    0067B 8308      ST	Y,R16
    0067C 8319      STD	Y+1,R17
    0067D 832A      STD	Y+2,R18
    0067E 833B      STD	Y+3,R19
(0393) 		temp_long += temp_char;
    0067F 2C2E      MOV	R2,R14
    00680 2433      CLR	R3
    00681 FC27      SBRC	R2,7
    00682 9430      COM	R3
    00683 2444      CLR	R4
    00684 FC37      SBRC	R3,7
    00685 9440      COM	R4
    00686 2455      CLR	R5
    00687 FC47      SBRC	R4,7
    00688 9450      COM	R5
    00689 8068      LD	R6,Y
    0068A 8079      LDD	R7,Y+1
    0068B 808A      LDD	R8,Y+2
    0068C 809B      LDD	R9,Y+3
    0068D 0C62      ADD	R6,R2
    0068E 1C73      ADC	R7,R3
    0068F 1C84      ADC	R8,R4
    00690 1C95      ADC	R9,R5
    00691 8268      ST	Y,R6
    00692 8279      STD	Y+1,R7
    00693 828A      STD	Y+2,R8
    00694 829B      STD	Y+3,R9
(0394) 		
(0395) 		write7279 ( DECODE1 + i , 0x80 +  temp_char); //1译码可以显示字母
    00695 2D2E      MOV	R18,R14
    00696 5820      SUBI	R18,0x80
    00697 2D0A      MOV	R16,R10
    00698 5308      SUBI	R16,0x38
    00699 DC87      RCALL	_write7279
    0069A 94AA      DEC	R10
    0069B 14AC      CP	R10,R12
    0069C F664      BGE	0x0669
(0396) 	}
(0397) 	delay10ms(5);
    0069D E005      LDI	R16,5
    0069E E010      LDI	R17,0
    0069F DCAC      RCALL	_delay10ms
(0398) 	send_byte(CMD_RESET);
    006A0 EA04      LDI	R16,0xA4
    006A1 DCC0      RCALL	_send_byte
(0399) 		
(0400) 	return temp_long;		
    006A2 8108      LD	R16,Y
    006A3 8119      LDD	R17,Y+1
    006A4 812A      LDD	R18,Y+2
    006A5 813B      LDD	R19,Y+3
    006A6 9624      ADIW	R28,4
    006A7 940C 08B6 JMP	pop_xgsetF0FC
FILE: C:\Users\HaiPiao\Desktop\附小实验\程序\project\DS18B20.c
(0001) /**------------------------------------------------------------------------------
(0002) **  MCU        : ATmega16(Atmel)
(0003) **  Compiler   : ICCAVR 7.22
(0004) **  Module Name: 
(0005) **  Module Date: 
(0006) **  Module Auth: 
(0007) **  Description: 
(0008) **  Version    : V1.0
(0009) **  Notes      : 
(0010) **------------------------------------------------------------------------------
(0011) **  Version    : 
(0012) **  Modified By: 
(0013) **  Date       : 
(0014) **  Content    : 
(0015) **  Notes      : 
(0016) *******************************************************************************/
(0017) 
(0018) /*----------------------------  I N C L U D E S  -----------------------------*/
(0019) #include "DS18B20.h"
(0020) 
(0021) /*--------------------------  D E F I N I T I O N  ---------------------------*/
(0022) 
(0023) /*---------------------------  F U N C T I O N S  ----------------------------*/
(0024) /*******************************************************************************
(0025) Function Name: void DS18B20Init(void)
(0026) Author       : 
(0027) Date         : 
(0028) Description  : 
(0029) Inputs       : None
(0030) Outputs      : None
(0031) Notes        : 
(0032) Revision     : 
(0033) *******************************************************************************/
(0034) void DS18B20Init(void)  
(0035) {  
(0036) 
(0037)    DDRD|=BIT(DQ); //DQ 为输出状态
_DS18B20Init:
    006A9 9A8D      SBI	0x11,5
(0038)    PORTD&=~BIT(DQ); //输出低电平
    006AA 9895      CBI	0x12,5
(0039)    Delay_us1(500); //延迟500 微妙
    006AB EF04      LDI	R16,0xF4
    006AC E011      LDI	R17,1
    006AD 940E 072C CALL	_Delay_us1
(0040)    PORTD|=BIT(DQ); //示范总线
    006AF 9A95      SBI	0x12,5
(0041)    Delay_us1(60); //延迟60 微妙
    006B0 E30C      LDI	R16,0x3C
    006B1 E010      LDI	R17,0
    006B2 940E 072C CALL	_Delay_us1
(0042)    DDRD&=~BIT(DQ); //DQ 位输入状态
    006B4 988D      CBI	0x11,5
(0043)    while(PIND&BIT(DQ)); //等待从机DS18B20 应答（低电平有效）
    006B5 9985      SBIC	0x10,5
    006B6 CFFE      RJMP	0x06B5
(0044)    while(!(PIND&BIT(DQ)));
    006B7 9B85      SBIS	0x10,5
    006B8 CFFE      RJMP	0x06B7
    006B9 9508      RET
_write_1820:
  i                    --> R20
  Data                 --> R10
    006BA 92AA      ST	-Y,R10
    006BB 934A      ST	-Y,R20
    006BC 2EA0      MOV	R10,R16
(0045) 
(0046) }  
(0047) /*******************************************************************************
(0048) Function Name: void write_1820(unsigned char Data)  
(0049) Author       : 
(0050) Date         : 
(0051) Description  : 
(0052) Inputs       : None
(0053) Outputs      : None
(0054) Notes        : 
(0055) Revision     : 
(0056) *******************************************************************************/
(0057) void write_1820(unsigned char Data)  
(0058) {   
(0059) 
(0060)     unsigned char i;
(0061)     DDRD|=BIT(DQ); //DQ 为输出
    006BD 9A8D      SBI	0x11,5
(0062)    for(i=0;i<8;i++)
    006BE 2744      CLR	R20
    006BF C017      RJMP	0x06D7
(0063)    {
(0064)     PORTD&=~BIT(DQ); //拉低总线
    006C0 9895      CBI	0x12,5
(0065)     Delay_us1(10); //延迟10 微妙（最大15 微妙）
    006C1 E00A      LDI	R16,0xA
    006C2 E010      LDI	R17,0
    006C3 940E 072C CALL	_Delay_us1
(0066)     if(Data&0x01) 
    006C5 FEA0      SBRS	R10,0
    006C6 C002      RJMP	0x06C9
(0067) 	  PORTD|=BIT(DQ);
    006C7 9A95      SBI	0x12,5
    006C8 C001      RJMP	0x06CA
(0068)     else PORTD&=~BIT(DQ);
    006C9 9895      CBI	0x12,5
(0069)       Delay_us(40); //延迟40 微妙（最大45 微妙） 
    006CA E208      LDI	R16,0x28
    006CB E010      LDI	R17,0
    006CC E020      LDI	R18,0
    006CD E030      LDI	R19,0
    006CE 940E 0712 CALL	_Delay_us
(0070) 	PORTD|=BIT(DQ); //释放总线
    006D0 9A95      SBI	0x12,5
(0071)    Delay_us1(1); //稍微延迟
    006D1 E001      LDI	R16,1
    006D2 E010      LDI	R17,0
    006D3 940E 072C CALL	_Delay_us1
(0072)     Data>>=1;}
    006D5 94A6      LSR	R10
    006D6 9543      INC	R20
    006D7 3048      CPI	R20,0x8
    006D8 F338      BCS	0x06C0
    006D9 9149      LD	R20,Y+
    006DA 90A9      LD	R10,Y+
    006DB 9508      RET
_read_1820:
  Temp                 --> R20
  i                    --> R22
    006DC 934A      ST	-Y,R20
    006DD 936A      ST	-Y,R22
(0073) 
(0074) }  
(0075) /*******************************************************************************
(0076) Function Name: 
(0077) Author       : 
(0078) Date         : 
(0079) Description  : 
(0080) Inputs       : None
(0081) Outputs      : None
(0082) Notes        : 
(0083) Revision     : 
(0084) *******************************************************************************/
(0085) unsigned char read_1820(void)  
(0086) {   
(0087)    unsigned char i,Temp;
(0088)    for(i=0;i<8;i++)
    006DE 2766      CLR	R22
    006DF C00D      RJMP	0x06ED
(0089)  {
(0090)    Temp>>=1; //数据右移
    006E0 9546      LSR	R20
(0091)    DDRD|=BIT(DQ); //DQ 为输出状态
    006E1 9A8D      SBI	0x11,5
(0092)    PORTD&=~BIT(DQ); //拉低总线，启动输入
    006E2 9895      CBI	0x12,5
(0093)   PORTD|=BIT(DQ); //释放总线
    006E3 9A95      SBI	0x12,5
(0094)    DDRD&=~BIT(DQ); //DQ 为输入状态
    006E4 988D      CBI	0x11,5
(0095)   if(PIND&BIT(DQ)) 
    006E5 9B85      SBIS	0x10,5
    006E6 C001      RJMP	0x06E8
(0096)   Temp|=0x80;
    006E7 6840      ORI	R20,0x80
(0097)   Delay_us1(45); //延迟45 微妙（最大45 微妙）
    006E8 E20D      LDI	R16,0x2D
    006E9 E010      LDI	R17,0
    006EA 940E 072C CALL	_Delay_us1
    006EC 9563      INC	R22
    006ED 3068      CPI	R22,0x8
    006EE F388      BCS	0x06E0
(0098)    }
(0099) 
(0100) 
(0101) return Temp; } 
    006EF 2F04      MOV	R16,R20
    006F0 9169      LD	R22,Y+
    006F1 9149      LD	R20,Y+
    006F2 9508      RET
_gettemp:
  Temperature          --> R10
  TEM                  --> R10
  teml                 --> R10
  temh                 --> R12
    006F3 940E 08C7 CALL	push_xgset003C
(0102) 
(0103) 
(0104) 
(0105) 
(0106) /*******************************************************************************
(0107) Function Name: 
(0108) Author       : 
(0109) Date         : 
(0110) Description  : 
(0111) Inputs       : None
(0112) Outputs      : None
(0113) Notes        : 
(0114) Revision     : 
(0115) *******************************************************************************/
(0116) INT32U gettemp(void)  //读取温度值 
(0117) {  //约5 ms
(0118)      unsigned int temh,teml;  
(0119) 	 INT16U TEM;
(0120)      unsigned int  Temperature=0; //返回Tc,实际的温度T=Tc*0.1,这里用整数运算
(0121) 	
(0122)      DS18B20Init();        //复位18b20  
    006F5 DFB3      RCALL	_DS18B20Init
(0123)      write_1820(0xcc);   // 发出转换命令  
    006F6 EC0C      LDI	R16,0xCC
    006F7 DFC2      RCALL	_write_1820
(0124)      write_1820(0x44); 
    006F8 E404      LDI	R16,0x44
    006F9 DFC0      RCALL	_write_1820
(0125)      
(0126)      DS18B20Init();  
    006FA DFAE      RCALL	_DS18B20Init
(0127)      write_1820(0xcc);  //发出读命令  
    006FB EC0C      LDI	R16,0xCC
    006FC DFBD      RCALL	_write_1820
(0128)      write_1820(0xbe);  
    006FD EB0E      LDI	R16,0xBE
    006FE DFBB      RCALL	_write_1820
(0129)      teml=read_1820();   
    006FF DFDC      RCALL	_read_1820
    00700 2EA0      MOV	R10,R16
    00701 24BB      CLR	R11
(0130)      temh=read_1820();  //读数据
    00702 DFD9      RCALL	_read_1820
    00703 2EC0      MOV	R12,R16
    00704 24DD      CLR	R13
(0131) 	 
(0132) 	 TEM = ((temh<<8)|teml);
    00705 0116      MOVW	R2,R12
    00706 2C32      MOV	R3,R2
    00707 2422      CLR	R2
    00708 282A      OR	R2,R10
    00709 283B      OR	R3,R11
    0070A 0151      MOVW	R10,R2
(0133) 	/* if((1<<15)&(TEM))//等于1，表示为负
(0134) 	 {
(0135) 	  TEM = ((1<<12)-(TEM&~(0X1F<<15)));//负数求补码
(0136) 	 } 
(0137) 	 else
(0138) 	 {
(0139) 	  TEM = ((temh<<8)|teml);
(0140) 	 }*/	 	 
(0141) 	 DS18B20Init(); 
    0070B DF9D      RCALL	_DS18B20Init
(0142) 	 return TEM;//*6.25;//(((temh<<8)|teml)*6.25);
    0070C 0185      MOVW	R16,R10
    0070D 0196      MOVW	R18,R12
    0070E 2722      CLR	R18
    0070F 2733      CLR	R19
    00710 940C 08B1 JMP	pop_xgset003C
_Delay_us:
  i                    --> R20
  n                    --> Y,+2
    00712 940E 07FE CALL	push_arg4
    00714 934A      ST	-Y,R20
    00715 935A      ST	-Y,R21
FILE: C:\Users\HaiPiao\Desktop\附小实验\程序\project\Delay.c
(0001) /*******************************************************************************
(0002) **  Copyright (c)   2011       USTB MEI
(0003) **                  All Rights Reserved
(0004) **  
(0005) **  
(0006) **-----------------------------------------------------------------------------
(0007) **  MCU        : ATmega16 (Atmel)
(0008) **  Compiler   : ICCAVR 7.22
(0009) **  Module Name: Delay.c
(0010) **  Module Date: 2011-03-28
(0011) **  Module Auth: 吴勤兵
(0012) **  Description: Delay functions for ATmega16 at 7.3728MHz
(0013) **  Version    : V1.0
(0014) **  Notes      : These delay functions are suited for ATmega8 at 7.3728MHz.
(0015) **------------------------------------------------------------------------------
(0016) **  Version    : 
(0017) **  Modified By: 
(0018) **  Date       : 
(0019) **  Content    : 
(0020) **  Notes      : 
(0021) *******************************************************************************/
(0022) 
(0023) /*----------------------------  I N C L U D E S  -----------------------------*/
(0024) #include "Delay.h"
(0025) 
(0026) /*--------------------------  D E F I N I T I O N  ---------------------------*/
(0027) 
(0028) /*---------------------------  F U N C T I O N S  ----------------------------*/
(0029) /*******************************************************************************
(0030) Function Name: Delay_us
(0031) Author       : 吴勤兵
(0032) Date         : 2011-03-14
(0033) Description  : Delay n us
(0034) Inputs       : UINT16 n -- n us
(0035) Outputs      : None
(0036) Notes        : 
(0037) Revision     : 
(0038) *******************************************************************************/
(0039) void Delay_us(INT32U n)
(0040) {          
(0041)     unsigned int i = 0;	
(0042)     for(i = 0; i < n; i++)
    00716 2744      CLR	R20
    00717 2755      CLR	R21
    00718 C003      RJMP	0x071C
(0043)     {
(0044)         NOP();
    00719 0000      NOP
    0071A 5F4F      SUBI	R20,0xFF
    0071B 4F5F      SBCI	R21,0xFF
    0071C 802A      LDD	R2,Y+2
    0071D 803B      LDD	R3,Y+3
    0071E 804C      LDD	R4,Y+4
    0071F 805D      LDD	R5,Y+5
    00720 013A      MOVW	R6,R20
    00721 2488      CLR	R8
    00722 2499      CLR	R9
    00723 1462      CP	R6,R2
    00724 0473      CPC	R7,R3
    00725 0484      CPC	R8,R4
    00726 0495      CPC	R9,R5
    00727 F388      BCS	0x0719
    00728 9159      LD	R21,Y+
    00729 9149      LD	R20,Y+
    0072A 9624      ADIW	R28,4
    0072B 9508      RET
_Delay_us1:
  j                    --> R10
  i                    --> R20
  n                    --> R16
    0072C 940E 08CC CALL	push_xgset300C
(0045)     }
(0046) }
(0047) 
(0048) 
(0049) void Delay_us1(int n)
(0050) {          
(0051)     int i = 0;
(0052)     int j = 0;
    0072E 24AA      CLR	R10
    0072F 24BB      CLR	R11
(0053) 	
(0054)     for(i = 0; i < n; i++)
    00730 2744      CLR	R20
    00731 2755      CLR	R21
    00732 C00A      RJMP	0x073D
(0055)     {
(0056)          NOP();
    00733 0000      NOP
(0057) 		 NOP();
    00734 0000      NOP
(0058) 		 NOP();
    00735 0000      NOP
(0059) 		 NOP();
    00736 0000      NOP
(0060) 		 NOP();
    00737 0000      NOP
(0061) 		 NOP();
    00738 0000      NOP
(0062) 		 NOP();
    00739 0000      NOP
(0063) 		 NOP();		
    0073A 0000      NOP
    0073B 5F4F      SUBI	R20,0xFF
    0073C 4F5F      SBCI	R21,0xFF
    0073D 1740      CP	R20,R16
    0073E 0751      CPC	R21,R17
    0073F F39C      BLT	0x0733
    00740 940C 08D1 JMP	pop_xgset300C
_Delay_ms:
  i                    --> R20
  j                    --> R22
  n                    --> R16
    00742 940E 08D6 CALL	push_xgsetF000
(0064)     }
(0065) }
(0066) 
(0067) /*******************************************************************************
(0068) Function Name: Delay_ms
(0069) Author       : 吴勤兵
(0070) Date         : 2011-03-14
(0071) Description  : Delay n ms
(0072) Inputs       : UINT16 n -- n ms
(0073) Outputs      : None
(0074) Notes        : 
(0075) Revision     : 
(0076) *******************************************************************************/
(0077) void Delay_ms(unsigned int n)
(0078) {          
(0079)     unsigned int i = 0;
(0080)     unsigned int j = 0;
    00744 2766      CLR	R22
    00745 2777      CLR	R23
(0081) 	
(0082)     for(i = 0; i < n; i++)
    00746 2744      CLR	R20
    00747 2755      CLR	R21
    00748 C00B      RJMP	0x0754
(0083)     {
(0084)         for(j = 0; j < 2100; j++)
    00749 2766      CLR	R22
    0074A 2777      CLR	R23
    0074B C002      RJMP	0x074E
    0074C 5F6F      SUBI	R22,0xFF
    0074D 4F7F      SBCI	R23,0xFF
    0074E 3364      CPI	R22,0x34
    0074F E0E8      LDI	R30,0x8
    00750 077E      CPC	R23,R30
    00751 F3D0      BCS	0x074C
    00752 5F4F      SUBI	R20,0xFF
    00753 4F5F      SBCI	R21,0xFF
    00754 1740      CP	R20,R16
    00755 0751      CPC	R21,R17
    00756 F390      BCS	0x0749
    00757 940C 08DB JMP	pop_xgsetF000
_Delay_ms1:
  i                    --> R20
  j                    --> R22
  n                    --> R16
    00759 940E 08D6 CALL	push_xgsetF000
(0085)         {
(0086)             // Delay n ms
(0087)         }
(0088)     }
(0089) }
(0090) 
(0091) void Delay_ms1(int n)
(0092) {          
(0093)     int i = 0;
(0094)     int j = 0;
    0075B 2766      CLR	R22
    0075C 2777      CLR	R23
(0095) 	
(0096)     for(i = 0; i < n; i++)
    0075D 2744      CLR	R20
    0075E 2755      CLR	R21
    0075F C00A      RJMP	0x076A
(0097)     {
(0098)         for(j = 0; j < 2000; j++)
    00760 2766      CLR	R22
    00761 2777      CLR	R23
    00762 5F6F      SUBI	R22,0xFF
    00763 4F7F      SBCI	R23,0xFF
    00764 3D60      CPI	R22,0xD0
    00765 E0E7      LDI	R30,7
    00766 077E      CPC	R23,R30
    00767 F3D4      BLT	0x0762
    00768 5F4F      SUBI	R20,0xFF
    00769 4F5F      SBCI	R21,0xFF
    0076A 1740      CP	R20,R16
    0076B 0751      CPC	R21,R17
    0076C F39C      BLT	0x0760
    0076D 940C 08DB JMP	pop_xgsetF000
FILE: C:\Users\HaiPiao\Desktop\附小实验\程序\project\HC_SR04.c
(0001) /*******************************************************************************
(0002) **  MCU        : ATmega16 (Atmel)
(0003) **  Compiler   : ICCAVR 7.22
(0004) **  Module Name: HC_SR04.c
(0005) **  Module Date: 2015-10-22
(0006) **  Module Auth: 蔡海飘
(0007) **  Description: 超声波传感器
(0008) **  Version    : V1.0
(0009) **  Notes      : 
(0010) **------------------------------------------------------------------------------
(0011) /*----------------------------  I N C L U D E S  -----------------------------*/
(0012) #include "HC_SR04.h"
(0013) #include "AVRTypes.h"
(0014) /*--------------------------  D E F I N I T I O N  ---------------------------*/
(0015) //#define basic_Frequency 7.3728*10^6
(0016) 
(0017) 
(0018) unsigned char TimerOut_Flag = 0;
(0019) /*---------------------------  F U N C T I O N S  ----------------------------*/
(0020) void HC_SR04_Init(void)
(0021) {
(0022)  	 DDRD |= (0x01<<3);//TRIG output
_HC_SR04_Init:
    0076F 9A8B      SBI	0x11,3
(0023) 	 DDRD &= ~(0x01<<4);//ECHO input
    00770 988C      CBI	0x11,4
(0024) 	 PORTD &=~(0X01<<3);//TRIG output LOW
    00771 9893      CBI	0x12,3
    00772 9508      RET
(0025) }  
(0026) 
(0027) //TIMER1 initialize - prescale:1
(0028) // WGM: 0) Normal, TOP=0xFFFF
(0029) // desired value: 1KHz
(0030) // actual value:  1.000KHz (0.0%)
(0031) void timer1_init(void)
(0032) {
(0033)  TCCR1B = 0x00; //stop
_timer1_init:
    00773 2422      CLR	R2
    00774 BC2E      OUT	0x2E,R2
(0034)  TCNT1H = 0x00; //setup
    00775 BC2D      OUT	0x2D,R2
(0035)  TCNT1L = 0x00;
    00776 BC2C      OUT	0x2C,R2
(0036)  OCR1AH = 0xE0;
    00777 EE80      LDI	R24,0xE0
    00778 BD8B      OUT	0x2B,R24
(0037)  OCR1AL = 0xFF;
    00779 EF8F      LDI	R24,0xFF
    0077A BD8A      OUT	0x2A,R24
(0038)  OCR1BH = 0xE0;
    0077B EE80      LDI	R24,0xE0
    0077C BD89      OUT	0x29,R24
(0039)  OCR1BL = 0xFF;
    0077D EF8F      LDI	R24,0xFF
    0077E BD88      OUT	0x28,R24
(0040)  ICR1H  = 0xE0;
    0077F EE80      LDI	R24,0xE0
    00780 BD87      OUT	0x27,R24
(0041)  ICR1L  = 0xFF;
    00781 EF8F      LDI	R24,0xFF
    00782 BD86      OUT	0x26,R24
(0042)  TCCR1A = 0x00;
    00783 BC2F      OUT	0x2F,R2
(0043)  TCCR1B = 0x00; //start Timer
    00784 BC2E      OUT	0x2E,R2
    00785 9508      RET
_timer1_ovf_isr:
    00786 922A      ST	-Y,R2
    00787 938A      ST	-Y,R24
    00788 B62F      IN	R2,0x3F
    00789 922A      ST	-Y,R2
(0044) }
(0045) 
(0046) #pragma interrupt_handler timer1_ovf_isr:iv_TIM1_OVF
(0047) void timer1_ovf_isr(void)
(0048) {
(0049)  //TIMER1 has overflowed
(0050)  TCNT1H = 0x00; //reload counter high value
    0078A 2422      CLR	R2
    0078B BC2D      OUT	0x2D,R2
(0051)  TCNT1L = 0x00; //reload counter low value
    0078C BC2C      OUT	0x2C,R2
(0052)  //PORTC ^= (0X01<<6);
(0053)  TimerOut_Flag = 1;
    0078D E081      LDI	R24,1
    0078E 9380 013A STS	TimerOut_Flag,R24
(0054)  TCCR1B = 0x00; //stop
    00790 BC2E      OUT	0x2E,R2
    00791 9029      LD	R2,Y+
    00792 BE2F      OUT	0x3F,R2
    00793 9189      LD	R24,Y+
    00794 9029      LD	R2,Y+
    00795 9518      RETI
_GetDistance:
  Time                 --> R10
  distance             --> Y,+0
    00796 92AA      ST	-Y,R10
    00797 92BA      ST	-Y,R11
    00798 9724      SBIW	R28,4
(0055)  
(0056) }
(0057) 
(0058) float GetDistance(void)
(0059) {
(0060)     float distance = 0;
    00799 EA00      LDI	R16,0xA0
    0079A E010      LDI	R17,0
    0079B 940E 091C CALL	lpm32
    0079D 8308      ST	Y,R16
    0079E 8319      STD	Y+1,R17
    0079F 832A      STD	Y+2,R18
    007A0 833B      STD	Y+3,R19
(0061) 	INT16U Time = 0;
    007A1 24AA      CLR	R10
    007A2 24BB      CLR	R11
(0062) 	TimerOut_Flag = 0;
    007A3 2422      CLR	R2
    007A4 9220 013A STS	TimerOut_Flag,R2
(0063) 	TRIG_High;
    007A6 9A93      SBI	0x12,3
(0064) 	Delay_us(10);
    007A7 E00A      LDI	R16,0xA
    007A8 E010      LDI	R17,0
    007A9 E020      LDI	R18,0
    007AA E030      LDI	R19,0
    007AB 940E 0712 CALL	_Delay_us
(0065) 	TRIG_Low;
    007AD 9893      CBI	0x12,3
(0066) 	while(!ECHO_Read);//wait ECHO output high
    007AE 9B84      SBIS	0x10,4
    007AF CFFE      RJMP	0x07AE
(0067) 	TCNT1H = 0x0; //reload counter high value
    007B0 2422      CLR	R2
    007B1 BC2D      OUT	0x2D,R2
(0068)     TCNT1L = 0x0; //reload counter low value
    007B2 BC2C      OUT	0x2C,R2
(0069) 	TCCR1B = 0x01; //start Timer}
    007B3 E081      LDI	R24,1
    007B4 BD8E      OUT	0x2E,R24
(0070) 	while(ECHO_Read&&!TimerOut_Flag);//  wait ECHO output low or time out
    007B5 9B84      SBIS	0x10,4
    007B6 C004      RJMP	0x07BB
    007B7 9020 013A LDS	R2,TimerOut_Flag
    007B9 2022      TST	R2
    007BA F3D1      BEQ	0x07B5
(0071) 	TCCR1B = 0x00; //stop
    007BB 2422      CLR	R2
    007BC BC2E      OUT	0x2E,R2
(0072) 	if(TimerOut_Flag)                                  
    007BD 9020 013A LDS	R2,TimerOut_Flag
    007BF 2022      TST	R2
    007C0 F029      BEQ	0x07C6
(0073) 	{
(0074) 	   Time = 0xffff;
    007C1 EF8F      LDI	R24,0xFF
    007C2 EF9F      LDI	R25,0xFF
    007C3 015C      MOVW	R10,R24
(0075) 	   PORTC |= (0X01<<6);   
    007C4 9AAE      SBI	0x15,6
(0076) 	}
    007C5 C003      RJMP	0x07C9
(0077) 	else
(0078) 	{
(0079) 	   Time = TCNT1;
    007C6 B4AC      IN	R10,0x2C
    007C7 B4BD      IN	R11,0x2D
(0080) 	   PORTC &= ~(0X01<<6);
    007C8 98AE      CBI	0x15,6
(0081) 	}   
(0082) 	   
(0083) 	distance = ((float)Time)*170*1000/7372800;
    007C9 E90C      LDI	R16,0x9C
    007CA E010      LDI	R17,0
    007CB 940E 091C CALL	lpm32
    007CD 0118      MOVW	R2,R16
    007CE 0129      MOVW	R4,R18
    007CF E908      LDI	R16,0x98
    007D0 E010      LDI	R17,0
    007D1 940E 091C CALL	lpm32
    007D3 0138      MOVW	R6,R16
    007D4 0149      MOVW	R8,R18
    007D5 0185      MOVW	R16,R10
    007D6 940E 0969 CALL	uint2fp
    007D8 933A      ST	-Y,R19
    007D9 932A      ST	-Y,R18
    007DA 931A      ST	-Y,R17
    007DB 930A      ST	-Y,R16
    007DC 0183      MOVW	R16,R6
    007DD 0194      MOVW	R18,R8
    007DE 940E 0B11 CALL	fpmule2x
    007E0 0181      MOVW	R16,R2
    007E1 0192      MOVW	R18,R4
    007E2 940E 0B06 CALL	fpmule2
    007E4 0118      MOVW	R2,R16
    007E5 0129      MOVW	R4,R18
    007E6 E904      LDI	R16,0x94
    007E7 E010      LDI	R17,0
    007E8 940E 091C CALL	lpm32
    007EA 933A      ST	-Y,R19
    007EB 932A      ST	-Y,R18
    007EC 931A      ST	-Y,R17
    007ED 930A      ST	-Y,R16
    007EE 0181      MOVW	R16,R2
    007EF 0192      MOVW	R18,R4
    007F0 940E 0996 CALL	fpdiv2
    007F2 8308      ST	Y,R16
    007F3 8319      STD	Y+1,R17
    007F4 832A      STD	Y+2,R18
    007F5 833B      STD	Y+3,R19
(0084) 	return distance;
FILE: <library>
    007F6 8108      LD	R16,Y
    007F7 8119      LDD	R17,Y+1
    007F8 812A      LDD	R18,Y+2
    007F9 813B      LDD	R19,Y+3
    007FA 9624      ADIW	R28,4
    007FB 90B9      LD	R11,Y+
    007FC 90A9      LD	R10,Y+
    007FD 9508      RET
push_arg4:
    007FE 933A      ST	-Y,R19
    007FF 932A      ST	-Y,R18
push_arg2:
    00800 931A      ST	-Y,R17
    00801 930A      ST	-Y,R16
    00802 9508      RET
div32u:
    00803 94E8      BCLR	6
    00804 C001      RJMP	0x0806
mod32u:
    00805 9468      BSET	6
    00806 D030      RCALL	long_div_prolog
    00807 24CC      CLR	R12
    00808 C009      RJMP	0x0812
div32s:
    00809 94E8      BCLR	6
    0080A C001      RJMP	0x080C
mod32s:
    0080B 9468      BSET	6
    0080C D02A      RCALL	long_div_prolog
    0080D FD37      SBRC	R19,7
    0080E 940E 08EE CALL	neg32
    00810 FDB7      SBRC	R27,7
    00811 D052      RCALL	neg_R24_R27
    00812 2477      CLR	R7
    00813 2488      CLR	R8
    00814 2499      CLR	R9
    00815 24AA      CLR	R10
    00816 24BB      CLR	R11
    00817 D042      RCALL	tst_R16_R19
    00818 F0C1      BEQ	0x0831
    00819 D045      RCALL	tst_R24_R27
    0081A F0B1      BEQ	0x0831
    0081B E2E8      LDI	R30,0x28
    0081C 0F00      LSL	R16
    0081D 1F11      ROL	R17
    0081E 1F22      ROL	R18
    0081F 1F33      ROL	R19
    00820 1C77      ROL	R7
    00821 1C88      ROL	R8
    00822 1C99      ROL	R9
    00823 1CAA      ROL	R10
    00824 1CBB      ROL	R11
    00825 1688      CP	R8,R24
    00826 0699      CPC	R9,R25
    00827 06AA      CPC	R10,R26
    00828 06BB      CPC	R11,R27
    00829 F028      BCS	0x082F
    0082A 1A88      SUB	R8,R24
    0082B 0A99      SBC	R9,R25
    0082C 0AAA      SBC	R10,R26
    0082D 0ABB      SBC	R11,R27
    0082E 9503      INC	R16
    0082F 95EA      DEC	R30
    00830 F759      BNE	0x081C
    00831 F426      BRTC	0x0836
    00832 2D08      MOV	R16,R8
    00833 2D19      MOV	R17,R9
    00834 2D2A      MOV	R18,R10
    00835 2D3B      MOV	R19,R11
    00836 C013      RJMP	long_div_epilog
long_div_prolog:
    00837 927A      ST	-Y,R7
    00838 928A      ST	-Y,R8
    00839 929A      ST	-Y,R9
    0083A 92AA      ST	-Y,R10
    0083B 92BA      ST	-Y,R11
    0083C 92CA      ST	-Y,R12
    0083D 93EA      ST	-Y,R30
    0083E 938A      ST	-Y,R24
    0083F 939A      ST	-Y,R25
    00840 93AA      ST	-Y,R26
    00841 93BA      ST	-Y,R27
    00842 858B      LDD	R24,Y+11
    00843 859C      LDD	R25,Y+12
    00844 85AD      LDD	R26,Y+13
    00845 85BE      LDD	R27,Y+14
    00846 2EC3      MOV	R12,R19
    00847 F00E      BRTS	0x0849
    00848 26CB      EOR	R12,R27
    00849 9508      RET
long_div_epilog:
    0084A FCC7      SBRC	R12,7
    0084B 940E 08EE CALL	neg32
    0084D 91B9      LD	R27,Y+
    0084E 91A9      LD	R26,Y+
    0084F 9199      LD	R25,Y+
    00850 9189      LD	R24,Y+
    00851 91E9      LD	R30,Y+
    00852 90C9      LD	R12,Y+
    00853 90B9      LD	R11,Y+
    00854 90A9      LD	R10,Y+
    00855 9099      LD	R9,Y+
    00856 9089      LD	R8,Y+
    00857 9079      LD	R7,Y+
    00858 9624      ADIW	R28,4
    00859 9508      RET
tst_R16_R19:
    0085A 2FE0      MOV	R30,R16
    0085B 2BE1      OR	R30,R17
    0085C 2BE2      OR	R30,R18
    0085D 2BE3      OR	R30,R19
    0085E 9508      RET
tst_R24_R27:
    0085F 2FE8      MOV	R30,R24
    00860 2BE9      OR	R30,R25
    00861 2BEA      OR	R30,R26
    00862 2BEB      OR	R30,R27
    00863 9508      RET
neg_R24_R27:
    00864 9580      COM	R24
    00865 9590      COM	R25
    00866 95A0      COM	R26
    00867 95B0      COM	R27
    00868 5F8F      SUBI	R24,0xFF
    00869 4F9F      SBCI	R25,0xFF
    0086A 4FAF      SBCI	R26,0xFF
    0086B 4FBF      SBCI	R27,0xFF
    0086C 9508      RET
empy16s:
    0086D 920A      ST	-Y,R0
    0086E 921A      ST	-Y,R1
    0086F 938A      ST	-Y,R24
    00870 939A      ST	-Y,R25
    00871 9F02      MUL	R16,R18
    00872 01C0      MOVW	R24,R0
    00873 9F12      MUL	R17,R18
    00874 0D90      ADD	R25,R0
    00875 9F03      MUL	R16,R19
    00876 0D90      ADD	R25,R0
    00877 018C      MOVW	R16,R24
    00878 9199      LD	R25,Y+
    00879 9189      LD	R24,Y+
    0087A 9019      LD	R1,Y+
    0087B 9009      LD	R0,Y+
    0087C 9508      RET
empy32s|empy32u:
    0087D 940E 08F7 CALL	long_prolog
    0087F 927A      ST	-Y,R7
    00880 940E 0910 CALL	tstzero1
    00882 F159      BEQ	0x08AE
    00883 2477      CLR	R7
    00884 940E 0916 CALL	tstzero2
    00886 F419      BNE	0x088A
    00887 018C      MOVW	R16,R24
    00888 019D      MOVW	R18,R26
    00889 C024      RJMP	0x08AE
    0088A 920A      ST	-Y,R0
    0088B 921A      ST	-Y,R1
    0088C 9F08      MUL	R16,R24
    0088D 2CB0      MOV	R11,R0
    0088E 2CA1      MOV	R10,R1
    0088F 9F28      MUL	R18,R24
    00890 2C90      MOV	R9,R0
    00891 2C81      MOV	R8,R1
    00892 9F18      MUL	R17,R24
    00893 0CA0      ADD	R10,R0
    00894 1C91      ADC	R9,R1
    00895 1C87      ADC	R8,R7
    00896 9F09      MUL	R16,R25
    00897 0CA0      ADD	R10,R0
    00898 1C91      ADC	R9,R1
    00899 1C87      ADC	R8,R7
    0089A 9F19      MUL	R17,R25
    0089B 0C90      ADD	R9,R0
    0089C 1C81      ADC	R8,R1
    0089D 9F0A      MUL	R16,R26
    0089E 0C90      ADD	R9,R0
    0089F 1C81      ADC	R8,R1
    008A0 9F38      MUL	R19,R24
    008A1 0C80      ADD	R8,R0
    008A2 9F29      MUL	R18,R25
    008A3 0C80      ADD	R8,R0
    008A4 9F1A      MUL	R17,R26
    008A5 0C80      ADD	R8,R0
    008A6 9F0B      MUL	R16,R27
    008A7 0C80      ADD	R8,R0
    008A8 9019      LD	R1,Y+
    008A9 9009      LD	R0,Y+
    008AA 2D0B      MOV	R16,R11
    008AB 2D1A      MOV	R17,R10
    008AC 2D29      MOV	R18,R9
    008AD 2D38      MOV	R19,R8
    008AE 9079      LD	R7,Y+
    008AF 940C 0905 JMP	long_epilog
pop_xgset003C:
    008B1 90A9      LD	R10,Y+
    008B2 90B9      LD	R11,Y+
    008B3 90C9      LD	R12,Y+
    008B4 90D9      LD	R13,Y+
    008B5 9508      RET
pop_xgsetF0FC:
    008B6 90A9      LD	R10,Y+
    008B7 90B9      LD	R11,Y+
    008B8 90C9      LD	R12,Y+
    008B9 90D9      LD	R13,Y+
    008BA 90E9      LD	R14,Y+
    008BB 90F9      LD	R15,Y+
    008BC 9149      LD	R20,Y+
    008BD 9159      LD	R21,Y+
    008BE 9169      LD	R22,Y+
    008BF 9179      LD	R23,Y+
    008C0 9508      RET
push_xgsetF0FC:
    008C1 937A      ST	-Y,R23
    008C2 936A      ST	-Y,R22
push_xgset30FC:
    008C3 935A      ST	-Y,R21
    008C4 934A      ST	-Y,R20
push_xgset00FC:
    008C5 92FA      ST	-Y,R15
    008C6 92EA      ST	-Y,R14
push_xgset003C:
    008C7 92DA      ST	-Y,R13
    008C8 92CA      ST	-Y,R12
    008C9 92BA      ST	-Y,R11
    008CA 92AA      ST	-Y,R10
    008CB 9508      RET
push_xgset300C:
    008CC 935A      ST	-Y,R21
    008CD 934A      ST	-Y,R20
    008CE 92BA      ST	-Y,R11
    008CF 92AA      ST	-Y,R10
    008D0 9508      RET
pop_xgset300C:
    008D1 90A9      LD	R10,Y+
    008D2 90B9      LD	R11,Y+
    008D3 9149      LD	R20,Y+
    008D4 9159      LD	R21,Y+
    008D5 9508      RET
push_xgsetF000:
    008D6 937A      ST	-Y,R23
    008D7 936A      ST	-Y,R22
    008D8 935A      ST	-Y,R21
    008D9 934A      ST	-Y,R20
    008DA 9508      RET
pop_xgsetF000:
    008DB 9149      LD	R20,Y+
    008DC 9159      LD	R21,Y+
    008DD 9169      LD	R22,Y+
    008DE 9179      LD	R23,Y+
    008DF 9508      RET
push_xgsetF00C:
    008E0 937A      ST	-Y,R23
    008E1 936A      ST	-Y,R22
    008E2 935A      ST	-Y,R21
    008E3 934A      ST	-Y,R20
    008E4 92BA      ST	-Y,R11
    008E5 92AA      ST	-Y,R10
    008E6 9508      RET
pop_xgsetF00C:
    008E7 90A9      LD	R10,Y+
    008E8 90B9      LD	R11,Y+
    008E9 9149      LD	R20,Y+
    008EA 9159      LD	R21,Y+
    008EB 9169      LD	R22,Y+
    008EC 9179      LD	R23,Y+
    008ED 9508      RET
neg32:
    008EE 9500      COM	R16
    008EF 9510      COM	R17
    008F0 9520      COM	R18
    008F1 9530      COM	R19
    008F2 5F0F      SUBI	R16,0xFF
    008F3 4F1F      SBCI	R17,0xFF
    008F4 4F2F      SBCI	R18,0xFF
    008F5 4F3F      SBCI	R19,0xFF
    008F6 9508      RET
long_prolog:
    008F7 928A      ST	-Y,R8
    008F8 929A      ST	-Y,R9
    008F9 92AA      ST	-Y,R10
    008FA 92BA      ST	-Y,R11
    008FB 93EA      ST	-Y,R30
    008FC 938A      ST	-Y,R24
    008FD 939A      ST	-Y,R25
    008FE 93AA      ST	-Y,R26
    008FF 93BA      ST	-Y,R27
    00900 8589      LDD	R24,Y+9
    00901 859A      LDD	R25,Y+10
    00902 85AB      LDD	R26,Y+11
    00903 85BC      LDD	R27,Y+12
    00904 9508      RET
long_epilog:
    00905 91B9      LD	R27,Y+
    00906 91A9      LD	R26,Y+
    00907 9199      LD	R25,Y+
    00908 9189      LD	R24,Y+
    00909 91E9      LD	R30,Y+
    0090A 90B9      LD	R11,Y+
    0090B 90A9      LD	R10,Y+
    0090C 9099      LD	R9,Y+
    0090D 9089      LD	R8,Y+
    0090E 9624      ADIW	R28,4
    0090F 9508      RET
tstzero1:
    00910 27EE      CLR	R30
    00911 2BE0      OR	R30,R16
    00912 2BE1      OR	R30,R17
    00913 2BE2      OR	R30,R18
    00914 2BE3      OR	R30,R19
    00915 9508      RET
tstzero2:
    00916 27EE      CLR	R30
    00917 2BE8      OR	R30,R24
    00918 2BE9      OR	R30,R25
    00919 2BEA      OR	R30,R26
    0091A 2BEB      OR	R30,R27
    0091B 9508      RET
lpm32:
    0091C 93EA      ST	-Y,R30
    0091D 93FA      ST	-Y,R31
    0091E 920A      ST	-Y,R0
    0091F 2FE0      MOV	R30,R16
    00920 2FF1      MOV	R31,R17
    00921 95C8      LPM
    00922 2D00      MOV	R16,R0
    00923 9631      ADIW	R30,1
    00924 95C8      LPM
    00925 2D10      MOV	R17,R0
    00926 9631      ADIW	R30,1
    00927 95C8      LPM
    00928 2D20      MOV	R18,R0
    00929 9631      ADIW	R30,1
    0092A 95C8      LPM
    0092B 2D30      MOV	R19,R0
    0092C 9009      LD	R0,Y+
    0092D 91F9      LD	R31,Y+
    0092E 91E9      LD	R30,Y+
    0092F 9508      RET
lsl16:
    00930 2322      TST	R18
    00931 F021      BEQ	0x0936
    00932 0F00      LSL	R16
    00933 1F11      ROL	R17
    00934 952A      DEC	R18
    00935 CFFA      RJMP	lsl16
    00936 9508      RET
fpint:
    00937 924A      ST	-Y,R4
    00938 925A      ST	-Y,R5
    00939 926A      ST	-Y,R6
    0093A 938A      ST	-Y,R24
    0093B 940E 0A37 CALL	unpacku
    0093D F111      BEQ	0x0960
    0093E 2055      TST	R5
    0093F F0E2      BMI	0x095C
    00940 E18F      LDI	R24,0x1F
    00941 1648      CP	R4,R24
    00942 F4C0      BCC	0x095B
    00943 E187      LDI	R24,0x17
    00944 1648      CP	R4,R24
    00945 F0D1      BEQ	0x0960
    00946 F458      BCC	0x0952
    00947 9441      NEG	R4
    00948 EE89      LDI	R24,0xE9
    00949 1A48      SUB	R4,R24
    0094A C005      RJMP	0x0950
    0094B 9535      ASR	R19
    0094C 9527      ROR	R18
    0094D 9517      ROR	R17
    0094E 9507      ROR	R16
    0094F 944A      DEC	R4
    00950 F7D1      BNE	0x094B
    00951 C00E      RJMP	0x0960
    00952 E187      LDI	R24,0x17
    00953 1A48      SUB	R4,R24
    00954 0F00      LSL	R16
    00955 1F11      ROL	R17
    00956 1F22      ROL	R18
    00957 1F33      ROL	R19
    00958 944A      DEC	R4
    00959 F7D1      BNE	0x0954
    0095A C005      RJMP	0x0960
    0095B E73F      LDI	R19,0x7F
    0095C 2F23      MOV	R18,R19
    0095D 2F13      MOV	R17,R19
    0095E 2F03      MOV	R16,R19
    0095F C004      RJMP	0x0964
    00960 2066      TST	R6
    00961 F011      BEQ	0x0964
    00962 940E 08EE CALL	neg32
    00964 9189      LD	R24,Y+
    00965 9069      LD	R6,Y+
    00966 9059      LD	R5,Y+
    00967 9049      LD	R4,Y+
    00968 9508      RET
uint2fp:
    00969 9468      BSET	6
    0096A C001      RJMP	0x096C
int2fp:
    0096B 94E8      BCLR	6
    0096C 2722      CLR	R18
    0096D 2733      CLR	R19
    0096E F046      BRTS	0x0977
    0096F FD17      SBRC	R17,7
    00970 9520      COM	R18
    00971 FD17      SBRC	R17,7
    00972 9530      COM	R19
    00973 C003      RJMP	0x0977
ulong2fp:
    00974 9468      BSET	6
    00975 C001      RJMP	0x0977
long2fp:
    00976 94E8      BCLR	6
    00977 924A      ST	-Y,R4
    00978 925A      ST	-Y,R5
    00979 926A      ST	-Y,R6
    0097A 938A      ST	-Y,R24
    0097B E187      LDI	R24,0x17
    0097C 2E48      MOV	R4,R24
    0097D 2455      CLR	R5
    0097E 2466      CLR	R6
    0097F F036      BRTS	0x0986
    00980 2333      TST	R19
    00981 F422      BPL	0x0986
    00982 940E 08EE CALL	neg32
    00984 E880      LDI	R24,0x80
    00985 2E68      MOV	R6,R24
    00986 940E 0A50 CALL	normalize_and_pack
    00988 9189      LD	R24,Y+
    00989 9069      LD	R6,Y+
    0098A 9059      LD	R5,Y+
    0098B 9049      LD	R4,Y+
    0098C 9508      RET
fpdiv1:
    0098D 93FA      ST	-Y,R31
    0098E 93EA      ST	-Y,R30
    0098F 81EA      LDD	R30,Y+2
    00990 81FB      LDD	R31,Y+3
    00991 D027      RCALL	0x09B9
    00992 91E9      LD	R30,Y+
    00993 91F9      LD	R31,Y+
    00994 9622      ADIW	R28,2
    00995 9508      RET
fpdiv2:
    00996 93FA      ST	-Y,R31
    00997 93EA      ST	-Y,R30
    00998 2FEC      MOV	R30,R28
    00999 2FFD      MOV	R31,R29
    0099A 9632      ADIW	R30,2
    0099B D01D      RCALL	0x09B9
    0099C 91E9      LD	R30,Y+
    0099D 91F9      LD	R31,Y+
    0099E 9624      ADIW	R28,4
    0099F 9508      RET
fpdiv1x:
    009A0 93FA      ST	-Y,R31
    009A1 93EA      ST	-Y,R30
    009A2 81EA      LDD	R30,Y+2
    009A3 81FB      LDD	R31,Y+3
    009A4 D014      RCALL	0x09B9
    009A5 91E9      LD	R30,Y+
    009A6 91F9      LD	R31,Y+
    009A7 8339      STD	Y+1,R19
    009A8 8328      ST	Y,R18
    009A9 931A      ST	-Y,R17
    009AA 930A      ST	-Y,R16
    009AB 9508      RET
fpdiv2x:
    009AC 93FA      ST	-Y,R31
    009AD 93EA      ST	-Y,R30
    009AE 2FEC      MOV	R30,R28
    009AF 2FFD      MOV	R31,R29
    009B0 9632      ADIW	R30,2
    009B1 D007      RCALL	0x09B9
    009B2 91E9      LD	R30,Y+
    009B3 91F9      LD	R31,Y+
    009B4 833B      STD	Y+3,R19
    009B5 832A      STD	Y+2,R18
    009B6 8319      STD	Y+1,R17
    009B7 8308      ST	Y,R16
    009B8 9508      RET
    009B9 920A      ST	-Y,R0
    009BA 921A      ST	-Y,R1
    009BB 922A      ST	-Y,R2
    009BC 923A      ST	-Y,R3
    009BD 940E 0A95 CALL	saveFPRegs
    009BF 933A      ST	-Y,R19
    009C0 932A      ST	-Y,R18
    009C1 931A      ST	-Y,R17
    009C2 930A      ST	-Y,R16
    009C3 8100      LD	R16,Z
    009C4 8111      LDD	R17,Z+1
    009C5 8122      LDD	R18,Z+2
    009C6 8133      LDD	R19,Z+3
    009C7 940E 0A37 CALL	unpacku
    009C9 F409      BNE	0x09CB
    009CA C057      RJMP	0x0A22
    009CB 2CE6      MOV	R14,R6
    009CC 2CD5      MOV	R13,R5
    009CD 2CC4      MOV	R12,R4
    009CE 2EB3      MOV	R11,R19
    009CF 2EA2      MOV	R10,R18
    009D0 2E91      MOV	R9,R17
    009D1 2E80      MOV	R8,R16
    009D2 9109      LD	R16,Y+
    009D3 9119      LD	R17,Y+
    009D4 9129      LD	R18,Y+
    009D5 9139      LD	R19,Y+
    009D6 940E 0A37 CALL	unpacku
    009D8 F1A1      BEQ	0x0A0D
    009D9 246E      EOR	R6,R14
    009DA 184C      SUB	R4,R12
    009DB 085D      SBC	R5,R13
    009DC E880      LDI	R24,0x80
    009DD 1648      CP	R4,R24
    009DE 0653      CPC	R5,R19
    009DF F00C      BLT	0x09E1
    009E0 C033      RJMP	0x0A14
    009E1 E881      LDI	R24,0x81
    009E2 1648      CP	R4,R24
    009E3 EF8F      LDI	R24,0xFF
    009E4 0658      CPC	R5,R24
    009E5 F40C      BGE	0x09E7
    009E6 C036      RJMP	0x0A1D
    009E7 E280      LDI	R24,0x20
    009E8 2433      CLR	R3
    009E9 2E23      MOV	R2,R19
    009EA 2E12      MOV	R1,R18
    009EB 2E01      MOV	R0,R17
    009EC 2F30      MOV	R19,R16
    009ED 2722      CLR	R18
    009EE 2711      CLR	R17
    009EF 2700      CLR	R16
    009F0 9426      LSR	R2
    009F1 9417      ROR	R1
    009F2 9407      ROR	R0
    009F3 9537      ROR	R19
    009F4 9527      ROR	R18
    009F5 0F00      LSL	R16
    009F6 1F11      ROL	R17
    009F7 1F22      ROL	R18
    009F8 1F33      ROL	R19
    009F9 1C00      ROL	R0
    009FA 1C11      ROL	R1
    009FB 1C22      ROL	R2
    009FC 1C33      ROL	R3
    009FD F028      BCS	0x0A03
    009FE 1808      SUB	R0,R8
    009FF 0819      SBC	R1,R9
    00A00 082A      SBC	R2,R10
    00A01 083B      SBC	R3,R11
    00A02 C004      RJMP	0x0A07
    00A03 0C08      ADD	R0,R8
    00A04 1C19      ADC	R1,R9
    00A05 1C2A      ADC	R2,R10
    00A06 1C3B      ADC	R3,R11
    00A07 F00A      BMI	0x0A09
    00A08 6001      ORI	R16,1
    00A09 958A      DEC	R24
    00A0A F751      BNE	0x09F5
    00A0B 940E 0A50 CALL	normalize_and_pack
    00A0D 940E 0AA4 CALL	restoreFPRegs
    00A0F 9039      LD	R3,Y+
    00A10 9029      LD	R2,Y+
    00A11 9019      LD	R1,Y+
    00A12 9009      LD	R0,Y+
    00A13 9508      RET
    00A14 EF0F      LDI	R16,0xFF
    00A15 2F10      MOV	R17,R16
    00A16 E72F      LDI	R18,0x7F
    00A17 E73F      LDI	R19,0x7F
    00A18 2066      TST	R6
    00A19 F399      BEQ	0x0A0D
    00A1A 940E 08EE CALL	neg32
    00A1C CFF0      RJMP	0x0A0D
    00A1D 2700      CLR	R16
    00A1E 2F10      MOV	R17,R16
    00A1F 2F20      MOV	R18,R16
    00A20 2F30      MOV	R19,R16
    00A21 CFEB      RJMP	0x0A0D
    00A22 9109      LD	R16,Y+
    00A23 9119      LD	R17,Y+
    00A24 9129      LD	R18,Y+
    00A25 9139      LD	R19,Y+
    00A26 CFED      RJMP	0x0A14
unpacks:
    00A27 D00F      RCALL	unpacku
    00A28 F029      BEQ	0x0A2E
    00A29 2066      TST	R6
    00A2A F011      BEQ	0x0A2D
    00A2B 940E 08EE CALL	neg32
    00A2D 9498      BCLR	1
    00A2E 9508      RET
tstR16_R19:
    00A2F 2300      TST	R16
    00A30 F429      BNE	0x0A36
    00A31 2311      TST	R17
    00A32 F419      BNE	0x0A36
    00A33 2322      TST	R18
    00A34 F409      BNE	0x0A36
    00A35 2333      TST	R19
    00A36 9508      RET
unpacku:
    00A37 DFF7      RCALL	tstR16_R19
    00A38 F099      BEQ	0x0A4C
    00A39 938A      ST	-Y,R24
    00A3A 2E63      MOV	R6,R19
    00A3B E880      LDI	R24,0x80
    00A3C 2268      AND	R6,R24
    00A3D 0F22      LSL	R18
    00A3E 1F33      ROL	R19
    00A3F 2E43      MOV	R4,R19
    00A40 E78F      LDI	R24,0x7F
    00A41 1A48      SUB	R4,R24
    00A42 2455      CLR	R5
    00A43 2788      CLR	R24
    00A44 0A58      SBC	R5,R24
    00A45 9526      LSR	R18
    00A46 E830      LDI	R19,0x80
    00A47 2B23      OR	R18,R19
    00A48 2733      CLR	R19
    00A49 9189      LD	R24,Y+
    00A4A 9498      BCLR	1
    00A4B 9508      RET
    00A4C 2444      CLR	R4
    00A4D 2455      CLR	R5
    00A4E 2466      CLR	R6
    00A4F 9508      RET
normalize_and_pack:
    00A50 DFDE      RCALL	tstR16_R19
    00A51 F409      BNE	0x0A53
    00A52 9508      RET
    00A53 93AA      ST	-Y,R26
    00A54 93BA      ST	-Y,R27
    00A55 01D2      MOVW	R26,R4
    00A56 939A      ST	-Y,R25
    00A57 938A      ST	-Y,R24
    00A58 E78E      LDI	R24,0x7E
    00A59 E090      LDI	R25,0
    00A5A 2333      TST	R19
    00A5B F049      BEQ	0x0A65
    00A5C 9536      LSR	R19
    00A5D 9527      ROR	R18
    00A5E 9517      ROR	R17
    00A5F 9507      ROR	R16
    00A60 17A8      CP	R26,R24
    00A61 07B9      CPC	R27,R25
    00A62 F4CC      BGE	0x0A7C
    00A63 9611      ADIW	R26,1
    00A64 CFF5      RJMP	0x0A5A
    00A65 9580      COM	R24
    00A66 9590      COM	R25
    00A67 9601      ADIW	R24,1
    00A68 2322      TST	R18
    00A69 F0BA      BMI	0x0A81
    00A6A 0F00      LSL	R16
    00A6B 1F11      ROL	R17
    00A6C 1F22      ROL	R18
    00A6D 17A8      CP	R26,R24
    00A6E 07B9      CPC	R27,R25
    00A6F F014      BLT	0x0A72
    00A70 9711      SBIW	R26,1
    00A71 CFF6      RJMP	0x0A68
    00A72 2700      CLR	R16
    00A73 2711      CLR	R17
    00A74 2722      CLR	R18
    00A75 2733      CLR	R19
    00A76 9189      LD	R24,Y+
    00A77 9199      LD	R25,Y+
    00A78 012D      MOVW	R4,R26
    00A79 91B9      LD	R27,Y+
    00A7A 91A9      LD	R26,Y+
    00A7B 9508      RET
    00A7C 2733      CLR	R19
    00A7D EF0F      LDI	R16,0xFF
    00A7E 2F10      MOV	R17,R16
    00A7F E72F      LDI	R18,0x7F
    00A80 2F32      MOV	R19,R18
    00A81 9189      LD	R24,Y+
    00A82 9199      LD	R25,Y+
    00A83 012D      MOVW	R4,R26
    00A84 C002      RJMP	0x0A87
pack:
    00A85 93AA      ST	-Y,R26
    00A86 93BA      ST	-Y,R27
    00A87 DFA7      RCALL	tstR16_R19
    00A88 F049      BEQ	0x0A92
    00A89 01D2      MOVW	R26,R4
    00A8A 58A1      SUBI	R26,0x81
    00A8B 4FBF      SBCI	R27,0xFF
    00A8C 012D      MOVW	R4,R26
    00A8D 2D34      MOV	R19,R4
    00A8E 0F22      LSL	R18
    00A8F 9536      LSR	R19
    00A90 9527      ROR	R18
    00A91 2936      OR	R19,R6
    00A92 91B9      LD	R27,Y+
    00A93 91A9      LD	R26,Y+
    00A94 9508      RET
saveFPRegs:
    00A95 924A      ST	-Y,R4
    00A96 925A      ST	-Y,R5
    00A97 926A      ST	-Y,R6
    00A98 927A      ST	-Y,R7
    00A99 928A      ST	-Y,R8
    00A9A 929A      ST	-Y,R9
    00A9B 92AA      ST	-Y,R10
    00A9C 92BA      ST	-Y,R11
    00A9D 92CA      ST	-Y,R12
    00A9E 92DA      ST	-Y,R13
    00A9F 92EA      ST	-Y,R14
    00AA0 92FA      ST	-Y,R15
    00AA1 938A      ST	-Y,R24
    00AA2 939A      ST	-Y,R25
    00AA3 9508      RET
restoreFPRegs:
    00AA4 9199      LD	R25,Y+
    00AA5 9189      LD	R24,Y+
    00AA6 90F9      LD	R15,Y+
    00AA7 90E9      LD	R14,Y+
    00AA8 90D9      LD	R13,Y+
    00AA9 90C9      LD	R12,Y+
    00AAA 90B9      LD	R11,Y+
    00AAB 90A9      LD	R10,Y+
    00AAC 9099      LD	R9,Y+
    00AAD 9089      LD	R8,Y+
    00AAE 9079      LD	R7,Y+
    00AAF 9069      LD	R6,Y+
    00AB0 9059      LD	R5,Y+
    00AB1 9049      LD	R4,Y+
    00AB2 9508      RET
fpmule:
    00AB3 940E 0A95 CALL	saveFPRegs
    00AB5 93AA      ST	-Y,R26
    00AB6 93BA      ST	-Y,R27
    00AB7 940E 0A37 CALL	unpacku
    00AB9 F1E1      BEQ	0x0AF6
    00ABA 2CE6      MOV	R14,R6
    00ABB 2CD5      MOV	R13,R5
    00ABC 2CC4      MOV	R12,R4
    00ABD 2EB3      MOV	R11,R19
    00ABE 2EA2      MOV	R10,R18
    00ABF 2E91      MOV	R9,R17
    00AC0 2E80      MOV	R8,R16
    00AC1 8100      LD	R16,Z
    00AC2 8111      LDD	R17,Z+1
    00AC3 8122      LDD	R18,Z+2
    00AC4 8133      LDD	R19,Z+3
    00AC5 940E 0A37 CALL	unpacku
    00AC7 F171      BEQ	0x0AF6
    00AC8 246E      EOR	R6,R14
    00AC9 0C4C      ADD	R4,R12
    00ACA 1C5D      ADC	R5,R13
    00ACB E880      LDI	R24,0x80
    00ACC 1648      CP	R4,R24
    00ACD 0653      CPC	R5,R19
    00ACE F564      BGE	0x0AFB
    00ACF E881      LDI	R24,0x81
    00AD0 1648      CP	R4,R24
    00AD1 EF8F      LDI	R24,0xFF
    00AD2 0658      CPC	R5,R24
    00AD3 F16C      BLT	0x0B01
    00AD4 9EA2      MUL	R10,R18
    00AD5 2DB1      MOV	R27,R1
    00AD6 2DA0      MOV	R26,R0
    00AD7 9E91      MUL	R9,R17
    00AD8 2D91      MOV	R25,R1
    00AD9 2D80      MOV	R24,R0
    00ADA 9EA0      MUL	R10,R16
    00ADB 0D80      ADD	R24,R0
    00ADC 1D91      ADC	R25,R1
    00ADD 1FA3      ADC	R26,R19
    00ADE 1FB3      ADC	R27,R19
    00ADF 9E82      MUL	R8,R18
    00AE0 0D80      ADD	R24,R0
    00AE1 1D91      ADC	R25,R1
    00AE2 1FA3      ADC	R26,R19
    00AE3 1FB3      ADC	R27,R19
    00AE4 9E92      MUL	R9,R18
    00AE5 0D90      ADD	R25,R0
    00AE6 1DA1      ADC	R26,R1
    00AE7 1FB3      ADC	R27,R19
    00AE8 9EA1      MUL	R10,R17
    00AE9 0D90      ADD	R25,R0
    00AEA 1DA1      ADC	R26,R1
    00AEB 1FB3      ADC	R27,R19
    00AEC 2F2B      MOV	R18,R27
    00AED 2F1A      MOV	R17,R26
    00AEE 2F09      MOV	R16,R25
    00AEF 0F88      LSL	R24
    00AF0 1F00      ROL	R16
    00AF1 1F11      ROL	R17
    00AF2 1F22      ROL	R18
    00AF3 1F33      ROL	R19
    00AF4 940E 0A50 CALL	normalize_and_pack
    00AF6 91B9      LD	R27,Y+
    00AF7 91A9      LD	R26,Y+
    00AF8 940E 0AA4 CALL	restoreFPRegs
    00AFA 9508      RET
    00AFB EF0F      LDI	R16,0xFF
    00AFC 2F10      MOV	R17,R16
    00AFD E72F      LDI	R18,0x7F
    00AFE E78F      LDI	R24,0x7F
    00AFF 2E48      MOV	R4,R24
    00B00 CFF5      RJMP	0x0AF6
    00B01 2700      CLR	R16
    00B02 2F10      MOV	R17,R16
    00B03 2F20      MOV	R18,R16
    00B04 2F30      MOV	R19,R16
    00B05 CFF0      RJMP	0x0AF6
fpmule2:
    00B06 93FA      ST	-Y,R31
    00B07 93EA      ST	-Y,R30
    00B08 2FEC      MOV	R30,R28
    00B09 2FFD      MOV	R31,R29
    00B0A 9632      ADIW	R30,2
    00B0B 940E 0AB3 CALL	fpmule
    00B0D 91E9      LD	R30,Y+
    00B0E 91F9      LD	R31,Y+
    00B0F 9624      ADIW	R28,4
    00B10 9508      RET
fpmule2x:
    00B11 93FA      ST	-Y,R31
    00B12 93EA      ST	-Y,R30
    00B13 2FEC      MOV	R30,R28
    00B14 2FFD      MOV	R31,R29
    00B15 9632      ADIW	R30,2
    00B16 940E 0AB3 CALL	fpmule
    00B18 91E9      LD	R30,Y+
    00B19 91F9      LD	R31,Y+
    00B1A 833B      STD	Y+3,R19
    00B1B 832A      STD	Y+2,R18
    00B1C 8319      STD	Y+1,R17
    00B1D 8308      ST	Y,R16
    00B1E 9508      RET
